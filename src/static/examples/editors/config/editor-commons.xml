<mxEditor>
	<ui>
		<resource basename="http://localhost:3000/resources/app" />
	</ui>
	<mxDefaultPopupMenu as="popupHandler">
		<add as="cut" action="cut" icon="http://localhost:3000/cut.gif" />
		<add as="copy" action="copy" icon="http://localhost:3000/copy.gif" />
		<add as="paste" action="paste" icon="http://localhost:3000/paste.gif" />
		<separator />
		<add as="delete" action="delete" icon="http://localhost:3000/delete.gif" if="cell" />
		<separator />
		<add as="exitGroup" action="exitGroup" icon="http://localhost:3000/up.gif" if="notRoot" />
		<add as="enterGroup" action="enterGroup" icon="http://localhost:3000/down.gif" if="validRoot" />
		<separator />
		<add as="shape" if="cell">
			<add as="group" action="group" icon="http://localhost:3000/group.gif" if="ncells" />
			<add as="ungroup" action="ungroup" icon="http://localhost:3000/ungroup.gif" if="cell" />
			<separator />
			<add as="removeFromParent" action="removeFromParent" if="cell" />
			<separator />
			<add as="collapse" action="collapse" icon="http://localhost:3000/collapse.gif" if="expandable" />
			<add as="expand" action="expand" icon="http://localhost:3000/expand.gif" if="collapsable" />
			<separator />
			<add as="toFront" action="toFront" icon="http://localhost:3000/tofront.gif" if="cell" />
			<add as="toBack" action="toBack" icon="http://localhost:3000/toback.gif" if="cell" />
			<separator />
			<add as="editStyle" action="editStyle" if="cell" />
		</add>
		<add as="format" if="cell">
			<add as="fillColor" action="fillColor" icon="http://localhost:3000/fillcolor.gif" if="cell" />
			<add as="gradientColor" action="gradientColor" if="cell" />
			<add as="strokeColor" action="strokeColor" icon="http://localhost:3000/linecolor.gif" if="cell" />
			<separator />
			<add as="toggleRounded" action="toggleRounded" if="cell" />
			<add as="toggleShadow" action="toggleShadow" if="cell" />
		</add>
		<add as="font" if="cell">
			<add as="fontColor" action="fontColor" icon="http://localhost:3000/fontcolor.gif" if="cell" />
			<add as="fontFamily" action="fontFamily" if="cell" />
			<add as="fontSize" action="fontSize" if="cell" />
			<separator />
			<add as="bold" action="bold" icon="http://localhost:3000/bold.gif" if="cell" />
			<add as="italic" action="italic" icon="http://localhost:3000/italic.gif" if="cell" />
		</add>
		<separator />
		<add as="properties" action="showProperties" icon="http://localhost:3000/properties.gif" />
		<separator />
		<add as="openHref" action="openHref" icon="http://localhost:3000/link.gif" />
	</mxDefaultPopupMenu>
	<include name="http://localhost:3000/keyhandler-commons.xml" />
	<Array as="actions">
		<add as="open">
			<![CDATA[
			function (editor)
			{
				editor.open(mxUtils.prompt('Enter filename', 'workflow.xml'));
			}
		]]>
		</add>
		<add as="openHref">
			<![CDATA[
			function (editor, cell)
			{
				cell = cell || editor.graph.getSelectionCell();
				
				if (cell == null)
				{
					cell = editor.graph.getCurrentRoot();

					if (cell == null)
					{
						cell = editor.graph.getModel().getRoot();
					}
				}

				if (cell != null)
				{
					var href = cell.getAttribute('href');
					
					if (href != null && href.length > 0)
					{
						window.open(href);
					}
					else
					{
						mxUtils.alert('No URL defined. Showing properties...');
						editor.execute('showProperties', cell);
					}
				}
			}
		]]>
		</add>
		<add as="editStyle">
			<![CDATA[
			function (editor)
			{
				var cell = editor.graph.getSelectionCell();
				
				if (cell != null)
				{
					var model = editor.graph.getModel();
					var style = mxUtils.prompt(mxhttp://localhost:3000/resources.get('enterStyle'), model.getStyle(cell) || '');

					if (style != null)
					{
						model.setStyle(cell, style);
					}
				}
			}
		]]>
		</add>
		<add as="fillColor">
			<![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxhttp://localhost:3000/resources.get('enterColorname'), 'red');
				
				if (color != null)
				{
					editor.graph.model.beginUpdate();
					try
					{
						editor.graph.setCellStyles("strokeColor", color);
						editor.graph.setCellStyles("fillColor", color);
					}
					finally
					{
						editor.graph.model.endUpdate();
					}
				}
			}
		]]>
		</add>
		<add as="gradientColor">
			<![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxhttp://localhost:3000/resources.get('enterColorname'), 'white');
				
				if (color != null)
				{
					editor.graph.setCellStyles("gradientColor", color);
				}
			}
		]]>
		</add>
		<add as="strokeColor">
			<![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxhttp://localhost:3000/resources.get('enterColorname'), 'red');
				
				if (color != null)
				{
					editor.graph.setCellStyles("strokeColor", color);
				}
			}
		]]>
		</add>
		<add as="fontColor">
			<![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxhttp://localhost:3000/resources.get('enterColorname'), 'red');
				
				if (color != null)
				{
					editor.graph.setCellStyles("fontColor", color);
				}
			}
		]]>
		</add>
		<add as="fontFamily">
			<![CDATA[
			function (editor)
			{
				var family = mxUtils.prompt(mxhttp://localhost:3000/resources.get('enterFontfamily'), 'Arial');
				
				if (family != null && family.length > 0)
				{
					editor.graph.setCellStyles("fontFamily", family);
				}
			}
		]]>
		</add>
		<add as="fontSize">
			<![CDATA[
			function (editor)
			{
				var size = mxUtils.prompt(mxhttp://localhost:3000/resources.get('enterFontsize'), '10');
				
				if (size != null && size > 0 && size < 999)
				{
					editor.graph.setCellStyles("fontSize", size);
				}
			}
		]]>
		</add>
		<add as="image">
			<![CDATA[
			function (editor)
			{
				var image = mxUtils.prompt(mxhttp://localhost:3000/resources.get('enterImageUrl'),
					'examples/http://localhost:3000/image.gif');
				
				if (image != null)
				{
					editor.graph.setCellStyles("image", image);
				}
			}
		]]>
		</add>
		<add as="opacity">
			<![CDATA[
			function (editor)
			{
				var opacity = mxUtils.prompt(mxhttp://localhost:3000/resources.get('enterOpacity'), '100');
				
				if (opacity != null && opacity >= 0 && opacity <= 100)
				{
					editor.graph.setCellStyles("opacity", opacity);
				}
			}
		]]>
		</add>
		<add as="straightConnector">
			<![CDATA[
			function (editor)
			{
				editor.graph.setCellStyle("straightEdge");
			}
		]]>
		</add>
		<add as="elbowConnector">
			<![CDATA[
			function (editor)
			{
				editor.graph.setCellStyle("");
			}
		]]>
		</add>
		<add as="arrowConnector">
			<![CDATA[
			function (editor)
			{
				editor.graph.setCellStyle("arrowEdge");
			}
		]]>
		</add>
		<add as="toggleOrientation">
			<![CDATA[
			function (editor, cell)
			{
				editor.graph.toggleCellStyles(mxConstants.STYLE_HORIZONTAL, true);
			}
		]]>
		</add>
		<add as="toggleRounded">
			<![CDATA[
			function (editor)
			{
				editor.graph.toggleCellStyles(mxConstants.STYLE_ROUNDED);
			}
		]]>
		</add>
		<add as="toggleShadow">
			<![CDATA[
			function (editor)
			{
				editor.graph.toggleCellStyles(mxConstants.STYLE_SHADOW);
			}
		]]>
		</add>
		<add as="horizontalTree">
			<![CDATA[
			function (editor, cell)
			{
				cell = cell || editor.graph.getSelectionCell();
				
				if (cell == null)
				{
					cell = editor.graph.getDefaultParent();
				}
				
				editor.treeLayout(cell, true);
			}
		]]>
		</add>
		<add as="verticalTree">
			<![CDATA[
			function (editor, cell)
			{
				cell = cell || editor.graph.getSelectionCell();
				
				if (cell == null)
				{
					cell = editor.graph.getDefaultParent();
				}
				
				editor.treeLayout(cell, false);
			}
		]]>
		</add>
	</Array>
</mxEditor>