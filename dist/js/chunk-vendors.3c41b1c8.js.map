{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_iter-define.js","webpack:///./node_modules/core-js/modules/es7.promise.finally.js","webpack:///./node_modules/core-js/modules/_object-keys.js","webpack:///./node_modules/core-js/modules/_object-dps.js","webpack:///./node_modules/core-js/modules/_task.js","webpack:///./node_modules/core-js/modules/_iter-call.js","webpack:///./node_modules/core-js/modules/_dom-create.js","webpack:///./node_modules/core-js/modules/_classof.js","webpack:///./node_modules/core-js/modules/_object-gops.js","webpack:///./node_modules/core-js/modules/core.get-iterator-method.js","webpack:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack:///./node_modules/core-js/modules/_redefine.js","webpack:///./node_modules/core-js/modules/_object-create.js","webpack:///./node_modules/vue/dist/vue.runtime.esm.js","webpack:///./node_modules/core-js/modules/_wks.js","webpack:///./node_modules/core-js/modules/_library.js","webpack:///./node_modules/core-js/modules/_cof.js","webpack:///./node_modules/core-js/modules/es6.string.includes.js","webpack:///./node_modules/core-js/modules/_invoke.js","webpack:///./node_modules/core-js/modules/_hide.js","webpack:///./node_modules/core-js/modules/_is-array-iter.js","webpack:///./node_modules/core-js/modules/_object-gpo.js","webpack:///./node_modules/core-js/modules/_iter-create.js","webpack:///./node_modules/core-js/modules/_to-integer.js","webpack:///./node_modules/core-js/modules/_property-desc.js","webpack:///./node_modules/core-js/modules/_for-of.js","webpack:///./node_modules/core-js/modules/_to-object.js","webpack:///./node_modules/core-js/modules/_fails-is-regexp.js","webpack:///./node_modules/core-js/modules/_object-pie.js","webpack:///./node_modules/core-js/modules/es6.promise.js","webpack:///./node_modules/core-js/modules/_shared.js","webpack:///./node_modules/core-js/modules/_export.js","webpack:///./node_modules/core-js/modules/_iter-detect.js","webpack:///./node_modules/core-js/modules/_shared-key.js","webpack:///./node_modules/core-js/modules/_iobject.js","webpack:///./node_modules/core-js/modules/es7.array.includes.js","webpack:///./node_modules/core-js/modules/_to-iobject.js","webpack:///./node_modules/core-js/modules/_has.js","webpack:///./node_modules/core-js/modules/_to-primitive.js","webpack:///./node_modules/core-js/modules/_object-assign.js","webpack:///./node_modules/core-js/modules/_global.js","webpack:///./node_modules/core-js/modules/_to-absolute-index.js","webpack:///./node_modules/core-js/modules/_fails.js","webpack:///./node_modules/core-js/modules/_set-species.js","webpack:///./node_modules/mxgraph-lakshamana/javascript/dist/build.js","webpack:///./node_modules/core-js/modules/_set-to-string-tag.js","webpack:///./node_modules/core-js/modules/_microtask.js","webpack:///./node_modules/core-js/modules/_core.js","webpack:///./node_modules/core-js/modules/_iterators.js","webpack:///./node_modules/core-js/modules/_object-dp.js","webpack:///./node_modules/core-js/modules/_ctx.js","webpack:///./node_modules/core-js/modules/_add-to-unscopables.js","webpack:///./node_modules/core-js/modules/_perform.js","webpack:///./node_modules/core-js/modules/_to-length.js","webpack:///./node_modules/core-js/modules/_descriptors.js","webpack:///./node_modules/core-js/modules/_user-agent.js","webpack:///./node_modules/core-js/modules/_new-promise-capability.js","webpack:///./node_modules/core-js/modules/_is-regexp.js","webpack:///./node_modules/core-js/modules/_promise-resolve.js","webpack:///./node_modules/core-js/modules/_defined.js","webpack:///./node_modules/core-js/modules/_array-includes.js","webpack:///./node_modules/core-js/modules/_ie8-dom-define.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/core-js/modules/_uid.js","webpack:///./node_modules/core-js/modules/es6.array.iterator.js","webpack:///./node_modules/core-js/modules/_an-object.js","webpack:///./node_modules/core-js/modules/_object-keys-internal.js","webpack:///./node_modules/core-js/modules/_string-context.js","webpack:///./node_modules/core-js/modules/_is-object.js","webpack:///./node_modules/core-js/modules/_iter-step.js","webpack:///./node_modules/core-js/modules/_a-function.js","webpack:///./node_modules/core-js/modules/_redefine-all.js","webpack:///./node_modules/core-js/modules/_enum-bug-keys.js","webpack:///./node_modules/core-js/modules/_species-constructor.js","webpack:///./node_modules/core-js/modules/_an-instance.js","webpack:///./node_modules/core-js/modules/es6.object.assign.js","webpack:///./node_modules/core-js/modules/_function-to-string.js","webpack:///./node_modules/core-js/modules/_html.js"],"names":["LIBRARY","__webpack_require__","$export","redefine","hide","Iterators","$iterCreate","setToStringTag","getPrototypeOf","ITERATOR","BUGGY","keys","FF_ITERATOR","KEYS","VALUES","returnThis","this","module","exports","Base","NAME","Constructor","next","DEFAULT","IS_SET","FORCED","methods","key","IteratorPrototype","getMethod","kind","proto","TAG","DEF_VALUES","VALUES_BUG","prototype","$native","$default","$entries","undefined","$anyNative","entries","call","Object","name","values","P","F","core","global","speciesConstructor","promiseResolve","R","finally","onFinally","C","Promise","isFunction","then","x","e","$keys","enumBugKeys","O","dP","anObject","getKeys","defineProperties","Properties","length","i","f","defer","channel","port","ctx","invoke","html","cel","process","setTask","setImmediate","clearTask","clearImmediate","MessageChannel","Dispatch","counter","queue","ONREADYSTATECHANGE","run","id","hasOwnProperty","fn","listener","event","data","args","arguments","push","Function","nextTick","now","port2","port1","onmessage","postMessage","addEventListener","importScripts","appendChild","removeChild","setTimeout","set","clear","iterator","value","ret","isObject","document","is","createElement","it","cof","ARG","tryGet","T","B","callee","getOwnPropertySymbols","classof","getIteratorMethod","normalizeComponent","scriptExports","render","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","options","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","concat","d","__webpack_exports__","has","SRC","$toString","TO_STRING","TPL","split","inspectSource","val","safe","join","String","dPs","IE_PROTO","Empty","PROTOTYPE","createDict","iframeDocument","iframe","lt","gt","style","display","src","contentWindow","open","write","close","create","result","emptyObject","freeze","isUndef","v","isDef","isTrue","isFalse","isPrimitive","obj","_toString","toString","isPlainObject","isRegExp","isValidArrayIndex","n","parseFloat","Math","floor","isFinite","isPromise","catch","Array","isArray","JSON","stringify","toNumber","isNaN","makeMap","str","expectsLowerCase","map","list","toLowerCase","isReservedAttribute","remove","arr","item","index","indexOf","splice","hasOwn","cached","cache","hit","camelizeRE","camelize","replace","_","c","toUpperCase","capitalize","charAt","slice","hyphenateRE","hyphenate","polyfillBind","boundFn","a","l","apply","_length","nativeBind","bind","toArray","start","extend","to","_from","toObject","res","noop","b","no","identity","looseEqual","isObjectA","isObjectB","isArrayA","isArrayB","every","Date","getTime","keysA","keysB","looseIndexOf","once","called","SSR_ATTR","ASSET_TYPES","LIFECYCLE_HOOKS","config","optionMergeStrategies","silent","productionTip","devtools","performance","errorHandler","warnHandler","ignoredElements","keyCodes","isReservedTag","isReservedAttr","isUnknownElement","getTagNamespace","parsePlatformTagName","mustUseProp","async","_lifecycleHooks","unicodeRegExp","isReserved","charCodeAt","def","enumerable","defineProperty","writable","configurable","bailRE","RegExp","parsePath","path","test","segments","_isServer","hasProto","inBrowser","window","inWeex","WXEnvironment","platform","weexPlatform","UA","navigator","userAgent","isIE","isIE9","isEdge","isIOS","isFF","match","nativeWatch","watch","supportsPassive","opts","get","isServerRendering","env","VUE_ENV","__VUE_DEVTOOLS_GLOBAL_HOOK__","isNative","Ctor","_Set","hasSymbol","Symbol","Reflect","ownKeys","Set","warn","uid","Dep","subs","addSub","sub","removeSub","depend","target","addDep","notify","update","targetStack","pushTarget","popTarget","pop","VNode","tag","children","text","elm","componentOptions","asyncFactory","ns","fnContext","fnOptions","fnScopeId","componentInstance","raw","isStatic","isRootInsert","isComment","isCloned","isOnce","asyncMeta","isAsyncPlaceholder","prototypeAccessors","child","createEmptyVNode","node","createTextVNode","cloneVNode","vnode","cloned","arrayProto","arrayMethods","methodsToPatch","forEach","method","original","len","inserted","ob","__ob__","observeArray","dep","arrayKeys","getOwnPropertyNames","shouldObserve","toggleObserving","Observer","vmCount","protoAugment","copyAugment","walk","__proto__","observe","asRootData","isExtensible","_isVue","defineReactive$$1","customSetter","shallow","property","getOwnPropertyDescriptor","getter","setter","childOb","dependArray","newVal","max","del","items","strats","mergeData","from","toVal","fromVal","mergeDataOrFn","parentVal","childVal","vm","instanceData","defaultData","mergeHook","dedupeHooks","hooks","mergeAssets","type","key$1","props","inject","computed","provide","defaultStrat","normalizeProps","normalizeInject","normalized","normalizeDirectives","dirs","directives","def$$1","mergeOptions","_base","extends","mixins","mergeField","strat","resolveAsset","warnMissing","assets","camelizedId","PascalCaseId","validateProp","propOptions","propsData","prop","absent","booleanIndex","getTypeIndex","Boolean","stringIndex","getPropDefaultValue","prevShouldObserve","default","_props","getType","isSameType","expectedTypes","handleError","err","info","cur","$parent","errorCaptured","capture","globalHandleError","invokeWithErrorHandling","handler","_handled","logError","console","error","timerFunc","isUsingMicroTask","callbacks","pending","flushCallbacks","copies","p","resolve","MutationObserver","observer","textNode","createTextNode","characterData","cb","_resolve","seenObjects","traverse","_traverse","seen","isA","isFrozen","depId","normalizeEvent","passive","once$$1","createFnInvoker","fns","invoker","arguments$1","updateListeners","on","oldOn","remove$$1","createOnceHandler","old","params","mergeVNodeHook","hookKey","oldHook","wrappedHook","merged","extractPropsFromVNodeData","attrs","altKey","checkProp","hash","preserve","simpleNormalizeChildren","normalizeChildren","normalizeArrayChildren","isTextNode","nestedIndex","lastIndex","last","shift","_isVList","initProvide","_provided","initInjections","resolveInject","provideKey","source","provideDefault","resolveSlots","slots","slot","name$1","isWhitespace","normalizeScopedSlots","normalSlots","prevSlots","hasNormalSlots","isStable","$stable","$key","_normalized","$hasNormal","normalizeScopedSlot","key$2","proxyNormalSlot","proxy","renderList","done","renderSlot","fallback","bindObject","nodes","scopedSlotFn","$scopedSlots","$slots","$createElement","resolveFilter","isKeyNotMatch","expect","actual","checkKeyCodes","eventKeyCode","builtInKeyCode","eventKeyName","builtInKeyName","mappedKeyCode","bindObjectProps","asProp","isSync","loop","domProps","camelizedKey","hyphenatedKey","$event","renderStatic","isInFor","_staticTrees","tree","_renderProxy","markStatic","markOnce","markStaticNode","bindObjectListeners","ours","resolveScopedSlots","hasDynamicKeys","contentHashKey","bindDynamicKeys","baseObj","prependModifier","symbol","installRenderHelpers","_o","_n","_s","_l","_t","_q","_i","_m","_f","_k","_b","_v","_e","_u","_g","_d","_p","FunctionalRenderContext","contextVm","this$1","_original","isCompiled","needNormalization","listeners","injections","scopedSlots","_c","createFunctionalComponent","mergeProps","renderContext","cloneAndMarkFunctionalResult","vnodes","clone","componentVNodeHooks","init","hydrating","_isDestroyed","keepAlive","mountedNode","prepatch","createComponentInstanceForVnode","activeInstance","$mount","oldVnode","updateChildComponent","insert","_isMounted","callHook","queueActivatedComponent","activateChildComponent","destroy","deactivateChildComponent","$destroy","hooksToMerge","createComponent","baseCtor","cid","resolveAsyncComponent","createAsyncPlaceholder","resolveConstructorOptions","model","transformModel","nativeOn","abstract","installComponentHooks","_isComponent","_parentVnode","inlineTemplate","toMerge","_merged","mergeHook$1","f1","f2","callback","SIMPLE_NORMALIZE","ALWAYS_NORMALIZE","normalizationType","alwaysNormalize","_createElement","pre","applyNS","registerDeepBindings","force","class","initRender","_vnode","parentVnode","_renderChildren","parentData","_parentListeners","currentRenderingInstance","renderMixin","Vue","$nextTick","_render","ref","ensureCtor","comp","base","__esModule","toStringTag","factory","errorComp","resolved","owner","owners","loading","loadingComp","sync","timerLoading","timerTimeout","$on","forceRender","renderCompleted","$forceUpdate","clearTimeout","reject","reason","component","delay","timeout","getFirstComponentChild","initEvents","_events","_hasHookEvent","updateComponentListeners","remove$1","$off","_target","onceHandler","oldListeners","eventsMixin","hookRE","$once","i$1","cbs","$emit","setActiveInstance","prevActiveInstance","initLifecycle","$children","$refs","_watcher","_inactive","_directInactive","_isBeingDestroyed","lifecycleMixin","_update","prevEl","$el","prevVnode","restoreActiveInstance","__patch__","__vue__","teardown","_watchers","_data","mountComponent","el","updateComponent","Watcher","before","renderChildren","newScopedSlots","oldScopedSlots","hasDynamicScopedSlot","needsForceUpdate","$attrs","$listeners","propKeys","_propKeys","isInInactiveTree","direct","handlers","j","activatedChildren","waiting","flushing","resetSchedulerState","currentFlushTimestamp","getNow","createEvent","timeStamp","flushSchedulerQueue","watcher","sort","activatedQueue","updatedQueue","callActivatedHooks","callUpdatedHooks","emit","queueWatcher","uid$2","expOrFn","isRenderWatcher","deep","user","lazy","active","dirty","deps","newDeps","depIds","newDepIds","expression","cleanupDeps","tmp","oldValue","evaluate","sharedPropertyDefinition","sourceKey","initState","initProps","initMethods","initData","initComputed","initWatch","propsOptions","isRoot","getData","computedWatcherOptions","watchers","_computedWatchers","isSSR","userDef","defineComputed","shouldCache","createComputedGetter","createGetterInvoker","createWatcher","$watch","stateMixin","dataDef","propsDef","$set","$delete","immediate","uid$3","initMixin","_init","_uid","initInternalComponent","constructor","_self","vnodeComponentOptions","_componentTag","super","superOptions","cachedSuperOptions","modifiedOptions","resolveModifiedOptions","extendOptions","components","modified","latest","sealed","sealedOptions","initUse","use","plugin","installedPlugins","_installedPlugins","unshift","install","initMixin$1","mixin","initExtend","Super","SuperId","cachedCtors","_Ctor","Sub","initProps$1","initComputed$1","Comp","initAssetRegisters","definition","getComponentName","matches","pattern","pruneCache","keepAliveInstance","filter","cachedNode","pruneCacheEntry","current","cached$$1","patternTypes","KeepAlive","include","exclude","Number","created","destroyed","mounted","ref$1","parseInt","builtInComponents","initGlobalAPI","configDef","util","defineReactive","delete","observable","version","acceptValue","attr","isEnumeratedAttr","isValidContentEditableValue","convertEnumeratedValue","isFalsyAttrValue","isBooleanAttr","xlinkNS","isXlink","getXlinkProp","genClassForVnode","parentNode","childNode","mergeClassData","renderClass","staticClass","dynamicClass","stringifyClass","stringifyArray","stringifyObject","stringified","namespaceMap","svg","math","isHTMLTag","isSVG","unknownElementCache","HTMLUnknownElement","HTMLElement","isTextInputType","query","selected","querySelector","createElement$1","tagName","multiple","setAttribute","createElementNS","namespace","createComment","insertBefore","newNode","referenceNode","nextSibling","setTextContent","textContent","setStyleScope","nodeOps","registerRef","isRemoval","refs","refInFor","emptyNode","sameVnode","sameInputType","typeA","typeB","createKeyToOldIdx","beginIdx","endIdx","createPatchFunction","backend","modules","emptyNodeAt","createRmCb","childElm","removeNode","createElm","insertedVnodeQueue","parentElm","refElm","nested","ownerArray","setScope","createChildren","invokeCreateHooks","isReactivated","initComponent","reactivateComponent","pendingInsert","isPatchable","innerNode","transition","activate","ref$$1","ancestor","addVnodes","startIdx","invokeDestroyHook","removeVnodes","ch","removeAndInvokeRemoveHook","rm","updateChildren","oldCh","newCh","removeOnly","oldKeyToIdx","idxInOld","vnodeToMove","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","canMove","patchVnode","findIdxInOld","end","hydrate","postpatch","invokeInsertHook","initial","isRenderedModule","inVPre","hasChildNodes","innerHTML","childrenMatch","firstChild","fullInvoke","isInitialPatch","isRealElement","nodeType","hasAttribute","removeAttribute","oldElm","_leaveCb","patchable","i$2","updateDirectives","oldDir","dir","isCreate","isDestroy","oldDirs","normalizeDirectives$1","newDirs","dirsWithInsert","dirsWithPostpatch","oldArg","arg","callHook$1","componentUpdated","callInsert","emptyModifiers","modifiers","getRawDirName","rawName","baseModules","updateAttrs","inheritAttrs","oldAttrs","setAttr","removeAttributeNS","baseSetAttr","setAttributeNS","__ieph","blocker","stopImmediatePropagation","removeEventListener","updateClass","oldData","cls","transitionClass","_transitionClasses","_prevClass","target$1","klass","RANGE_TOKEN","CHECKBOX_RADIO_TOKEN","normalizeEvents","change","createOnceHandler$1","remove$2","useMicrotaskFix","add$1","attachedTimestamp","_wrapper","currentTarget","ownerDocument","updateDOMListeners","svgContainer","events","updateDOMProps","oldProps","childNodes","_value","strCur","shouldUpdateValue","checkVal","composing","isNotInFocusAndDirty","isDirtyWithModifiers","notInFocus","activeElement","_vModifiers","number","trim","parseStyleText","cssText","listDelimiter","propertyDelimiter","normalizeStyleData","normalizeStyleBinding","staticStyle","bindingStyle","getStyle","checkChild","styleData","emptyStyle","cssVarRE","importantRE","setProp","setProperty","normalizedName","normalize","vendorNames","capName","updateStyle","oldStaticStyle","oldStyleBinding","normalizedStyle","oldStyle","newStyle","whitespaceRE","addClass","classList","getAttribute","removeClass","tar","resolveTransition","css","autoCssTransition","enterClass","enterToClass","enterActiveClass","leaveClass","leaveToClass","leaveActiveClass","hasTransition","TRANSITION","ANIMATION","transitionProp","transitionEndEvent","animationProp","animationEndEvent","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","raf","requestAnimationFrame","nextFrame","addTransitionClass","transitionClasses","removeTransitionClass","whenTransitionEnds","expectedType","getTransitionInfo","propCount","ended","onEnd","transformRE","styles","getComputedStyle","transitionDelays","transitionDurations","transitionTimeout","getTimeout","animationDelays","animationDurations","animationTimeout","hasTransform","delays","durations","toMs","s","enter","toggleDisplay","cancelled","_enterCb","appearClass","appearToClass","appearActiveClass","beforeEnter","afterEnter","enterCancelled","beforeAppear","appear","afterAppear","appearCancelled","duration","transitionNode","isAppear","startClass","activeClass","toClass","beforeEnterHook","enterHook","afterEnterHook","enterCancelledHook","explicitEnterDuration","expectsCSS","userWantsControl","getHookArgumentsLength","show","pendingNode","_pending","isValidDuration","leave","beforeLeave","afterLeave","leaveCancelled","delayLeave","explicitLeaveDuration","performLeave","invokerFns","_enter","platformModules","patch","vmodel","trigger","directive","binding","_vOptions","setSelected","getValue","onCompositionStart","onCompositionEnd","prevOptions","curOptions","some","o","needReset","hasNoMatchingOption","actuallySetSelected","isMultiple","option","selectedIndex","initEvent","dispatchEvent","locateNode","transition$$1","originalDisplay","__vOriginalDisplay","unbind","platformDirectives","transitionProps","mode","getRealChild","compOptions","extractTransitionData","placeholder","rawChild","hasParentTransition","isSameChild","oldChild","isNotTextNode","isVShowDirective","Transition","_leaving","oldRawChild","delayedLeave","moveClass","TransitionGroup","beforeMount","kept","prevChildren","rawChildren","transitionData","removed","c$1","pos","getBoundingClientRect","updated","hasMove","callPendingCbs","recordPosition","applyTranslation","_reflow","body","offsetHeight","moved","transform","WebkitTransform","transitionDuration","_moveCb","propertyName","_hasMove","cloneNode","newPos","oldPos","dx","left","dy","top","platformComponents","store","USE_SYMBOL","$exports","INCLUDES","includes","searchString","that","un","createDesc","object","ArrayProto","ObjectProto","descriptor","ceil","bitmap","isArrayIter","toLength","getIterFn","BREAK","RETURN","iterable","step","iterFn","TypeError","defined","MATCH","KEY","re","propertyIsEnumerable","Internal","newGenericPromiseCapability","OwnPromiseCapability","Wrapper","aFunction","anInstance","forOf","task","microtask","newPromiseCapabilityModule","perform","PROMISE","versions","v8","$Promise","isNode","empty","newPromiseCapability","USE_NATIVE","promise","FakePromise","exec","PromiseRejectionEvent","isThenable","isReject","chain","ok","reaction","exited","fail","domain","_h","onHandleUnhandled","exit","onUnhandled","unhandled","isUnhandled","onunhandledrejection","_a","onrejectionhandled","$reject","_w","$resolve","wrapper","executor","onFulfilled","onRejected","G","W","S","r","capability","$$reject","iter","all","remaining","$index","alreadyCalled","race","SHARED","copyright","own","out","exp","IS_FORCED","IS_GLOBAL","IS_STATIC","IS_PROTO","IS_BIND","expProto","U","SAFE_CLOSING","riter","skipClosing","shared","$includes","IObject","valueOf","DESCRIPTORS","gOPS","pIE","$assign","assign","A","K","k","aLen","getSymbols","isEnum","self","__g","toInteger","min","SPECIES","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","__mxOutput","mxClient","VERSION","IS_IE","IS_IE6","IS_IE11","IS_EDGE","IS_QUIRKS","documentMode","IS_EM","VML_PREFIX","OFFICE_PREFIX","IS_NS","IS_OP","IS_OT","IS_SF","IS_IOS","IS_GC","IS_CHROMEAPP","chrome","app","runtime","IS_FF","IS_MT","IS_VML","appName","IS_SVG","NO_FO","IS_WIN","appVersion","IS_MAC","IS_TOUCH","documentElement","IS_POINTER","PointerEvent","IS_LOCAL","location","href","defaultBundles","isBrowserSupported","link","rel","doc","head","getElementsByTagName","loadResources","lan","mxResources","mxLoadResources","mxForceIncludes","mxResourceExtension","mxLoadStylesheets","mxBasePath","substring","basePath","mxImageBasePath","imageBasePath","mxLanguage","language","userLanguage","mxDefaultLanguage","defaultLanguage","mxLanguages","languages","namespaces","styleSheets","styleSheet","createStyleSheet","mxLog","consoleName","TRACE","DEBUG","WARN","buffer","title","table","tbody","tr","td","verticalAlign","textarea","height","resize","compatMode","width","addButton","evt","content","mxUtils","getInnerHtml","debug","copy","alert","popup","w","innerHeight","innerWidth","clientHeight","clientWidth","mxWindow","setMaximizable","setScrollable","setResizable","setClosable","destroyOnClose","elt","getElement","resizeHandler","sender","addListener","mxEvent","RESIZE_END","MAXIMIZE","NORMALIZE","writeln","lab","funct","button","isVisible","setVisible","visible","string","t0","dt","visibility","scrollTop","scrollHeight","mxObjectIdentity","FIELD_NAME","ctor","getFunctionName","mxDictionary","put","previous","getValues","visit","visitor","resources","extension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","getDefaultBundle","basename","getSpecialBundle","dash","mxConstants","NONE","defaultBundle","specialBundle","req","parse","getText","load","isReady","lines","idx","unescape","defaultValue","replacePlaceholders","mxPoint","y","mxRectangle","equals","setRect","getCenterX","getCenterY","rect","minX","minY","maxX","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","fromRectangle","mxEffects","animateChanges","graph","changes","maxStep","animate","isRequired","mxGeometryChange","mxTerminalChange","mxValueChange","mxChildChange","mxStyleChange","state","getView","getState","cell","setOpacity","shape","scale","geometry","sx","sy","cellRenderer","redraw","cascadeOpacity","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","isEnabled","errorResource","closeResource","errorImage","removeCursors","element","cursor","getCurrentStyle","currentStyle","parseCssNumber","setPrefixedStyle","prefix","hasScrollbars","overflow","scope","eval","expr","_mxJavaScriptExpression","message","findNode","NODETYPE_ELEMENT","ltrim","idx2","array","nodeName","attributeName","attributeValue","isAncestorNode","getChildNodes","importNode","allChildren","attributes","createXmlDocument","implementation","createDocument","ActiveXObject","parseXml","DOMParser","xml","parser","parseFromString","validateOnParse","resolveExternals","loadXML","clearSelection","selection","getSelection","removeAllRanges","getPrettyXml","tab","indent","NODETYPE_TEXT","getTextContent","htmlEntities","removeWhitespace","previousSibling","newline","isVml","tagUrn","getXml","linefeed","XMLSerializer","xmlSerializer","serializeToString","extractTextWithWhitespace","elems","blocks","doExtract","elts","elem","nodeValue","replaceTrailingNewlines","postfix","innerText","serializer","getOuterHtml","outerHTML","br","count","label","para","addTransparentBackgroundFilter","linkAction","editor","action","pad","execute","linkInvoke","functName","color","textDecoration","paddingLeft","getDocumentSize","fit","ds","offsetLeft","offsetWidth","offset","getDocumentScrollOrigin","sl","st","right","offsetTop","bottom","url","mxXmlRequest","send","onload","onerror","binary","ontimeout","setBinary","getAll","urls","remain","errors","status","getStatus","post","submit","simulate","loadInto","onreadystatechange","readyState","getNumber","getColor","transients","equalPoints","equalEntries","removeDuplicates","dict","superCtor","output","toRadians","deg","PI","toDegree","rad","arcToCurves","x0","y0","angle","largeArcFlag","sweepFlag","fS","psai","abs","sds","cty","cpsi","cos","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sqrt","seif","txd","tyd","tx","ty","atan2","s1","dr","sse","seg","segr","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x2","y2","x3","y3","getBoundingBox","rotation","cx","p1","p2","p3","p4","getRotatedPoint","pt","x1","y1","getPortConstraints","terminal","edge","STYLE_PORT_CONSTRAINT","STYLE_SOURCE_PORT_CONSTRAINT","STYLE_TARGET_PORT_CONSTRAINT","directions","returnValue","DIRECTION_MASK_NONE","constraintRotationEnabled","STYLE_PORT_CONSTRAINT_ROTATION","STYLE_ROTATION","quad","DIRECTION_NORTH","DIRECTION_MASK_NORTH","DIRECTION_MASK_EAST","DIRECTION_MASK_SOUTH","DIRECTION_MASK_WEST","DIRECTION_WEST","DIRECTION_SOUTH","DIRECTION_EAST","reversePortConstraints","constraint","findNearestSegment","absolutePoints","dist","ptSegDistSq","getDirectedBounds","m","flipH","flipV","STYLE_DIRECTION","STYLE_FLIPH","STYLE_FLIPV","round","m2","getPerimeterPoint","pts","center","point","intersection","ip","distSq","rectangleIntersectsSegment","bounds","contains","intersects","tw","th","rw","rh","rx","ry","intersectsHotspot","hotspot","cy","STYLE_STARTSIZE","view","STYLE_HORIZONTAL","alpha","getOffset","container","scrollOffset","fixed","position","scrollLeft","wnd","defaultView","parentWindow","pageXOffset","pageYOffset","getScrollOrigin","includeAncestors","includeDocument","origin","convertPoint","chars","rtrim","isNumeric","isInteger","mod","denom","nume_a","nume_b","ua","ub","px","py","projlenSq","dotprod","lenSq","ptLineDist","relativeCcw","ccw","createImage","imageNode","borderStyle","sortCells","cells","ascending","lookup","o1","o2","mxCellPath","PATH_SEPARATOR","compare","getStylename","pairs","stylename","getStylenames","indexOfStylename","tokens","addStylename","removeStylename","removeAllStylenames","setCellStyles","beginUpdate","setStyle","endUpdate","isValue","sep","setCellStyleFlags","flag","setStyleFlag","cont","getAlignmentAsPoint","align","valign","ALIGN_CENTER","ALIGN_RIGHT","ALIGN_MIDDLE","ALIGN_BOTTOM","getSizeForString","fontSize","fontFamily","textWidth","DEFAULT_FONTSIZE","DEFAULT_FONTFAMILY","div","lineHeight","LINE_HEIGHT","zoom","whiteSpace","size","getViewXml","getModel","getRoot","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","DIALECT_SVG","NS_SVG","canvas","translate","getTranslate","temp","mxTemporaryCellStates","enc","mxCodec","encode","getScaleForPageCount","pageCount","pageFormat","border","PAGE_FORMAT_A4_PORTRAIT","availablePageWidth","availablePageHeight","graphBounds","getGraphBounds","sc","getScale","graphWidth","graphHeight","pageFormatAspectRatio","graphAspectRatio","pagesAspectRatio","pageRoot","pagesAspectRatioSqrt","numRowPages","numColumnPages","scaleChange","currentTotalPages","numLoops","roundRowDownProportion","roundColumnDownProportion","posterWidth","links","outer","ownerSVGElement","minWidth","minHeight","printScreen","print","focus","isInternalWindow","prompt","confirm","icon","padding","img","makeDraggable","graphF","dragElement","autoscroll","scalePreview","highlightDropTargets","getDropTarget","dragSource","mxDragSource","dragOffset","TOOLTIP_VERTICAL_OFFSET","setGuidesEnabled","getGraphForEvent","createDragElement","createPreviewElement","DEFAULT_HOTSPOT","MIN_HOTSPOT_SIZE","MAX_HOTSPOT_SIZE","RENDERING_HINT_EXACT","RENDERING_HINT_FASTER","RENDERING_HINT_FASTEST","DIALECT_VML","DIALECT_MIXEDHTML","DIALECT_PREFERHTML","DIALECT_STRICTHTML","NS_XHTML","NS_XLINK","SHADOWCOLOR","VML_SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","NODETYPE_ATTRIBUTE","NODETYPE_CDATA","NODETYPE_ENTITY_REFERENCE","NODETYPE_ENTITY","NODETYPE_PROCESSING_INSTRUCTION","NODETYPE_COMMENT","NODETYPE_DOCUMENT","NODETYPE_DOCUMENTTYPE","NODETYPE_DOCUMENT_FRAGMENT","NODETYPE_NOTATION","DEFAULT_VALID_COLOR","DEFAULT_INVALID_COLOR","OUTLINE_HIGHLIGHT_COLOR","OUTLINE_HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_SIZE","HIGHLIGHT_OPACITY","CURSOR_MOVABLE_VERTEX","CURSOR_MOVABLE_EDGE","CURSOR_LABEL_HANDLE","CURSOR_TERMINAL_HANDLE","CURSOR_BEND_HANDLE","CURSOR_VIRTUAL_BEND_HANDLE","CURSOR_CONNECT","HIGHLIGHT_COLOR","CONNECT_TARGET_COLOR","INVALID_CONNECT_TARGET_COLOR","DROP_TARGET_COLOR","VALID_COLOR","INVALID_COLOR","EDGE_SELECTION_COLOR","VERTEX_SELECTION_COLOR","VERTEX_SELECTION_STROKEWIDTH","EDGE_SELECTION_STROKEWIDTH","VERTEX_SELECTION_DASHED","EDGE_SELECTION_DASHED","GUIDE_COLOR","GUIDE_STROKEWIDTH","OUTLINE_COLOR","OUTLINE_STROKEWIDTH","HANDLE_SIZE","LABEL_HANDLE_SIZE","HANDLE_FILLCOLOR","HANDLE_STROKECOLOR","LABEL_HANDLE_FILLCOLOR","CONNECT_HANDLE_FILLCOLOR","LOCKED_HANDLE_FILLCOLOR","OUTLINE_HANDLE_FILLCOLOR","OUTLINE_HANDLE_STROKECOLOR","DEFAULT_TEXT_DIRECTION","WORD_WRAP","ABSOLUTE_LINE_HEIGHT","DEFAULT_FONTSTYLE","DEFAULT_STARTSIZE","DEFAULT_MARKERSIZE","DEFAULT_IMAGESIZE","ENTITY_SEGMENT","RECTANGLE_ROUNDING_FACTOR","LINE_ARCSIZE","ARROW_SPACING","ARROW_WIDTH","ARROW_SIZE","PAGE_FORMAT_A4_LANDSCAPE","PAGE_FORMAT_LETTER_PORTRAIT","PAGE_FORMAT_LETTER_LANDSCAPE","STYLE_PERIMETER","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","STYLE_OPACITY","STYLE_FILL_OPACITY","STYLE_STROKE_OPACITY","STYLE_TEXT_OPACITY","STYLE_TEXT_DIRECTION","STYLE_OVERFLOW","STYLE_ORTHOGONAL","STYLE_EXIT_X","STYLE_EXIT_Y","STYLE_EXIT_DX","STYLE_EXIT_DY","STYLE_EXIT_PERIMETER","STYLE_ENTRY_X","STYLE_ENTRY_Y","STYLE_ENTRY_DX","STYLE_ENTRY_DY","STYLE_ENTRY_PERIMETER","STYLE_WHITE_SPACE","STYLE_FILLCOLOR","STYLE_POINTER_EVENTS","STYLE_SWIMLANE_FILLCOLOR","STYLE_MARGIN","STYLE_GRADIENTCOLOR","STYLE_GRADIENT_DIRECTION","STYLE_STROKECOLOR","STYLE_SEPARATORCOLOR","STYLE_STROKEWIDTH","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","STYLE_LABEL_WIDTH","STYLE_LABEL_POSITION","STYLE_VERTICAL_LABEL_POSITION","STYLE_IMAGE_ASPECT","STYLE_IMAGE_ALIGN","STYLE_IMAGE_VERTICAL_ALIGN","STYLE_GLASS","STYLE_IMAGE","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_IMAGE_BACKGROUND","STYLE_IMAGE_BORDER","STYLE_NOLABEL","STYLE_NOEDGESTYLE","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","STYLE_LABEL_PADDING","STYLE_INDICATOR_SHAPE","STYLE_INDICATOR_IMAGE","STYLE_INDICATOR_COLOR","STYLE_INDICATOR_STROKECOLOR","STYLE_INDICATOR_GRADIENTCOLOR","STYLE_INDICATOR_SPACING","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","STYLE_INDICATOR_DIRECTION","STYLE_SHADOW","STYLE_SEGMENT","STYLE_ENDARROW","STYLE_STARTARROW","STYLE_ENDSIZE","STYLE_SWIMLANE_LINE","STYLE_ENDFILL","STYLE_STARTFILL","STYLE_DASHED","STYLE_DASH_PATTERN","STYLE_FIX_DASH","STYLE_ROUNDED","STYLE_CURVED","STYLE_ARCSIZE","STYLE_ABSOLUTE_ARCSIZE","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","STYLE_PERIMETER_SPACING","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_LEFT","STYLE_SPACING_BOTTOM","STYLE_SPACING_RIGHT","STYLE_ANCHOR_POINT_DIRECTION","STYLE_ELBOW","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSIZE","STYLE_FONTSTYLE","STYLE_ASPECT","STYLE_AUTOSIZE","STYLE_FOLDABLE","STYLE_EDITABLE","STYLE_BACKGROUND_OUTLINE","STYLE_BENDABLE","STYLE_MOVABLE","STYLE_RESIZABLE","STYLE_RESIZE_WIDTH","STYLE_RESIZE_HEIGHT","STYLE_ROTATABLE","STYLE_CLONEABLE","STYLE_DELETABLE","STYLE_SHAPE","STYLE_EDGE","STYLE_JETTY_SIZE","STYLE_SOURCE_JETTY_SIZE","STYLE_TARGET_JETTY_SIZE","STYLE_LOOP","STYLE_ORTHOGONAL_LOOP","STYLE_ROUTING_CENTER_X","STYLE_ROUTING_CENTER_Y","FONT_BOLD","FONT_ITALIC","FONT_UNDERLINE","SHAPE_RECTANGLE","SHAPE_ELLIPSE","SHAPE_DOUBLE_ELLIPSE","SHAPE_RHOMBUS","SHAPE_LINE","SHAPE_IMAGE","SHAPE_ARROW","SHAPE_ARROW_CONNECTOR","SHAPE_LABEL","SHAPE_CYLINDER","SHAPE_SWIMLANE","SHAPE_CONNECTOR","SHAPE_ACTOR","SHAPE_CLOUD","SHAPE_TRIANGLE","SHAPE_HEXAGON","ARROW_CLASSIC","ARROW_CLASSIC_THIN","ARROW_BLOCK","ARROW_BLOCK_THIN","ARROW_OPEN","ARROW_OPEN_THIN","ARROW_OVAL","ARROW_DIAMOND","ARROW_DIAMOND_THIN","ALIGN_LEFT","ALIGN_TOP","TEXT_DIRECTION_DEFAULT","TEXT_DIRECTION_AUTO","TEXT_DIRECTION_LTR","TEXT_DIRECTION_RTL","DIRECTION_MASK_ALL","ELBOW_VERTICAL","ELBOW_HORIZONTAL","EDGESTYLE_ELBOW","EDGESTYLE_ENTITY_RELATION","EDGESTYLE_LOOP","EDGESTYLE_SIDETOSIDE","EDGESTYLE_TOPTOBOTTOM","EDGESTYLE_ORTHOGONAL","EDGESTYLE_SEGMENT","PERIMETER_ELLIPSE","PERIMETER_RECTANGLE","PERIMETER_RHOMBUS","PERIMETER_HEXAGON","PERIMETER_TRIANGLE","mxEventObject","properties","mxMouseEvent","sourceState","mxEventSource","eventSource","setEventSource","consumed","getName","getProperties","getProperty","isConsumed","consume","graphX","graphY","getEvent","getSource","isSource","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getCell","isPopupTrigger","preventDefault","isMouseEvent","eventListeners","getEventSource","removeListener","fireEvent","listen","updateListenerList","eventName","mxListenerList","entry","attachEvent","updateListener","listenerCount","detachEvent","removeAllListeners","addGestureListeners","startListener","moveListener","endListener","removeGestureListeners","redirectMouseEvents","down","move","up","dblClick","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","release","addMouseWheelListener","wheelHandler","delta","detail","wheelDelta","disableContextMenu","srcElement","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","touches","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","buttons","which","isMiddleMouseButton","isRightMouseButton","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","ctrlKey","metaKey","getMainEvent","changedTouches","clientX","clientY","stopPropagation","cancelBubble","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET","username","password","withCredentials","request","decodeSimulateValues","isBinary","responseText","getDocumentElement","responseXML","XMLHttpRequest","overrideMimeType","onreadystatechaange","setRequestHeaders","setRequestHeader","onbeforeunload","form","pars","decodeURIComponent","mxClipboard","STEPSIZE","insertCount","setCells","getCells","isEmpty","cut","removeCells","getSelectionCells","getExportableCells","getTopmostCells","cloneCells","paste","getImportableCells","getDefaultParent","importCells","setSelectionCells","minimizable","movable","replaceNode","installMaximizeHandler","installMinimizeHandler","installCloseHandler","setMinimizable","setTitle","installMoveHandler","replaceChild","mxForm","className","mxImage","mxDivResizer","resizeWidth","resizeHeight","handlingResize","dropHandler","mouseDown","eventConsumer","evtName","me","mxToolbar","mxUndoableEdit","significant","mxUndoManager","closeImage","minimizeImage","normalizeImage","maximizeImage","resizeImage","minimumSize","contentHeightCorrection","touchAction","contentWrapper","activator","scrollable","activeWindow","zIndex","previousWindow","isResizable","resizable","startX","startY","dragHandler","setSize","minimize","getMinimumSize","marginLeft","minimized","maxDisplay","maximize","minSize","maximizable","maximized","minDisplay","docHeight","setLocation","closeImg","setImage","image","marginRight","marginTop","closable","getTable","addButtons","okFunct","cancelFunct","addText","input","addField","addCheckbox","checked","addTextarea","rows","addCombo","isMultiSelect","select","addOption","combo","isSelected","getDocumentWidth","getDocumentHeight","previewElement","enabled","currentGraph","currentDropTarget","currentPoint","currentGuide","currentHighlight","guidesEnabled","gridEnabled","dragElementZIndex","dragElementOpacity","checkEventSource","setEnabled","isGuidesEnabled","isGridEnabled","setGridEnabled","getCellAt","isActive","mouseMoveHandler","reset","dragExit","removeDragElement","removeListeners","stopDrag","startDrag","mouseMove","mouseUpHandler","mouseUp","pointerEvents","getElementForEvent","elementFromPoint","graphContainsEvent","dragEnter","dragOver","drop","isMouseDown","isMouseTrigger","mxGuide","graphHandler","getGuideStates","mxCellHighlight","panDx","panDy","autoScroll","scrollPointToVisible","autoExtend","isDropEnabled","highlight","isGridEnabledEvent","hideGuide","isEnabledForEvent","off","gridSize","snap","previewOffset","dropTarget","noReset","updateDefaultMode","addItem","pressedIcon","factoryMethod","initialClassName","mouseHandler","backgroundColor","menu","mxPopupMenu","currentImg","isMenuShowing","hideMenu","addActionCombo","addSwitchMode","altIcon","selectedMode","defaultMode","selectMode","addMode","toggle","defaultFunction","domNode","resetMode","forced","addSeparator","addBreak","addLine","hr","undone","redone","isSignificant","die","undo","redo","history","indexOfNextAdd","canUndo","edit","canRedo","undoableEditHappened","undoableEdit","edits","mxUrlConverter","mxPanningManager","thread","tdx","tdy","t0x","t0y","scrollbars","mouseListener","stop","addMouseListener","mouseUpListener","createThread","setInterval","panGraph","getDx","getDy","panTo","handleMouseOut","damper","clearInterval","setTranslate","removeMouseListener","mxAutoSaveManager","changeHandler","graphModelChanged","setGraph","mxAnimation","mxMorphing","steps","ease","mxImageBundle","alt","images","mxImageExport","mxAbstractCanvas2D","converter","createUrlConverter","mxXmlCanvas2D","writeDefaults","mxSvgCanvas2D","styleEnabled","gradients","defs","createStyle","baseUrl","baseDomain","updateBaseUrl","protocol","host","pathname","lastIndexOf","getBaseUrl","setBaseUrl","getBaseDomain","setBaseDomain","isRelativeUrl","convert","submenuImage","useLeftButtonForPopup","itemCount","autoExpand","smartSeparators","labels","iconCls","willAddSeparator","containsItems","col1","col2","col3","paddingRight","textAlign","createSubmenu","currentSelection","eventReceiver","activeRow","hideSubmenu","showSubmenu","createRange","addCheckmark","backgroundImage","backgroundRepeat","backgroundPosition","row","showMenu","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","save","isRunning","startAnimation","updateAnimation","stopAnimation","mxCellStatePreview","animateCell","recurse","getDelta","isVertex","moveState","stopRecursion","getOriginForCell","getParent","geo","getCellGeometry","relative","pgeo","putImage","getImage","includeOverlays","drawState","visitStatesRecursive","drawCellState","drawOverlays","getLinkForCellState","setLink","drawShape","drawText","mxShape","checkBounds","paint","restore","overlays","states","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","createState","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","fontStyle","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotationCx","rotationCy","format","addOp","rotatePoint","theta","rotate","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","curveTo","arcTo","curves","textEnabled","compressed","toFixed","roundrect","ellipse","aspect","wrap","clip","stroke","fill","fillAndStroke","useDomParser","matchHtmlAlignment","foEnabled","foAltText","foOffset","textOffset","imageOffset","strokeTolerance","minStrokeWidth","refCount","blockImagePointerEvents","lineHeightCorrection","pointerEventsValue","fontMetricsPadding","cacheOffsetSize","createAlternateContent","fo","createGradientId","getSvgGradient","gradient","tmpId","getElementById","createSvgGradient","op","addNode","filled","stroked","updateFill","updateStroke","createShadow","createTolerance","originalRoot","IS_CHROME_APP","getCurrentStrokeWidth","sw","updateStrokeAttributes","createDashPattern","pat","tol","convertHtml","xd","xb","adoptNode","ta","createDiv","lh","invalidateCachedOffsetSize","mxCachedOffsetWidth","mxCachedFinalOffsetWidth","mxCachedFinalOffsetHeight","updateText","group","maxHeight","maxWidth","ow","oh","padX","sizeDiv","padY","wordWrap","ws","div2","padDx","plainText","createClip","updateFont","anchor","textHeight","addTextBackground","bbox","getBBox","ie","fontWeight","mxVmlCanvas2D","setStates","stencil","initStyles","mxStencil","desc","parseDescription","parseConstraints","rotatedHtmlBackground","vmlScale","createVmlElement","coordsize","strokeweight","strokecolor","createStroke","createFill","createTransparentFill","flip","endcap","joinstyle","miterlimit","dashstyle","getVmlDashStyle","tok","createShadowStroke","createShadowFill","cpx0","cpy0","qpx1","qpy1","cpx3","cpy3","cpx1","cpy1","cpx2","cpy2","createRect","box","margin","inner","rot","real_cos","real_sin","top_fix","left_fix","divParent","textpathok","tp","horizontal","vertical","guideX","guideY","rounded","getGuideTolerance","createGuideShape","guide","mxPolyline","isDashed","trx","overrideX","stateX","valueX","overrideY","stateY","valueY","tt","ttX","ttY","middle","snapX","override","getOverlayPane","snapY","points","getGuideColor","scrollWidth","antiAlias","minSvgStrokeWidth","boundingBox","svgStrokeTolerance","svgPointerEvents","shapePointerEvents","stencilPointerEvents","outline","useSvgBoundingBox","strokewidth","fillOpacity","strokeOpacity","isParseVml","isHtmlAllowed","getSvgScreenOffset","createSvg","createHtml","createVml","reconfigure","updateBoundsFromPoints","redrawShape","redrawHtmlShape","updateBoundingBox","lastChild","getLabelBounds","isPaintBoundsInverted","getLabelMargins","createVmlGroup","createCanvas","insertAdjacentHTML","destroyCanvas","createSvgCanvas","updateVmlContainer","createVmlCanvas","updateHtmlBounds","updateHtmlFilters","updateHtmlColors","isShadow","east","south","west","north","borderColor","borderWidth","setTransparentBackgroundImage","mxRefCount","releaseSvgGradients","oldGradients","strokeDrawn","updateTransform","configureCanvas","bg","bb","createBoundingBox","createTransparentSvgRectangle","paintEdgeShape","paintVertexShape","getGradientBounds","getShapeRotation","paintBackground","paintForeground","getArcSize","paintGlassEffect","arc","isRounded","addPoints","arcSize","initialMove","pe","p0","wp","nx1","ny1","nx2","ny2","resetStyles","spacing","startSize","endSize","startArrow","endArrow","glass","setCursor","getCursor","isRoundable","augmentBoundingBox","getRotation","getTextRotation","mxText","verticalTextRotation","grads","defaultLocalized","allowEval","constraints","w0","h0","bgNode","fgNode","conns","parseConstraint","perimeter","mxConnectionConstraint","evaluateTextAttribute","attribute","evaluateAttribute","loc","computeAspect","minScale","drawChildren","disableShadow","drawNode","inverse","parseRegularly","pointCount","segs","childName","ps","arcsize","factor","mxStencilRegistry","getStencil","stencils","addStencil","mxMarker","markers","addMarker","createMarker","unitX","unitY","mxActor","mxCloud","mxRectangleShape","mxEllipse","mxDoubleEllipse","mxRhombus","mxArrow","arrowWidth","mxArrowConnector","arrowSpacing","family","spacingTop","spacingRight","spacingBottom","spacingLeft","background","clipped","labelPadding","textDirection","updateMargin","mxTriangle","mxHexagon","mxLine","mxImageShape","mxLabel","mxCylinder","mxConnector","mxSwimlane","mxGraphLayout","WeightedCellSorter","weightedValue","mxStackLayout","mxPartitionLayout","mxCompactTreeLayout","invert","mxRadialTreeLayout","mxFastOrganicLayout","mxCircleLayout","radius","mxParallelEdgeLayout","mxCompositeLayout","layouts","master","mxEdgeLabelLayout","mxGraphAbstractHierarchyCell","mxGraphHierarchyNode","connectsAsTarget","connectsAsSource","mxGraphHierarchyEdge","ids","mxGraphHierarchyModel","layout","vertices","roots","tightenToSource","getGraph","vertexMapper","edgeMapper","maxRank","internalVertices","getChildVertices","SOURCESCANSTARTRANK","createInternalCells","internalEdge","realEdges","realEdge","targetCell","getVisibleTerminal","internalTargetCell","mxSwimlaneModel","mxHierarchicalLayoutStage","mxMedianHybridCrossingReduction","MedianCellSorter","mxMinimumCycleRemover","mxCoordinateAssignment","intraCellSpacing","interRankCellSpacing","orientation","initialX","parallelEdgeSpacing","mxSwimlaneOrdering","mxHierarchicalLayout","deterministic","createArrow","widthFactor","endOffsetX","endOffsetY","createOpenArrow","diamond","swFactor","tk","redrawPath","hw","hh","prev","paintLine","paintCurvedLine","ix","iy","arrow","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","getEdgeWidth","isMarkerStart","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isArrowRounded","i0","orthx","orthy","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","dx1","dy1","dist1","tmp1","dist2","strokeWidthFactor","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","inStartX","inStartY","ptX","ptY","widthArrowRatio","spaceX","spaceY","baseSpacingTop","baseSpacingBottom","baseSpacingLeft","baseSpacingRight","replaceLinefeeds","ignoreClippedStringSize","ignoreStringSize","textWidthPadding","lastValue","cacheEnabled","unscaledWidth","lastUnscaledWidth","realHtml","fmt","getAutoDirection","updateSize","textDiv","updateHtmlFilter","updateHtmlTransform","updateInnerHtml","divs","unrotatedBoundingBox","updateValue","bd","enableWrap","getSpacing","mid","preserveImageAspect","useVml","imageSize","indicatorSize","indicatorSpacing","indicatorShape","indicator","indicatorColor","indicatorStrokeColor","indicatorGradientColor","indicatorDirection","paintImage","paintIndicator","getImageBounds","getIndicatorBounds","indicatorImage","getCylinderSize","isForeground","sourceMarker","targetMarker","getTitleSize","isHorizontal","shapeVertical","realHorizontal","realFlipH","realFlipV","swimlaneLine","paintRoundedSwimlane","paintSwimlane","paintSeparator","paintDivider","useBoundingBox","moveCell","getConstraint","getCellStyle","vertex","directed","func","visited","edgeCount","getEdgeCount","getEdgeAt","getTerminal","isAncestor","traverseAncestors","isVertexMovable","isCellMovable","isVertexIgnored","isCellVisible","isEdgeIgnored","setEdgeStyleEnabled","setOrthogonalEdge","getParentOffset","parentGeo","getGeometry","setEdgePoints","mxGeometry","setRelative","parentOffset","setGeometry","setVertexLocation","getVertexBounds","dx0","dy0","arrangeGroups","topBorder","rightBorder","bottomBorder","leftBorder","updateGroupBounds","nudge","rankIndex","marginBottom","keepFirstLocation","resizeParent","resizeParentMax","resizeLast","borderCollapse","allowGaps","pstate","getIndex","getParentSize","isLayer","currentRoot","getLayoutCells","c1","c2","geo1","geo2","fillValue","isSwimlane","horz","childStyle","setChildGeometry","isCellCollapsed","updateParentGeometry","pgeo2","resizeVertices","other","getStartSize","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","getConnections","findTreeRoots","parentX","parentY","dfs","findRankHeights","setCellHeights","g","horizontalLayout","verticalLayout","moveNode","adjustParents","localEdgeProcessing","sortOutgoingEdges","e1","e2","end1","end2","rank","createNode","attachParent","layoutLeaf","offsetX","offsetY","siblingOffset","contour","upperHead","createLine","lowerHead","upperTail","lowerTail","sum","merge","total","upper","lower","bridge","a1","a2","line1","line2","line","processNodeOutgoing","parentCell","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","childCell","childBounds","getEdgesBetween","newPoints","angleOffset","rootx","rooty","autoRadius","rowMinX","rowMaxX","rowMinCenX","rowMaxCenX","rowRadi","rootBounds","centerX","centerY","vertexBounds","calcRowDims","maxLeftGrad","maxRightGrad","leftGrad","rightGrad","xLeftLimit","xRightLimit","fullWidth","xProportion","totalTheta","averTheta","nextTheta","lastTheta","rowNum","rowHasChildren","useInputOrigin","disableEdgeStyle","forceConstant","forceConstantSquared","minDistanceLimit","maxDistanceLimit","minDistanceLimitSquared","initialTemp","temperature","maxIterations","iteration","vertexArray","dispX","dispY","cellLocation","radiusSquared","isMoveable","neighbours","indices","allowedToRun","initialBounds","getBoundingBoxFromGeometry","getOpposites","resetEdge","calcRepulsion","calcAttraction","calcPositions","reduceTemperature","minx","miny","moveCells","deltaLength","newXDisp","newYDisp","xDelta","yDelta","deltaLengthSquared","displacementX","displacementY","vertexCount","random","deltaLengthWithRadius","moveCircle","getRadius","circle","phi","findParallels","parallels","getEdgeId","trg","route","scx","scy","tcx","tcy","placeLabels","avoid","labRect","dy2","dx2","minRank","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","getGeneralPurposeVariable","setGeneralPurposeVariable","setX","setY","hashCode","getRankValue","otherNode","getCoreCell","isReversed","ranks","dfsCount","undirectedEdges","directedEdges","initialRank","startNodes","internalNode","internalNodes","startNodesCopy","edgesToBeMarked","layerDeterminingEdges","allEdgesScanned","minimumLayer","removedCell","currentMaxLayer","fixRanks","rankList","rootsArray","oldRootsArray","parentToCellRankDifference","dfsRoots","trackAncestors","seenNodes","extendedDfs","connectingEdge","rootId","outgoingEdges","targetNode","ancestors","childHash","hashCodeLength","ranksPerGroup","swimlanes","swimlaneIndex","ii","maxChainDfs","lowerRank","upperRank","chainCount","slIndex","incomingEdges","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","calculateCrossings","weightedMedian","transpose","candidateCrossings","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","rankPosition","connectedCells","nodeIndices","connectedNode","otherCellRankPosition","firstIndex","treeSize","treeIndex","mainLoopIteration","improved","maxCount","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","totalCurrentCrossings","totalSwitchedCrossings","ik","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","nextLevelConnectedCells","nextRankValue","sorterEntry","medianValue","arrayCount","medianPoint","leftMedian","rightMedian","unseenNodesArray","unseenNodes","modelRoots","seenNodesCopy","jettyPositions","limitX","currentXDelta","widestRank","rankTopY","rankBottomY","widestRankValue","rankWidths","rankY","fineTuning","nextLayerConnectedCache","previousLayerConnectedCache","printStatus","initialCoords","minNode","bestXDelta","medianPos","minPath","setCellLocations","nodeList","nodeWrapper","maxTries","tolerance","cellWrapper","numNextLayerConnected","numPreviousLayerConnected","medianNextLevel","medianXValue","medianPreviousLevel","numConnectedNeighbours","currentPosition","cellMedian","positionChanged","leftLimit","rankSize","rightLimit","connectedCell","connectedCellWrapper","rankMedianPosition","weightedValues","cellMap","currentCell","calculatedWeightedValue","numConnectionsNextLevel","leftBuffer","rightBuffer","collection","totalWeight","facade","calculateWidestRank","rankCoordinates","localX","boundsWarning","numEdges","lastRankMaxCellHeight","maxCellHeight","distanceToNextRank","referenceX","edgeStraight","refSegCount","upSegCount","downSegCount","upXPositions","downXPositions","currentX","nextX","repositionValid","rankArray","MAX_VALUE","edgeStyle","mxHierarchicalEdgeStyle","ORTHOGONAL","POLYLINE","CURVE","setEdgePosition","cellIndex","currentCells","currentRank","sorter","connectedEdgeCount","connectedEdges","connections","innerCell","connIndex","connectedEdgeGroupCount","numActualEdges","parallelEdgeCount","jettys","layoutReversed","realSource","reversed","arrayOffset","jetty","modelSource","isPort","loopStart","loopLimit","loopDelta","positionX","topChannelY","bottomChannelY","modelTarget","realTarget","processReversedEdge","realCell","positionY","reversedOverSwimlane","cellId","STRAIGHT","mxSwimlaneLayout","mxGraphModel","currentEdit","createUndoableEdit","setRoot","mxRootChange","previousIndex","mxCollapseChange","collapsed","mxVisibleChange","mxCellAttributeChange","mxCell","onInit","moveParent","parentBorder","interHierarchySpacing","edgesCache","edgeSourceTermCache","edgesTargetTermCache","rootsCopy","findRoots","best","maxDiff","fanOut","fanIn","diff","cachedEdges","isCollapsed","terminalCache","term","hierarchyVertices","allVertexSet","filledVertexSet","filterDescendants","filledVertexSetEmpty","candidateRoots","vertexSet","cycleStage","layeringStage","crossingStage","placementStage","allVertices","currentComp","vertexID","edgeIsSource","netCount","isSource2","otherTerm","dummyVertices","dummyVertexWidth","getChildCells","insertVertex","layoutBounds","lane","childrenY","maxChildrenY","newGeo","leftGroupBorder","isValidAncestor","laneCounter","otherVertex","otherIndex","maintainEdgeParent","ignoreRelativeEdgeParent","createIds","nextId","updateLevel","endingUpdate","createRoot","isCreateIds","setCreateIds","filterCells","getDescendants","rootChanged","oldRoot","cellAdded","parentChanged","updateEdgeParents","getId","setId","createId","collision","updateEdgeParent","getNearestCommonAncestor","origin1","getOrigin","origin2","cell1","cell2","getParentPath","cellRemoved","parentForCellChanged","oldIndex","par","getChildren","getChildEdges","setTerminal","terminalChanged","setTerminals","terminalForCellChanged","insertEdge","removeEdge","getDirectedEdgeCount","outgoing","ignoredEdge","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","tmp2","directedMatch","oppositeMatch","sources","targets","terminals","topmost","isConnectable","setValue","valueForCellChanged","valueChanged","geometryForCellChanged","styleForCellChanged","setCollapsed","collapsedStateForCellChanged","visibleStateForCellChanged","mergeChildren","cloneAllEdges","mapping","mergeChildrenImpl","getParents","parents","cloneCell","includeChildren","clones","cloneCellImpl","restoreClone","ident","cellCloned","cloneChild","connect","isConnect","connectable","mxTransient","newValue","setVertex","setEdge","setConnectable","setParent","removeFromParent","getEdgeIndex","isOutgoing","removeFromTerminal","userObject","cloneValue","TRANSLATE_CONTROL_POINTS","alternateBounds","sourcePoint","targetPoint","swap","getTerminalPoint","setTerminalPoint","ct","fixedAspect","t1","t2","mxPerimeter","RectanglePerimeter","orthogonal","pi","pi2","beta","tan","EllipsePerimeter","det","xout1","xout2","yout1","yout2","pow","xout","yout","RhombusPerimeter","TrianglePerimeter","corner","HexagonPerimeter","mxPrintPreview","pageSelector","pageScale","mxStylesheet","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","mxCellState","absoluteOffset","mxGraphSelectionModel","mxSelectionChange","selectionModel","added","mxCellEditor","zoomHandler","isEditing","editingCell","stopEditing","mxCellRenderer","autoOrigin","printOverlays","printControls","printBackgroundImage","targetWindow","clipping","getWindow","getDoctype","appendGraph","forcePageBreaks","keepOpen","previousInitializeOverlay","initializeOverlay","overlay","getDrawPane","initControl","control","handleEvents","clickHandler","isNewWindow","writeHead","currentScale","availableHeight","hpages","vpages","writePageSelector","createPageSelector","addPage","pageBreakAfter","addPageBreak","cov","getCoverPages","apx","getAppendices","pageNum","renderPage","addGraphFragment","insertBackgroundImage","closeDocument","writePostfix","js","pageNumber","pageBreakInside","innerDiv","viewport","previousContainer","getCanvas","backgroundPane","getBackgroundPane","graphEnabled","tempClip","rendering","orig","svgs","getLinkForCell","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","defaultStyle","tmpStyle","invalidStyle","invalid","visibleSourceState","visibleTargetState","terminalDistance","getPerimeterBounds","setAbsoluteTerminalPoint","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","setState","doneResource","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","changeSelection","setCell","getFirstSelectableCell","isCellSelectable","addCell","addCells","removeCell","autoSize","selectText","emptyLabelText","escapeCancelsEditing","minResize","wordWrapPadding","blurEnabled","initialValue","contentEditable","isLegacyEditor","installListeners","applyValue","labelChanged","setAlign","getInitialValue","getEditingValue","getCurrentValue","isCancelEditingKeyEvent","focusLost","isStopEditingEvent","keyCode","keypressHandler","clearOnChange","getEmptyLabelText","keyupHandler","resizeThread","isEnterStopsCellEditing","isEventSource","lw","bds","hpos","vpos","legacySpacing","isWrapping","getEditorBounds","isInvokesStopCellEditing","getBackgroundColor","absoluteRoot","startEditing","tooltipHandler","hideTooltip","bold","italic","uline","isHideLabel","isSelectText","execCommand","cancel","blur","prepareTextarea","getEditingCell","defaultShapes","defaultEdgeShape","defaultVertexShape","defaultTextShape","legacyControlPosition","forceControlClickHandler","registerShape","initializeShape","configureShape","createShape","getShapeConstructor","createIndicatorShape","getShape","getIndicatorShape","getIndicatorColor","getIndicatorGradientColor","getIndicatorImage","postConfigureShape","resolveColor","checkPlaceholderStyles","field","referenced","getSwimlane","swimlaneIndicatorColorAttribute","rstate","getLabelValue","getLabel","createLabel","isForceHtml","isHtmlLabel","getVerticalAlign","isLabelClipped","initializeLabel","forceGetCell","isLabelEvent","nativeDblClickEnabled","createCellOverlays","getCellOverlays","installCellOverlayListeners","createControl","getFoldingImage","foldingEnabled","createControlClickHandler","collapse","foldCells","first","isShapeEvent","redrawLabel","wrapping","isTextShapeInvalid","nextScale","getTextScale","isClipping","vis","redrawLabelShape","check","dh","rotateLabelBounds","redrawCellOverlays","getBounds","redrawControl","getControlBounds","insertStateAfter","htmlNode","shapes","getShapesForState","shapeChanged","selectionCellsHandler","updateHandler","isShapeInvalid","doRedrawShape","mxEdgeStyle","EntityRelation","segment","isSourceLeft","sourceGeometry","isTargetLeft","targetGeometry","getRoutingCenterY","xe","ye","midY","Loop","transformControlPoint","getRoutingCenterX","ElbowConnector","SideToSide","TopToBottom","SegmentConnector","hints","lastPushed","hint","pushPoint","lastInx","newHints","currentTerm","currentPt","hozChan","vertChan","currentHint","fixedVertAlign","fixedHozAlign","inHozChan","inVertChan","orthBuffer","orthPointsFallback","dirVectors","wayPoints1","routePatterns","inlineRoutePatterns","vertexSeperations","limits","LEFT_MASK","TOP_MASK","RIGHT_MASK","BOTTOM_MASK","LEFT","TOP","RIGHT","BOTTOM","SIDE_MASK","CENTER_MASK","SOURCE_MASK","TARGET_MASK","VERTEX_MASK","getJettySize","OrthConnector","sourceEdge","targetEdge","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetWidth","targetHeight","scaledSourceBuffer","scaledTargetBuffer","totalBuffer","tooShort","portConstraint","newRect","sourceCenX","sourceCenY","targetCenX","targetCenY","sourceTopDist","sourceLeftDist","sourceBottomDist","sourceRightDist","dirPref","horPref","vertPref","preferredHorizDist","preferredVertDist","prefOrdering","preferredOrderSet","sourceIndex","targetIndex","routePattern","currentIndex","lastOrientation","initialOrientation","currentOrientation","nextDirection","directionIndex","sou","side","limit","souTar","deltaX","deltaY","targetOrientation","sameOrient","getRoutePattern","mxStyleRegistry","putValue","mxGraphView","mxCurrentRootChange","isUp","mxGraph","renderHint","stylesheet","mouseListeners","multiplicities","imageBundles","createCellRenderer","setSelectionModel","createSelectionModel","setStylesheet","createStylesheet","createGraphView","graphModelChangeListener","createHandlers","revalidate","mxCellOverlay","tooltip","mxOutline","mxMultiplicity","validNeighbors","countError","typeError","validNeighborsAllowed","mxLayoutManager","undoHandler","beforeUndo","moveHandler","cellsMoved","mxSwimlaneManager","addEnabled","resizeEnabled","addHandler","isAddEnabled","cellsAdded","isResizeEnabled","cellsResized","isCellVisibleFn","oldValidateCellState","validateCellState","oldBounds","oldStates","getStates","oldScale","oldDoRedrawShape","oldPaint","resurse","setScale","resetValidationState","validateCell","setGraphBounds","deltas","mxGraphHandler","panHandler","updatePreviewShape","updateHint","escapeHandler","refreshHandler","pBounds","getPreviewBounds","mxPanningHandler","forcePanningHandler","isForcePanningEvent","gestureHandler","eo","isPinchEnabled","initialScale","mouseDownEvent","maxScale","zoomTo","mxPopupMenuHandler","inTolerance","mxCellMarker","validColor","invalidColor","mxSelectionCellsHandler","refresh","getSelectionModel","mxConnectionHandler","mxConstraintHandler","resetHandler","currentFocus","mxRubberband","forceRubberbandHandler","isForceRubberbandEvent","repaint","mxHandle","mxVertexHandler","livePreview","invalidate","validate","mxEdgeHandler","isRendering","mxElbowEdgeHandler","mxEdgeSegmentHandler","mxKeyHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","keyDown","mxTooltipHandler","mxCellTracker","highlightColor","repaintHandler","mxDefaultKeyHandler","escape","hideProperties","mxDefaultPopupMenu","mxDefaultToolbar","mxEditor","actions","addActions","cycleAttributeValues","popupHandler","undoManager","createGraph","toolbar","createToolbar","keyHandler","configure","cycleAttributeName","EMPTY_POINT","updatingDocumentResource","captureDocumentGesture","optimizeVmlReflows","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","setCurrentRoot","sizeDidChange","scaleAndTranslate","previousScale","previousTranslate","viewStateChanged","removeState","includeEdges","invalidating","prevDisplay","getEmptyBounds","validateBackground","createBackgroundPageShape","validateBackgroundImage","validateBackgroundPage","getBackgroundImage","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isHideOnHover","updateCellState","stateValidated","pState","getChildOffsetForCell","updateVertexState","updateEdgeState","updateVertexLabelOffset","updateFixedTerminalPoints","updatePoints","updateFloatingTerminalPoints","updateEdgeBounds","updateEdgeLabelOffset","fg","keepEdgesInForeground","keepEdgesInBackground","updateFixedTerminalPoint","getConnectionConstraint","getFixedTerminalPoint","getConnectionPoint","updateBoundsFromStencil","asp","getEdgeStyle","getTerminalPort","srcBounds","trgBounds","isLoopStyleEnabled","tc","defaultLoopStyle","isAllowEval","updateFloatingTerminalPoint","getFloatingTerminalPoint","getNextPoint","orth","isOrthogonal","getPerimeterFunction","opposite","markerSize","gx","gy","getRelativePoint","totalLength","minDist","xSegment","ySegment","projlen","yDistance","setRendering","setAllowEval","getCellStates","getDecoratorPane","decoratorPane","isContainerEvent","isScrollEvent","outWidth","inWidth","outHeight","inHeight","fireGestureEvent","popupMenuHandler","endHandler","createHtmlPane","updateContainerStyle","onResize","updateHtmlCanvasSize","pane","createVmlPane","getTranslateForRoot","cellEditor","portsEnabled","doubleTapEnabled","doubleTapTimeout","doubleTapTolerance","lastTouchY","lastTouchTime","tapAndHoldEnabled","tapAndHoldDelay","tapAndHoldInProgress","tapAndHoldValid","initialTouchX","initialTouchY","defaultOverlap","defaultParent","alternateEdgeStyle","pageBreaksVisible","pageBreakColor","pageBreakDashed","minPageBreakDist","preferPageSize","escapeEnabled","invokesStopCellEditing","enterStopsCellEditing","useScrollbarsForPanning","exportEnabled","importEnabled","cellsLocked","cellsCloneable","cellsEditable","cellsDeletable","cellsMovable","edgeLabelsMovable","vertexLabelsMovable","dropEnabled","splitEnabled","cellsResizable","cellsBendable","cellsSelectable","cellsDisconnectable","autoSizeCells","autoSizeCellsOnAdd","ignoreScrollbars","translateToScrollPosition","timerAutoScroll","allowAutoPanning","maximumGraphBounds","minimumGraphSize","minimumContainerSize","maximumContainerSize","resizeContainer","allowNegativeCoordinates","constrainChildren","constrainRelativeChildren","extendParents","extendParentsOnAdd","extendParentsOnMove","recursiveResize","collapseToPreferredSize","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","resetViewOnRootChange","resetEdgesOnResize","resetEdgesOnMove","resetEdgesOnConnect","allowLoops","multigraph","connectableEdges","allowDanglingEdges","cloneInvalidEdges","disconnectOnMove","labelsVisible","htmlLabels","swimlaneSelectionEnabled","swimlaneNesting","minFitScale","maxFitScale","collapsedImage","expandedImage","warningImage","alreadyConnectedResource","containsValidationErrorsResource","collapseExpandResource","createCellEditor","createTooltipHandler","createSelectionCellsHandler","connectionHandler","createConnectionHandler","createGraphHandler","panningHandler","createPanningHandler","panningEnabled","createPopupMenuHandler","getStylesheet","getSelectionCellsForChanges","processChange","updateSelection","removeSelectionCells","setDefaultParent","removeStateForCell","newParent","home","addCellOverlay","removeCellOverlay","removeCellOverlays","clearCellOverlays","setCellWarning","warning","isSelect","setSelectionCell","startEditingAtCell","getSelectionCell","isCellEditable","convertValueToString","cellLabelChanged","isAutoSizeCell","cellSizeUpdated","click","mxe","isTransparentClickEvent","isCellSelected","selectCellForEvent","swimlane","isSwimlaneSelectionEnabled","getSwimlaneAt","isToggleEvent","tapAndHold","panningTrigger","marker","currentColor","markedState","mark","createEdgeState","panningManager","createPanningManager","getBorderSizes","borderLeftStyle","borderLeftWidth","paddingTop","borderTopStyle","borderTopWidth","borderRightStyle","borderRightWidth","paddingBottom","borderBottomStyle","borderBottomWidth","getPreferredPageSize","page","hCount","vCount","keepOrigin","ignoreWidth","ignoreHeight","getBorder","cssBorder","w1","h1","w2","h2","s2","doResizeContainer","updatePageBreaks","gb","horizontalCount","verticalCount","horizontalPageBreaks","verticalPageBreaks","drawPageBreaks","breaks","pageBreak","postProcessCellStyle","getImageFromBundles","encodeURIComponent","comma","setCellStyle","toggleCellStyle","toggleCellStyles","toggleCellStyleFlags","alignCells","param","resizeCell","flipEdge","addImageBundle","bundle","removeImageBundle","orderCells","back","cellsOrdered","groupCells","getCellsForGroup","createGroupCell","getBoundsForGroup","ungroupCells","removeCellsAfterUngroup","cellsRemoved","addAllEdges","removeCellsFromParent","moveGroup","allowInvalidEdges","keepPosition","trans","getEdgeValidationError","createVertex","createEdge","addEdge","absolute","constrain","parentState","zero","oldState","isAllowNegativeCoordinates","autoSizeCell","isExtendParentsOnAdd","isExtendParent","extendParent","constrainChild","cellConnected","updateCellSize","getDeletableCells","getAllEdges","disconnectTerminal","connected","tstate","splitEdge","newEdge","toggleCells","cellsToggled","checkFoldable","getFoldableCells","cellsFolded","isCellFoldable","swapBounds","willCollapse","updateAlternateBounds","getPreferredSizeForCell","allCells","ignoreChildren","cellStyle","gs2","resizeCells","isRecursiveResize","cellResized","ignoreRelative","resizeChildCells","constrainChildCells","scaleCell","isCellResizable","isCloneInvalidEdges","setAllowNegativeCoordinates","isDisconnectOnMove","isAllowDanglingEdges","isExtendParentsOnMove","disconnect","disconnectGraph","translateCell","getCellContainmentArea","getMaximumGraphBounds","sizeFirst","isConstrainRelativeChildren","isConstrainChild","overlap","getOverlap","getOutlineConstraint","getAllConnectionConstraints","setConnectionConstraint","connectCell","isPortsEnabled","getTerminalForPort","isCellDisconnectable","getCurrentRoot","enterGroup","isValidRoot","exitGroup","includeDescendants","addPoint","shiftPreview1","shiftPreview2","zoomIn","zoomOut","zoomActual","cw","sh","scrollRectToVisible","zoomToRect","scaleX","scaleY","aspectFactor","rectRight","rectBottom","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","newScale","scrollCellToVisible","tr2","isChanged","widthLimit","heightLimit","ddx","ddy","isCellConnectable","isLoop","isCloneEvent","isConstrainedEvent","isIgnoreTerminalEvent","validationAlert","isEdgeValid","isValidConnection","sourceOut","targetIn","validateEdge","validateGraph","isValid","getCellValidationError","outCount","inCount","rule","setBackgroundImage","isHtmlLabels","setHtmlLabels","getTooltip","tip","getHandler","getTooltipForNode","getTooltipForCell","getCursorForMouseEvent","getCursorForCell","setBorder","isResizeContainer","setResizeContainer","isEscapeEnabled","setEscapeEnabled","setInvokesStopCellEditing","setEnterStopsCellEditing","isCellLocked","isCellsLocked","setCellsLocked","getCloneableCells","isCellCloneable","isCellsCloneable","setCellsCloneable","canExportCell","canImportCell","isCellsSelectable","setCellsSelectable","isCellDeletable","isCellsDeletable","setCellsDeletable","isLabelMovable","isCellRotatable","getMovableCells","isCellsMovable","setCellsMovable","setPortsEnabled","getGridSize","setGridSize","getTolerance","setTolerance","isVertexLabelsMovable","setVertexLabelsMovable","isEdgeLabelsMovable","setEdgeLabelsMovable","isSwimlaneNesting","setSwimlaneNesting","setSwimlaneSelectionEnabled","isMultigraph","setMultigraph","isAllowLoops","setAllowDanglingEdges","setConnectableEdges","isConnectableEdges","setCloneInvalidEdges","setAllowLoops","setDisconnectOnMove","setDropEnabled","isSplitEnabled","setSplitEnabled","isCellsResizable","setCellsResizable","isTerminalPointMovable","isCellBendable","isCellsBendable","setCellsBendable","isCellsEditable","setCellsEditable","isCellsDisconnectable","setCellsDisconnectable","isValidSource","isValidTarget","setTooltips","setPanning","isAutoSizeCells","setAutoSizeCells","isExtendParents","setExtendParents","setExtendParentsOnAdd","setExtendParentsOnMove","setRecursiveResize","isConstrainChildren","setConstrainChildren","setConstrainRelativeChildren","isAllowOverlapParent","isValidDropTarget","isSplitTarget","ignoreFn","hitsSwimlaneContent","getPointForEvent","addOffset","getCellsBeyond","rightHalfpane","bottomHalfpane","isolate","isSelectionEmpty","getSelectionCount","addSelectionCell","addSelectionCells","removeSelectionCell","selectRegion","selectCellsForEvent","selectNextCell","selectCell","selectPreviousCell","selectParentCell","selectChildCell","isNext","isParent","isChild","sel","selectAll","descendants","selectVertices","selectCells","selectEdges","createHandler","createEdgeHandler","createVertexHandler","createElbowEdgeHandler","createEdgeSegmentHandler","updateMouseEvent","getStateForTouchEvent","isEventIgnored","mouseEvent","lastEvent","mouseMoveRedirect","mouseUpRedirect","isSyntheticEventIgnored","lastMouseX","lastMouseY","ignoreMouseEvents","isEventSourceIgnored","candidate","getEventState","currentTime","fireDoubleClick","lastTouchEvent","lastTouchX","doubleClickCounter","doubleClickFired","lastTouchCell","valid","tapAndHoldThread","consumeMouseEvent","graphRenderHint","showViewport","sizerSize","updateOnPan","sizerImage","suspended","forceVmlHandles","outlineGraphModelChanged","selectionBorder","redirect","redirect2","sizer","createSizer","setZoomEnabled","getSourceContainerSize","getOutlineOffset","getSourceGraphBounds","sourceScale","scaledGraphBounds","unscaledGraphBounds","unscaledFinderBounds","union","completeWidth","completeHeight","outlineScale","navView","scale2","scale3","allowHandleBoundsCheck","getTranslateForEvent","viewRatio","checkTerminal","checkNeighbors","sourceValue","targetValue","checkType","attrValue","bubbling","isBubbling","setBubbling","getLayout","getCellsForChanges","executeLayoutForCells","sorted","reverse","layoutCells","getCellsForChange","executeLayout","setHorizontal","setAddEnabled","setResizeEnabled","isSwimlaneIgnored","isCellHorizontal","swimlaneAdded","parentHorizontal","resizeSwimlane","addEdges","translateState","revalidateState","maxCells","highlightEnabled","cloneEnabled","moveEnabled","currentDx","currentDy","updateCursor","selectEnabled","removeEmptyParents","connectOnDrop","scrollOnMove","previewColor","htmlPreview","scaleGrid","rotationEnabled","isCloneEnabled","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","getInitialCellForEvent","isDelayedSelection","delayedSelection","cellWasClicked","initialCell","createPreviewShape","useGuidesForEvent","vector","roundLength","removeHint","setHighlightColor","selectDelayed","destroyShapes","guides","shouldRemoveCellsFromParent","shouldRemoveParent","log","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","pinchEnabled","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","consumePanningTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","isSelectOnPopup","popupTrigger","getCellForPopupEvent","hotspotEnabled","validState","setHotspot","getHotspot","setHotspotEnabled","isHotspotEnabled","hasValidState","getValidState","getMarkedState","unmark","setCurrentState","isValidState","getMarkerColor","markCell","getStateToMark","maxHandlers","oldHandlers","isHandlerActive","moveIconFront","moveIconBack","connectImage","targetConnectImage","createTarget","constraintHandler","waypointsEnabled","ignoreMouseDown","connectIconOffset","drillHandler","mouseDownCounter","movePreviewAway","outlineConnect","insertBeforeSource","isInsertBefore","isCreateTarget","setCreateTarget","iconState","redrawIcons","icons","isConnectableCell","isConnecting","validateConnection","getConnectImage","isMoveIconToFrontForState","createIcons","currentState","getIconPosition","destroyIcons","selectedIcon","isStartEvent","currentConstraint","sourceConstraint","waypoints","isImmediateConnectSource","isOutlineConnectEvent","clientLeft","clientTop","gridX","gridY","isHighlightAt","updateCurrentState","isCellEnabled","setFocus","convertWaypoint","snapToPreview","pt2","getTargetPerimeterPoint","getSourcePerimeterPoint","originalPoint","drawPreview","hitsIcon","updateIcons","realPoints","targetPerimeter","sourcePerimeter","isStopEvent","addWaypointForEvent","checkConstraints","updatePreview","getEdgeColor","terminalInserted","createTargetVertex","getAlignmentTolerance","pointImage","focusIcons","focusHighlight","currentFocusArea","focusPoints","getImageForConstraint","isStateIgnored","destroyFocusHighlight","isKeepFocusEvent","getCellForEvent","existingEdge","mouseleaveHandler","grid","mouse","minDistSq","hl","createHighlightShape","cp","defaultOpacity","sharedDiv","currentY","createMouseEvent","ignoreGrid","getPosition","setPosition","copyStyle","processEvent","getTotalRotation","flipPoint","snapPoint","isHtmlRequired","initShape","ignore","singleSizer","handleImage","parentHighlightEnabled","rotationRaster","rotationCursor","manageSizers","constrainGroupByChildren","rotationHandleVSpacing","horizontalOffset","verticalOffset","selectionBounds","getSelectionBounds","createSelectionShape","sizers","labelShape","isRotationHandleVisible","rotationShape","customHandles","createCustomHandles","updateMinBounds","isCenteredEvent","minBounds","createParentHighlightShape","getSelectionColor","getSelectionStrokeWidth","isSelectionDashed","createSizerShape","isSizerVisible","moveSizerTo","getHandleForEvent","checkShape","isCustomHandleEvent","handle","isLivePreviewBorder","childOffsetX","childOffsetY","preview","hideSizers","edgeHandlers","setHandlesVisible","checkTolerance","roundAngle","moveLabel","rotateVertex","resizeVertex","currentAlpha","atan","raster","redrawHandles","unscaledBounds","dx3","dy3","dx4","dy4","dx5","dy5","updateLivePreview","tempState","rotateCell","rotateClick","constrained","moveChildren","centered","cdx","cdy","getHandlePadding","crs","da","getRotationHandlePosition","updateParentHighlight","parentHighlight","bends","removeEnabled","dblClickRemoveEnabled","mergeRemoveEnabled","straightRemoveEnabled","virtualBendsEnabled","virtualBendOpacity","preferHtml","snapToTerminals","manageLabelHandle","abspoints","getSelectionPoints","targetState","createBends","isVirtualBendsEnabled","virtualBends","createVirtualBends","createLabelHandleShape","initBend","isAddPointEvent","isRemovePointEvent","otherCell","isHandleVisible","bend","createHandleShape","removePoint","isHandleEnabled","labelHandleImage","isAddVirtualBendEvent","isTarget","isLabel","clonePreviewState","getSnapToTerminalTolerance","isSnapToTerminalsEvent","snapToPoint","snapToTerminal","getPreviewTerminalState","getPreviewPoints","checkRemove","updatePreviewState","targetConstraint","setPreviewColor","changeTerminalPoint","changePoints","isClone","addPointAt","getHandleFillColor","checkLabelHandle","xn","yn","bn","redrawInnerBends","destroyBends","flipEnabled","doubleClickOrientationResource","createVirtualBend","dblClickHandler","getCursorForBend","getCurrentPoints","pt0","pt1","rpts","straight","bindKey","code","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","isGraphEvent","boundFunction","ignoreTouchEvents","hideOnHover","setHideOnHover","getStateForEvent","stateSource","resetTimer","restart","keepOnTop","drawHighlight","getStrokeWidth","bindAction","createMenu","conditions","createConditions","addItems","condition","as","enabledCond","addAction","isCell","condNodes","insertFunction","pressed","addActionOption","setMode","addPrototype","ptype","installDropHandler","addVertex","horizontalFlow","edgeGeometry","sprite","loader","askZoomResource","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","dblClickAction","swimlaneRequired","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","postParameterName","escapePostData","urlPost","urlImage","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","isModified","setModified","getUrlImage","showProperties","showTasks","showHelp","showOutline","dec","decode","resetHistory","resetFirstTime","cookie","actionname","addTemplate","template","getTemplate","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","createPopupMenu","createSwimlaneManager","createLayoutManager","swimlaneMgr","layoutMgr","swimlaneLayout","createSwimlaneLayout","diagramLayout","createDiagramLayout","setGraphContainer","rubberband","insertHandler","gs","setToolbarContainer","setStatusContainer","tstamp","toLocaleString","setStatus","setTitleContainer","getTitle","treeLayout","getRootTitle","createGroup","readGraphModel","getUrlPost","writeGraphModel","postDiagram","swapStyles","second","createProperties","isPropertiesVisible","yField","xField","widthField","heightField","texts","okFunction","cancelFunction","createTasks","refreshTasks","frame","modename","consumeCycleAttribute","cycleAttribute","isConstrainedMoving","mxCodecRegistry","codecs","aliases","register","codec","classname","addAlias","codecname","getCodec","mxObjectCodec","objects","idrefs","elements","encodeDefaults","putObject","getObject","updateElements","addElement","Error","reference","into","encodeCell","isCellCodec","decodeCell","restoreStructures","decoder","insertIntoGraph","cloneTemplate","getFieldName","attributename","mapped","getAttributeName","fieldname","isExcluded","isReference","beforeEncode","encodeObject","afterEncode","encodeValue","writeAttribute","writePrimitiveAttribute","writeComplexAttribute","convertAttributeToXml","isBooleanAttribute","convertAttributeFromXml","isNumericAttribute","beforeDecode","decodeNode","afterDecode","decodeAttributes","decodeChildren","decodeAttribute","isIgnoredAttribute","processInclude","decodeChild","getFieldTemplate","addObjectValue","isWrite","mxCellCodec","rootNode","decodeRoot","rootCell","mxModelCodec","mxRootChangeCodec","childRef","mxChildChangeCodec","mxTerminalChangeCodec","mxGenericChangeCodec","variable","mxGraphCodec","mxGraphViewCodec","mxStylesheetCodec","styleNode","getStringValue","mxDefaultKeyHandlerCodec","mxDefaultToolbarCodec","act","inc","mxDefaultPopupMenuCodec","role","decodeTemplates","decodeUi","setMapContainer","mxEditorCodec","stat","macrotask","WebKitMutationObserver","flush","standalone","__e","IE8_DOM_DEFINE","toPrimitive","Attributes","UNSCOPABLES","PromiseCapability","$$resolve","promiseCapability","toIObject","toAbsoluteIndex","IS_INCLUDES","$this","fromIndex","addToUnscopables","iterated","Arguments","arrayIndexOf","names","D","forbiddenField"],"mappings":"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","file":"js/chunk-vendors.3c41b1c8.js","sourcesContent":["'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","exports.f = Object.getOwnPropertySymbols;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar $toString = require('./_function-to-string');\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if (process.env.NODE_ENV !== 'production' && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (target) {\n  targetStack.push(target);\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  targetStack.pop();\n  Dep.target = targetStack[targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      protoAugment(value, arrayMethods);\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    // skip validation for weex recycle-list child component props\n    !(false)\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (process.env.NODE_ENV !== 'production') {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar isUsingMicroTask = false;\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n  isUsingMicroTask = true;\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n  isUsingMicroTask = true;\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if (process.env.NODE_ENV !== 'production' && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (process.env.NODE_ENV !== 'production') {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n\nvar convertEnumeratedValue = function (key, value) {\n  return isFalsyAttrValue(value) || value === 'false'\n    ? 'false'\n    // allow arbitrary string value for contenteditable\n    : key === 'contenteditable' && isValidContentEditableValue(value)\n      ? value\n      : 'true'\n};\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\nvar nodeOps = /*#__PURE__*/Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        insert(parentElm, vnode.elm, refElm);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (nodeOps.parentNode(ref$$1) === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (process.env.NODE_ENV !== 'production') {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (\n    oldVnode,\n    vnode,\n    insertedVnodeQueue,\n    ownerArray,\n    index,\n    removeOnly\n  ) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // clone reused vnode\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (process.env.NODE_ENV !== 'production') {\n          checkDuplicateKeys(ch);\n        }\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm)) {\n          removeVnodes(parentElm, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      dir.oldArg = oldDir.arg;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, convertEnumeratedValue(key, value));\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && value !== '' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler$1 (event, handler, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\n// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n// implementation and does not fire microtasks in between event propagation, so\n// safe to exclude.\nvar useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n\nfunction add$1 (\n  name,\n  handler,\n  capture,\n  passive\n) {\n  // async edge case #6566: inner click event triggers patch, event handler\n  // attached to outer element during patch, and triggered again. This\n  // happens because browsers fire microtask ticks between event propagation.\n  // the solution is simple: we save the timestamp when a handler is attached,\n  // and the handler would only fire if the event passed to it was fired\n  // AFTER it was attached.\n  if (useMicrotaskFix) {\n    var attachedTimestamp = currentFlushTimestamp;\n    var original = handler;\n    handler = original._wrapper = function (e) {\n      if (\n        // no bubbling, should always fire.\n        // this is just a safety net in case event.timeStamp is unreliable in\n        // certain weird environments...\n        e.target === e.currentTarget ||\n        // event is fired after handler attachment\n        e.timeStamp >= attachedTimestamp ||\n        // bail for environments that have buggy event.timeStamp implementations\n        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n        // #9681 QtWebEngine event.timeStamp is negative value\n        e.timeStamp <= 0 ||\n        // #9448 bail if event is fired in another document in a multi-page\n        // electron/nw.js app, since event.timeStamp will be using a different\n        // starting reference\n        e.target.ownerDocument !== document\n      ) {\n        return original.apply(this, arguments)\n      }\n    };\n  }\n  target$1.addEventListener(\n    name,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  name,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    name,\n    handler._wrapper || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nvar svgContainer;\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (!(key in props)) {\n      elm[key] = '';\n    }\n  }\n\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value' && elm.tagName !== 'PROGRESS') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {\n      // IE doesn't support innerHTML for SVG elements\n      svgContainer = svgContainer || document.createElement('div');\n      svgContainer.innerHTML = \"<svg>\" + cur + \"</svg>\";\n      var svg = svgContainer.firstChild;\n      while (elm.firstChild) {\n        elm.removeChild(elm.firstChild);\n      }\n      while (svg.firstChild) {\n        elm.appendChild(svg.firstChild);\n      }\n    } else if (\n      // skip the update if old and new VDOM state is the same.\n      // `value` is handled separately because the DOM value may be temporarily\n      // out of sync with VDOM state due to focus, composition and modifiers.\n      // This  #4521 by skipping the unnecesarry `checked` update.\n      cur !== oldProps[key]\n    ) {\n      // some property updates can throw\n      // e.g. `value` on <progress> w/ non-finite value\n      try {\n        elm[key] = cur;\n      } catch (e) {}\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\nvar whitespaceRE = /\\s+/;\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  // JSDOM may return undefined for transition properties\n  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n// in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n// as a floor function) causing unexpected behaviors\nfunction toMs (s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    context = transitionNode.context;\n    transitionNode = transitionNode.parent;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show && el.parentNode) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n\nvar isVShowDirective = function (d) { return d.name === 'show'; };\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(isNotTextNode);\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  beforeMount: function beforeMount () {\n    var this$1 = this;\n\n    var update = this._update;\n    this._update = function (vnode, hydrating) {\n      var restoreActiveInstance = setActiveInstance(this$1);\n      // force removing pass\n      this$1.__patch__(\n        this$1._vnode,\n        this$1.kept,\n        false, // hydrating\n        true // removeOnly (!important, avoids unnecessary moves)\n      );\n      this$1._vnode = this$1.kept;\n      restoreActiveInstance();\n      update.call(this$1, vnode, hydrating);\n    };\n  },\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (e && e.target !== el) {\n            return\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        process.env.NODE_ENV !== 'production' &&\n        process.env.NODE_ENV !== 'test'\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' &&\n      process.env.NODE_ENV !== 'test' &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nexport default Vue;\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","module.exports = false;\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export = require('./_export');\nvar context = require('./_string-context');\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","exports.f = {}.propertyIsEnumerable;\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export = require('./_export');\nvar $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","(function (root, factory) {\nif (typeof define === 'function' && define.amd) {\ndefine([], factory);\n} else if (typeof module === 'object' && module.exports) {\nmodule.exports = factory();\n} else {\nroot.mxgraph = factory();\n}\n}(this, function () {\nreturn function (opts) {\nfor (var name in opts) { this[name] = opts[name]; }\nvar __mxOutput = {};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t *\n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t *\n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t *\n\t * Current version is 4.0.2.\n\t */\n\tVERSION: '4.0.2',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent.indexOf('MSIE') >= 0 && (document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t *\n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t *\n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t *\n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0,\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: navigator.userAgent.indexOf('AppleWebKit/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Chrome/') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_IOS\n\t *\n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false),\n\n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: navigator.userAgent.indexOf('Chrome/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: navigator.userAgent.indexOf('Firefox/') >= 0,\n\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.appName.toUpperCase() != 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\n\t/**\n\t * Variable: IS_TOUCH\n\t *\n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t *\n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t *\n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t *\n\t * Parameters:\n\t *\n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t * id - unique id for the link element to check if it already exists\n\t */\n\tlink: function(rel, href, doc, id)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar link = doc.createElement('link');\n\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\n\t\t\tif (id)\n\t\t\t{\n\t\t\t\tlink.setAttribute('id', id);\n\t\t\t}\n\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\n\t/**\n\t * Function: loadResources\n\t *\n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t *\n\t * Parameters:\n\t *\n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t *\n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Variable: mxLoadResources\n *\n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n *\n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n *\n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n *\n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n *\n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n *\n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n *\n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n *\n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n *\n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n *\n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n *\n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value. The use of setAttribute\n\t\t// is not possible.\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n// PREPROCESSOR-REMOVE-START\n// If script is loaded via CommonJS, do not write <script> tags to the page\n// for dependencies. These are already included in the build.\nif (mxForceIncludes || !(typeof module === 'object' && module.exports != null))\n{\n// PREPROCESSOR-REMOVE-END\n\tmxClient.include(mxClient.basePath+'/js/util/mxLog.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxObjectIdentity.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDictionary.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxResources.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPoint.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxRectangle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEffects.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUtils.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxConstants.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventObject.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMouseEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlRequest.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxClipboard.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxWindow.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxForm.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImage.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDivResizer.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDragSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoableEdit.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUrlConverter.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPanningManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAutoSaveManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAnimation.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMorphing.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageBundle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageExport.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAbstractCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxSvgCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxVmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxGuide.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencil.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencilRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxActor.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCloud.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRectangleShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxDoubleEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRhombus.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxPolyline.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrow.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrowConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxText.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxTriangle.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxHexagon.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLine.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxImageShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLabel.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCylinder.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxSwimlane.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxGraphLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxStackLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxPartitionLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompactTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxRadialTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxFastOrganicLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCircleLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxParallelEdgeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompositeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxEdgeLabelLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphAbstractHierarchyCell.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyNode.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyEdge.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxSwimlaneModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxHierarchicalLayoutStage.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMedianHybridCrossingReduction.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMinimumCycleRemover.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxCoordinateAssignment.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxSwimlaneOrdering.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxHierarchicalLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxSwimlaneLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGraphModel.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCell.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGeometry.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCellPath.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPerimeter.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPrintPreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStylesheet.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellState.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphSelectionModel.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellRenderer.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxEdgeStyle.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStyleRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphView.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraph.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellOverlay.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxOutline.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxMultiplicity.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxLayoutManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxSwimlaneManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxTemporaryCellStates.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellStatePreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxConnectionConstraint.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxGraphHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPanningHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPopupMenuHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxSelectionCellsHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConnectionHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConstraintHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxRubberband.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxHandle.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxVertexHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxElbowEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeSegmentHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxTooltipHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellTracker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellHighlight.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodecRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxObjectCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCellCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxModelCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxRootChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxChildChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxTerminalChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGenericChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphViewCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxStylesheetCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultKeyHandlerCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultToolbarCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultPopupMenuCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxEditorCodec.js');\n// PREPROCESSOR-REMOVE-START\n}\n// PREPROCESSOR-REMOVE-END\n\n__mxOutput.mxClient = typeof mxClient !== 'undefined' ? mxClient : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t *\n\t * A singleton class that implements a simple console.\n\t *\n\t * Variable: consoleName\n\t *\n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\n\t/**\n\t * Variable: TRACE\n\t *\n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t *\n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t *\n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t *\n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t};\n\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: info\n\t *\n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\n\t/**\n\t * Function: addButton\n\t *\n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\n\t/**\n\t * Function: isVisible\n\t *\n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\n\t\treturn false;\n\t},\n\n\n\t/**\n\t * Function: show\n\t *\n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t *\n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t *\n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current\n\t * time in milliseconds.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t *\n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\n\t/**\n\t * Function: debug\n\t *\n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: warn\n\t *\n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t *\n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\n\t/**\n\t * Function: writeln\n\t *\n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\n};\n\n__mxOutput.mxLog = typeof mxLog !== 'undefined' ? mxLog : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t *\n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t *\n\t * The identity for an object does not change during its lifecycle.\n\t *\n\t * Variable: FIELD_NAME\n\t *\n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t *\n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t *\n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t *\n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxObjectIdentity = typeof mxObjectIdentity !== 'undefined' ? mxObjectIdentity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n *\n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n *\n * Parameters:\n *\n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n\n__mxOutput.mxDictionary = typeof mxDictionary !== 'undefined' ? mxDictionary : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t *\n\t * Implements internationalization. You can provide any number of\n\t * resource files on the server using the following format for the\n\t * filename: name[-en].properties. The en stands for any lowercase\n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a\n\t * default resource which is loaded in all cases. If a properties file for a\n\t * specific language exists, then it is used to override the settings in the\n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without\n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the\n\t * editor configuration file, eg:\n\t *\n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t *\n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t *\n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t *\n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t *\n\t * Lines that start with a # sign will be ignored.\n\t *\n\t * Special characters\n\t *\n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t *\n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t *\n\t * Asynchronous loading\n\t *\n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t *\n\t * Variable: resources\n\t *\n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t *\n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t *\n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t *\n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t *\n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t *\n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t *\n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t *\n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t *\n\t * Parameters:\n\t *\n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t *\n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t *\n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t *\n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t *\n\t * Parameters:\n\t *\n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t *\n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t *\n\t * At application startup, additional resources may be\n\t * added using the following code:\n\t *\n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t *\n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t *\n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t *\n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t *\n\t * Parameters:\n\t *\n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t *\n\t * Replaces the given placeholders with the given parameters.\n\t *\n\t * Parameters:\n\t *\n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t *\n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t *\n\t * Parameters:\n\t *\n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n\n__mxOutput.mxResources = typeof mxResources !== 'undefined' ? mxResources : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n *\n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n *\n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n\n__mxOutput.mxPoint = typeof mxPoint !== 'undefined' ? mxPoint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n *\n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n *\n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n *\n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n *\n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n *\n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n};\n\n/**\n * Function: getPoint\n *\n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n *\n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n *\n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n *\n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n\n__mxOutput.mxRectangle = typeof mxRectangle !== 'undefined' ? mxRectangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t *\n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t *\n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t *\n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function()\n\t\t{\n\t\t\tvar isRequired = false;\n\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n\n\t/**\n\t * Function: cascadeOpacity\n\t *\n\t * Sets the opacity on the given cell and its descendants.\n\t *\n\t * Parameters:\n\t *\n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t *\n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\n\t\tvar opacity = from || 100;\n\n\t\tmxUtils.setOpacity(node, opacity);\n\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxEffects = typeof mxEffects !== 'undefined' ? mxEffects : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t *\n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t *\n\t * For example, the following code displays an error message:\n\t *\n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t *\n\t * Variable: errorResource\n\t *\n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\n\t/**\n\t * Variable: closeResource\n\t *\n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t *\n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\n\t/**\n\t * Function: removeCursors\n\t *\n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t *\n\t * Parameters:\n\t *\n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\n\t\tvar children = element.childNodes;\n\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t *\n\t * Returns the current style of the specified element.\n\t *\n\t * Parameters:\n\t *\n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: parseCssNumber\n\t *\n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\n\t\tvalue = parseFloat(value);\n\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t *\n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t *\n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\n\t/**\n\t * Function: hasScrollbars\n\t *\n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\n\t/**\n\t * Function: bind\n\t *\n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\n\t/**\n\t * Function: eval\n\t *\n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t *\n\t * Parameters:\n\t *\n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: findNode\n\t *\n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\n\t\tnode = node.firstChild;\n\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tnode = node.nextSibling;\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t *\n\t * Returns the name for the given function.\n\t *\n\t * Parameters:\n\t *\n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t *\n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t *\n\t * Parameters:\n\t *\n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t *\n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t *\n\t * Parameters:\n\t *\n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t *\n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t *\n\t * The length of arrays is not modified inside this function.\n\t *\n\t * Parameters:\n\t *\n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: isNode\n\t *\n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t *\n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t *\n\t * Parameters:\n\t *\n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: isAncestorNode\n\t *\n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t *\n\t * Parameters:\n\t *\n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t *\n\t * Returns an array of child nodes that are of the given node type.\n\t *\n\t * Parameters:\n\t *\n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t *\n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t *\n\t * Parameters:\n\t *\n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\tswitch (node.nodeType)\n\t\t\t{\n\t\t\t\tcase 1: /* element */\n\t\t\t\t{\n\t\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\n\t\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNode(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn newNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3: /* text */\n\t\t\t    case 4: /* cdata-section */\n\t\t\t    case 8: /* comment */\n\t\t\t    {\n\t\t\t      return doc.createTextNode(node.value);\n\t\t\t      break;\n\t\t\t    }\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t *\n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (window.ActiveXObject)\n\t\t{\n\t\t\tdoc = new ActiveXObject('Microsoft.XMLDOM');\n\t \t}\n\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t *\n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar result = mxUtils.createXmlDocument();\n\t\t\t\tresult.async = false;\n\t\t\t\t// Workaround for parsing errors with SVG DTD\n\t\t\t\tresult.validateOnParse = false;\n\t\t\t\tresult.resolveExternals = false;\n\t\t\t\tresult.loadXML(xml);\n\n\t\t\t\treturn result;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t *\n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getPrettyXML\n\t *\n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t */\n\tgetPrettyXml: function(node, tab, indent)\n\t{\n\t\tvar result = [];\n\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = tab || '  ';\n\t\t\tindent = indent || '';\n\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value =  mxUtils.trim(mxUtils.getTextContent(node));\n\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(value) + '\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each\n\t\t\t\t// child nodes and appends it here with an\n\t\t\t\t// indentation\n\t\t\t\tvar tmp = node.firstChild;\n\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>\\n');\n\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.push(indent + '</'+node.nodeName + '>\\n');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push('/>\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: removeWhitespace\n\t *\n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\n\t\t\ttmp = next;\n\t\t}\n\t},\n\n\t/**\n\t * Function: htmlEntities\n\t *\n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t *\n\t * Parameters:\n\t *\n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\n\t\treturn s;\n\t},\n\n\t/**\n\t * Function: isVml\n\t *\n\t * Returns true if the given node is in the VML namespace.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t *\n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\n\t\tif (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);\n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\n\t\treturn xml;\n\t},\n\n\t/**\n\t * Function: extractTextWithWhitespace\n\t *\n\t * Returns the text content of the specified node.\n\t *\n\t * Parameters:\n\t *\n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\n\t\tdoExtract(elems);\n\n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t *\n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t *\n\t * Returns the text content of the specified node.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\n\t/**\n\t * Function: setTextContent\n\t *\n\t * Sets the text content of the specified node.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getInnerHtml\n\t *\n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t *\n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\n\t\t\t\t\t\tvar attrs = node.attributes;\n\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: write\n\t *\n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t *\n\t * Parameters:\n\t *\n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\n\t\treturn node;\n\t},\n\n\t/**\n\t * Function: writeln\n\t *\n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t *\n\t * Parameters:\n\t *\n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\n\t\treturn node;\n\t},\n\n\t/**\n\t * Function: br\n\t *\n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t *\n\t * Parameters:\n\t *\n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\n\t\treturn br;\n\t},\n\n\t/**\n\t * Function: button\n\t *\n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t *\n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\n\t\treturn button;\n\t},\n\n\t/**\n\t * Function: para\n\t *\n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t *\n\t * Parameters:\n\t *\n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t *\n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t *\n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t *\n\t * Parameters:\n\t *\n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t *\n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t *\n\t * Parameters:\n\t *\n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t *\n\t * Parameters:\n\t *\n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: getDocumentSize\n\t *\n\t * Returns the client size for the current document as an <mxRectangle>.\n\t */\n\tgetDocumentSize: function()\n\t{\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\ttry\n\t\t{\n\t\t\treturn new mxRectangle(0, 0, b.clientWidth || d.clientWidth, Math.max(b.clientHeight || 0, d.clientHeight));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn new mxRectangle();\n\t\t}\n\t},\n\n\t/**\n\t * Function: fit\n\t *\n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style.\n\t */\n\tfit: function(node)\n\t{\n\t\tvar ds = mxUtils.getDocumentSize();\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + ds.width;\n\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\n\t\tvar bottom = st + ds.height;\n\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t *\n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t *\n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t *\n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t *\n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t *\n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t *\n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: post\n\t *\n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\n\t/**\n\t * Function: submit\n\t *\n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Parameters:\n\t *\n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\n\t/**\n\t * Function: loadInto\n\t *\n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t *\n\t * Parameters:\n\t *\n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\n\t\tdoc.load(url);\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t *\n\t * Parameters:\n\t *\n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: getNumber\n\t *\n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t *\n\t * Parameters:\n\t *\n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\n\t\t}\n\n\t\treturn Number(value);\n\t},\n\n\t/**\n\t * Function: getColor\n\t *\n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t *\n\t * Parameters:\n\t *\n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t *\n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t *\n\t * Parameters:\n\t *\n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t *\n\t * Compares all mxPoints in the given lists.\n\t *\n\t * Parameters:\n\t *\n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif (a[i] == b[i] || (a[i] != null && !a[i].equals(b[i])))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t *\n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t *\n\t * Parameters:\n\t *\n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\t// Counts keys in b to check if all values have been compared\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn count == 0;\n\t},\n\n\t/**\n\t * Function: removeDuplicates\n\t *\n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t *\n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t *\n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t *\n\t * Returns a textual representation of the specified object.\n\t *\n\t * Parameters:\n\t *\n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor);\n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t *\n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t *\n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\n\t/**\n\t * Function: arcToCurves\n\t *\n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\n        if (r1 === 0 || r2 === 0)\n        {\n        \treturn result;\n        }\n\n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n\n        if (lamda > 1)\n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }\n        else\n        {\n        \tvar seif = 1;\n\n        \tif (largeArcFlag === fS)\n        \t{\n        \t\tseif = -1;\n        \t}\n\n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n\n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n\n        if (fS == 0 && dr > 0)\n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0)\n        {\n        \tdr += 2 * Math.PI;\n        }\n\n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n\n        for (var n = 0; n < seg; ++n)\n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n\n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n\n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n\n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t *\n\t * Returns the bounding box for the rotated rectangle.\n\t *\n\t * Parameters:\n\t *\n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y  + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t *\n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t *\n\t * Parameters:\n\t *\n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\n\t/**\n\t * Function: reversePortConstraints\n\t *\n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: findNearestSegment\n\t *\n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t *\n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t *\n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t *\n\t * Returns true if the given rectangle intersects the given segment.\n\t *\n\t * Parameters:\n\t *\n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: contains\n\t *\n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t *\n\t * Parameters:\n\t *\n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t *\n\t * Returns true if the two rectangles intersect.\n\t *\n\t * Parameters:\n\t *\n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersects\n\t *\n\t * Returns true if the two rectangles intersect.\n\t *\n\t * Parameters:\n\t *\n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\treturn mxUtils.contains(rect, x, y);\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t *\n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t *\n\t * Parameters:\n\t *\n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = node.parentNode;\n\t\t}\n\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\n\t\tvar r = container.getBoundingClientRect();\n\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t *\n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\n\t/**\n\t * Function: getScrollOrigin\n\t *\n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t *\n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t *\n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\n\t/**\n\t * Function: ltrim\n\t *\n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t *\n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\n\t/**\n\t * Function: rtrim\n\t *\n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t *\n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\n\t/**\n\t * Function: trim\n\t *\n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t *\n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\n\t/**\n\t * Function: isNumeric\n\t *\n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t *\n\t * Parameters:\n\t *\n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t *\n\t * Returns true if the given value is an valid integer number.\n\t *\n\t * Parameters:\n\t *\n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t *\n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t *\n\t * Returns the intersection of two lines as an <mxPoint>.\n\t *\n\t * Parameters:\n\t *\n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\n\t\t// No intersection\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: ptSegDistSq\n\t *\n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t *\n\t * Parameters:\n\t *\n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\n\t\treturn lenSq;\n    },\n\n\t/**\n\t * Function: ptLineDist\n\t *\n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t *\n\t * Parameters:\n\t *\n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n\n\t/**\n\t * Function: relativeCcw\n\t *\n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t *\n\t * Parameters:\n\t *\n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n\n\t/**\n\t * Function: animateChanges\n\t *\n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: cascadeOpacity\n\t *\n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t *\n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: setOpacity\n\t *\n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t *\n\t * Parameters:\n\t *\n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t *\n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t *\n\t * Parameters:\n\t *\n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n\n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t *\n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\n\t\t\tvar p2 = lookup.get(o2);\n\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t *\n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t *\n\t * Parameters:\n\t *\n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t *\n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t *\n\t * Parameters:\n\t *\n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t *\n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: addStylename\n\t *\n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\n\t\t\tstyle += stylename;\n\t\t}\n\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: removeStylename\n\t *\n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: removeAllStylenames\n\t *\n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t *\n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t *\n\t * Parameters:\n\t *\n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: setStyle\n\t *\n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t *\n\t * Parameters:\n\t *\n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t *\n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t *\n\t * Toggles the bold font style.\n\t *\n\t * Parameters:\n\t *\n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: setStyleFlag\n\t *\n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t *\n\t * Parameters:\n\t *\n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: getAlignmentAsPoint\n\t *\n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tdx = -0.5;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tdy = -0.5;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\n\t\treturn new mxPoint(dx, dy);\n\t},\n\n\t/**\n\t * Function: getSizeForString\n\t *\n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\n\t\treturn size;\n\t},\n\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: getScaleForPageCount\n\t *\n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t *\n\t * Parameters:\n\t *\n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\n\t\t// The ratio of horizontal pages / vertical pages for this\n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\n\t\t// Factor the square root of the page count up and down\n\t\t// by the pages aspect ratio to obtain a horizontal and\n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less\n\t\t// than 1 page, the other value can be too high and take more iterations\n\t\t// In this case, just change that value to be the page count, since\n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\t\tnumLoops++;\n\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\n\t/**\n\t * Function: show\n\t *\n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t *\n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t *\n\t * Parameters:\n\t *\n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\n\t\t\tvar links = document.getElementsByTagName('link');\n\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\n\t\t\tvar styles = document.getElementsByTagName('style');\n\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\n\t\tmxUtils.removeCursors(doc.body);\n\n\t\treturn doc;\n\t},\n\n\t/**\n\t * Function: printScreen\n\t *\n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t *\n\t * This function should be called from within the document with the graph.\n\t *\n\t * Parameters:\n\t *\n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\n\t/**\n\t * Function: popup\n\t *\n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t *\n\t * Parameters:\n\t *\n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\n\t\t\tdiv.appendChild(pre);\n\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\n\t/**\n\t * Function: alert\n\t *\n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t *\n\t * Parameters:\n\t *\n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\n\t/**\n\t * Function: prompt\n\t *\n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t *\n\t * Parameters:\n\t *\n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\n\t/**\n\t * Function: confirm\n\t *\n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t *\n\t * Parameters:\n\t *\n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t *\n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t *\n\t * Parameters:\n\t *\n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\n\t\t\tmxUtils.br(div);\n\n\t\t\twarn.setClosable(true);\n\t\t}\n\n\t\twarn.setVisible(true);\n\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t *\n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *\n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t *\n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t *\n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t *\n\t * Parameters:\n\t *\n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn dragSource;\n\t}\n\n};\n\n__mxOutput.mxUtils = typeof mxUtils !== 'undefined' ? mxUtils : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t *\n\t * Defines various global constants.\n\t *\n\t * Variable: DEFAULT_HOTSPOT\n\t *\n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1.\n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t *\n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t *\n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t *\n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t *\n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t *\n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t *\n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t *\n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t *\n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t *\n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t *\n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t *\n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t *\n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t *\n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t *\n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t *\n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t *\n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t *\n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t *\n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n\n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t *\n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t *\n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t *\n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t *\n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t *\n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t *\n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t *\n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t *\n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t *\n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t *\n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t *\n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t *\n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t *\n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t *\n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t *\n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t *\n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t *\n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t *\n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t *\n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t *\n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t *\n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t *\n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t *\n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t *\n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t *\n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t *\n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t *\n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t *\n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t *\n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t *\n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t *\n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t *\n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t *\n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t *\n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t *\n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t *\n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t *\n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t *\n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t *\n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t *\n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t *\n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t *\n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t *\n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t *\n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t *\n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t *\n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t *\n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t *\n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t *\n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t *\n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t *\n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t *\n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t *\n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t *\n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t *\n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t *\n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t *\n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t *\n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t *\n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t *\n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t *\n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t *\n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t *\n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t *\n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t *\n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t *\n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t *\n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t *\n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t *\n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t *\n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t *\n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t *\n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t *\n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t *\n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t *\n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t *\n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t *\n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t *\n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH,\n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t *\n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute,\n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t *\n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t *\n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t *\n\t * Defines the key for the opacity style. The type of the value is\n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t *\n\t * Defines the key for the fill opacity style. The type of the value is\n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t *\n\t * Defines the key for the stroke opacity style. The type of the value is\n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t *\n\t * Defines the key for the text opacity style. The type of the value is\n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t *\n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t *\n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * the vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t *\n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t *\n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t *\n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\n\t/**\n\t* Variable: STYLE_EXIT_DX\n\t*\n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDx\".\n\t*/\n\tSTYLE_EXIT_DX: 'exitDx',\n\n\t/**\n\t* Variable: STYLE_EXIT_DY\n\t*\n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDy\".\n\t*/\n\tSTYLE_EXIT_DY: 'exitDy',\n\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t *\n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t *\n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t *\n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DX\n\t *\n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDx\".\n\t*/\n\tSTYLE_ENTRY_DX: 'entryDx',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DY\n\t *\n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDy\".\n\t*/\n\tSTYLE_ENTRY_DY: 'entryDy',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t *\n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t *\n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t *\n\t * Defines the key for the rotation style. The type of the value is\n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t *\n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t *\n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t *\n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t *\n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t *\n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t *\n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the\n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t *\n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t *\n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t *\n\t * Defines the key for the strokeWidth style. The type of the value is\n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t *\n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t *\n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t *\n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t *\n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t *\n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t *\n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t *\n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t *\n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t *\n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t *\n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t *\n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t *\n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t *\n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t *\n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t *\n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t *\n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t *\n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t *\n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t *\n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t *\n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t *\n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t *\n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t *\n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t *\n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t *\n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t *\n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t *\n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t *\n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t *\n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t *\n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t *\n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t *\n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t *\n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t *\n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t *\n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t *\n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t *\n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t *\n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t *\n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t *\n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t *\n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t *\n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t *\n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t *\n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t *\n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t *\n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t *\n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t *\n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t *\n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t *\n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t *\n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t *\n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t *\n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t *\n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t *\n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t *\n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t *\n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t *\n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t *\n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t *\n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\n\t/**\n\t * Variable: STYLE_ASPECT\n\t *\n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t *\n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t *\n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t *\n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t *\n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t *\n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t *\n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t *\n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t *\n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t *\n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t *\n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t *\n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t *\n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t *\n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t *\n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t *\n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Jetty size is the minimum length of the orthogonal segment before\n\t * it attaches to a shape.\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t *\n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t *\n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t *\n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\". Default is\n\t * <mxGraph.defaultLoopStylean>.\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t *\n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops with no waypoints and defined anchor points should be routed\n\t * using <STYLE_LOOP> or not routed.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t *\n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t *\n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t *\n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t *\n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t *\n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t *\n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t *\n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t *\n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t *\n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t *\n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t *\n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\n\t/**\n\t * Variable: SHAPE_ARROW\n\t *\n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t *\n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\n\t/**\n\t * Variable: SHAPE_LABEL\n\t *\n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t *\n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t *\n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t *\n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t *\n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t *\n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t *\n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t *\n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t *\n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t *\n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t *\n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t *\n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t *\n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t *\n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t *\n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t *\n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t *\n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t *\n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t *\n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t *\n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t *\n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t *\n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t *\n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t *\n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t *\n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t *\n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t *\n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t *\n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system.\n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t *\n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>.\n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t *\n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t *\n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t *\n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t *\n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t *\n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t *\n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t *\n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t *\n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t *\n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t *\n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t *\n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t *\n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t *\n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t *\n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t *\n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t *\n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t *\n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n\n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t *\n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t *\n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t *\n\t * Name of the hexagon perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t *\n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n\n};\n\n__mxOutput.mxConstants = typeof mxConstants !== 'undefined' ? mxConstants : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n *\n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n *\n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n *\n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n *\n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n *\n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n *\n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n *\n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n\n__mxOutput.mxEventObject = typeof mxEventObject !== 'undefined' ? mxEventObject : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n *\n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n *\n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n *\n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n *\n * Parameters:\n *\n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n *\n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n *\n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n *\n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n *\n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n *\n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getX\n *\n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n *\n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n *\n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n *\n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n *\n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n *\n * Parameters:\n *\n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault : mxEvent.isMouseEvent(this.evt);\n\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n\n__mxOutput.mxMouseEvent = typeof mxMouseEvent !== 'undefined' ? mxMouseEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n *\n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n *\n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n *\n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n *\n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n *\n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n *\n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n *\n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEventSource = typeof mxEventSource !== 'undefined' ? mxEventSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t *\n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t *\n\t * Memory Leaks:\n\t *\n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t *\n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct, false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t *\n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: addGestureListeners\n\t *\n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: removeGestureListeners\n\t *\n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t *\n\t * Removes the known listeners from the given DOM node and its descendants.\n\t *\n\t * Parameters:\n\t *\n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\n\t\t\t\tvar children = element.childNodes;\n\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t *\n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t *\n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t *\n\t * Parameters:\n\t *\n\t * funct - Handler function that takes the event argument and a boolean up\n\t * argument for the mousewheel direction.\n\t * target - Target for installing the listener in Google Chrome. See\n\t * https://www.chromestatus.com/features/6662647093133312.\n\t */\n\taddMouseWheelListener: function(funct, target)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\n\t\t\t\tvar delta = 0;\n\n\t\t\t\tif (mxClient.IS_FF)\n\t\t\t\t{\n\t\t\t\t\tdelta = -evt.detail / 2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta = evt.wheelDelta / 120;\n\t\t\t\t}\n\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (delta != 0)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, delta > 0);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Webkit has NS event API, but IE event name and details\n\t\t\tif (mxClient.IS_NS && document.documentMode == null)\n\t\t\t{\n\t\t\t\tvar eventName = (mxClient.IS_SF || mxClient.IS_GC) ? 'mousewheel' : 'DOMMouseScroll';\n\t\t\t\tmxEvent.addListener((mxClient.IS_GC && target != null) ? target : window,\n\t\t\t\t\teventName, wheelHandler);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.addListener(document, 'mousewheel', wheelHandler);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\t},\n\n\t/**\n\t * Function: getSource\n\t *\n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t *\n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t *\n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t *\n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t *\n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t *\n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\n\t/**\n\t * Function: isLeftMouseButton\n\t *\n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\n\t/**\n\t * Function: isMiddleMouseButton\n\t *\n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\n\t/**\n\t * Function: isRightMouseButton\n\t *\n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t *\n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t *\n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t *\n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t *\n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t *\n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t *\n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\n\t\treturn e;\n\t},\n\n\t/**\n\t * Function: getClientX\n\t *\n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t *\n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t *\n\t * Consumes the given event.\n\t *\n\t * Parameters:\n\t *\n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\n\t//\n\t// Special handles in mouse events\n\t//\n\n\t/**\n\t * Variable: LABEL_HANDLE\n\t *\n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t *\n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t *\n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t *\n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t *\n\t */\n\tVIRTUAL_HANDLE: -100000,\n\n\t//\n\t// Event names\n\t//\n\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove.\n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp.\n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset'\n\n};\n\n__mxOutput.mxEvent = typeof mxEvent !== 'undefined' ? mxEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlRequest\n *\n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n *\n * Encoding:\n *\n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n *\n * Example:\n *\n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n *\n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n *\n * Sends an asynchronous POST request to the specified URL.\n *\n * Example:\n *\n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n *\n * Sends a synchronous POST request to the specified URL.\n *\n * Example:\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n *\n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n *\n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n *\n * Or in Java as follows:\n *\n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n *\n * Constructor: mxXmlRequest\n *\n * Constructs an XML HTTP request.\n *\n * Parameters:\n *\n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n *\n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n *\n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n *\n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n *\n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n *\n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n *\n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n *\n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n *\n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n *\n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n *\n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n *\n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n *\n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n *\n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n *\n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n *\n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getXml\n *\n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\n\treturn xml;\n};\n\n/**\n * Function: getText\n *\n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: getStatus\n *\n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn this.request.status;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n *\n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n *\n * Note: Due to technical limitations, onerror is currently ignored.\n *\n * Parameters:\n *\n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechaange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n *\n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n *\n * Example:\n *\n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n *\n * Use the code above before calling <send> if you require a\n * multipart/form-data request.\n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n *\n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n *\n * Parameters:\n *\n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\n\t\twindow.onbeforeunload = null;\n\t}\n\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\n\tdoc.body.appendChild(form);\n\tform.submit();\n\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\n\t\twindow.onbeforeunload = old;\n\t}\n};\n\n__mxOutput.mxXmlRequest = typeof mxXmlRequest !== 'undefined' ? mxXmlRequest : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t *\n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t *\n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t *\n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t *\n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *\n\t *   mxClipboard.parents = new Object();\n\t *\n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *\n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *\n\t *   return result;\n\t * };\n\t *\n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *\n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *\n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t *\n\t * Variable: STEPSIZE\n\t *\n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t *\n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t *\n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t *\n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t *\n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\n\t/**\n\t * Function: isEmpty\n\t *\n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\n\t/**\n\t * Function: cut\n\t *\n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t *\n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t *\n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t *\n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t *\n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t *\n\t * Parameters:\n\t *\n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t *\n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t *\n\t * Parameters:\n\t *\n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\n\t\treturn cells;\n\t}\n\n};\n\n__mxOutput.mxClipboard = typeof mxClipboard !== 'undefined' ? mxClipboard : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n *\n * Basic window inside a document.\n *\n * Examples:\n *\n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true);\n * (end)\n *\n * Creating a window that contains an iframe.\n *\n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n *\n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n *\n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n *\n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n *\n * Or the following event handler can be used:\n *\n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n *\n * To keep a window inside the current window:\n *\n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *\n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *\n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *\n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *\n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n *\n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MINIMIZE\n *\n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.NORMALIZE\n *\n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *\n * Event: mxEvent.ACTIVATE\n *\n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n *\n * Event: mxEvent.SHOW\n *\n * Fires after the window is shown. This event has no properties.\n *\n * Event: mxEvent.HIDE\n *\n * Fires after the window is hidden. This event has no properties.\n *\n * Event: mxEvent.CLOSE\n *\n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.DESTROY\n *\n * Fires before the window is destroyed. This event has no properties.\n *\n * Constructor: mxWindow\n *\n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n *\n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n *\n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n *\n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n *\n * Parameters:\n *\n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n *\n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n *\n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\n/**\n * Variable: normalizeImage\n *\n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\n/**\n * Variable: maximizeImage\n *\n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: normalizeImage\n *\n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n *\n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n *\n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n *\n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n *\n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n *\n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n *\n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n *\n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px';\n\t\t}\n\n\t\tthis.table.style.width = width + 'px';\n\t}\n\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\n\t\tthis.table.style.height = height + 'px';\n\t}\n\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n *\n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\n\t\tchild = next;\n\t}\n\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n *\n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n *\n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n *\n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n *\n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n *\n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: setResizable\n *\n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n *\n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\n/**\n * Function: setSize\n *\n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\n/**\n * Function: setMinimizable\n *\n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n *\n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n *\n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\n\tthis.buttons.appendChild(this.minimize);\n\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\n\t\t\tvar minSize = this.getMinimumSize();\n\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\n\t\tmxEvent.consume(evt);\n\t});\n\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\n/**\n * Function: setMaximizable\n *\n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n *\n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\n\tthis.buttons.appendChild(this.maximize);\n\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\n/**\n * Function: installMoveHandler\n *\n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n *\n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n *\n * Sets the image associated with the window.\n *\n * Parameters:\n *\n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n *\n * Sets the image associated with the window.\n *\n * Parameters:\n *\n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n *\n * Parameters:\n *\n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n\n__mxOutput.mxWindow = typeof mxWindow !== 'undefined' ? mxWindow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n *\n * A simple class for creating HTML forms.\n *\n * Constructor: mxForm\n *\n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n *\n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n *\n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n *\n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n *\n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n *\n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n *\n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n *\n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n *\n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n *\n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n *\n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\n\treturn input;\n};\n\n__mxOutput.mxForm = typeof mxForm !== 'undefined' ? mxForm : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n *\n * Constructor: mxImage\n *\n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n\n__mxOutput.mxImage = typeof mxImage !== 'undefined' ? mxImage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n *\n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n *\n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n *\n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n *\n * Constructor: mxDivResizer\n *\n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n *\n * Parameters:\n *\n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n *\n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n *\n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n *\n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n *\n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n *\n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n *\n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n\n__mxOutput.mxDivResizer = typeof mxDivResizer !== 'undefined' ? mxDivResizer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n *\n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n *\n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n *\n * Constructor: mxDragSource\n *\n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n *\n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n *\n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n *\n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n *\n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n *\n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n *\n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n *\n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n *\n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n *\n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n *\n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n *\n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n *\n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n *\n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n *\n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n *\n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n *\n * (code)\n * var mouseDown = dragSource.mouseDown;\n *\n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n *\n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n *\n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n *\n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n *\n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n *\n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n *\n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\n\t\tthis.currentGraph = graph;\n\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n *\n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n *\n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n *\n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n *\n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\n\t\tthis.previewElement = null;\n\t}\n\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n *\n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n *\n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n\n__mxOutput.mxDragSource = typeof mxDragSource !== 'undefined' ? mxDragSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n *\n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n *\n * Event: mxEvent.SELECT\n *\n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n *\n * Constructor: mxToolbar\n *\n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n *\n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n *\n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n *\n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n *\n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n *\n * Parameters:\n *\n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\n\t\t\tvar last = this.currentImg;\n\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\n\treturn img;\n};\n\n/**\n * Function: addCombo\n *\n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n *\n * Parameters:\n *\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\n\tthis.container.appendChild(div);\n\n\treturn select;\n};\n\n/**\n * Function: addCombo\n *\n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n *\n * Parameters:\n *\n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\n\tthis.container.appendChild(select);\n\n\treturn select;\n};\n\n/**\n * Function: addOption\n *\n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n *\n * Parameters:\n *\n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\n\tcombo.appendChild(option);\n\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n *\n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\n\t\tthis.selectedMode = img;\n\n\t\tvar tmp = img.altIcon;\n\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\n\tthis.container.appendChild(img);\n\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\n\treturn img;\n};\n\n/**\n * Function: addMode\n *\n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n *\n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n *\n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n *\n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n *\n * Adds the specifies image as a separator.\n *\n * Parameters:\n *\n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n *\n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n *\n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n *\n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n\n__mxOutput.mxToolbar = typeof mxToolbar !== 'undefined' ? mxToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n *\n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n *\n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n *\n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n *\n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n *\n * Event: mxEvent.EXECUTED\n *\n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.START_EDIT\n *\n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n *\n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n *\n * Constructor: mxUndoableEdit\n *\n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n *\n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n *\n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n *\n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n *\n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n *\n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n *\n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n *\n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n *\n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n *\n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n *\n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n *\n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\n\tthis.notify();\n};\n\n/**\n * Function: redo\n *\n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\n\tthis.notify();\n};\n\n__mxOutput.mxUndoableEdit = typeof mxUndoableEdit !== 'undefined' ? mxUndoableEdit : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n *\n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n *\n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n *\n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n *\n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n *\n * Event: mxEvent.CLEAR\n *\n * Fires after <clear> was invoked. This event has no properties.\n *\n * Event: mxEvent.UNDO\n *\n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n *\n * Event: mxEvent.REDO\n *\n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n *\n * Event: mxEvent.ADD\n *\n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n *\n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n *\n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n *\n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n *\n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n *\n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n *\n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n *\n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n *\n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n *\n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n\n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n\n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n *\n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n *\n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n\n__mxOutput.mxUndoManager = typeof mxUndoManager !== 'undefined' ? mxUndoManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n *\n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n *\n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n *\n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n *\n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n *\n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n *\n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n *\n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n *\n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n *\n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n},\n\n/**\n * Function: setBaseDomain\n *\n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n},\n\n/**\n * Function: isRelativeUrl\n *\n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://';\n};\n\n/**\n * Function: convert\n *\n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\n\treturn url;\n};\n\n__mxOutput.mxUrlConverter = typeof mxUrlConverter !== 'undefined' ? mxUrlConverter : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\n\tgraph.addMouseListener(this.mouseListener);\n\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n *\n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n *\n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n *\n * Specifies if mouse events outside of the component should be handled. Default is true.\n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n *\n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n\n__mxOutput.mxPanningManager = typeof mxPanningManager !== 'undefined' ? mxPanningManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n *\n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n *\n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *\n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n *\n * Constructor: mxPopupMenu\n *\n * Constructs a popupmenu.\n *\n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n *\n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n *\n * Specifies the zIndex for the popupmenu and its shadow. Default is 1006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n *\n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n *\n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n *\n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n *\n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n *\n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n *\n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n *\n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n *\n * Parameters:\n *\n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n *\n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n *\n * Paramters:\n *\n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\n\ttr.appendChild(col1);\n\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\n\t\ttr.appendChild(col3);\n\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (document.selection != null && (mxClient.IS_QUIRKS || document.documentMode == 8))\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t})\n\t\t);\n\t}\n\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n *\n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n *\n * Parameters:\n *\n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\n\tparent.div.appendChild(parent.table);\n\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n *\n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n *\n * Parameters:\n *\n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\n\t\ttr.appendChild(col1);\n\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\n\t\ttr.appendChild(col2);\n\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n *\n * Shows the popup menu for the given event and cell.\n *\n * Example:\n *\n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n *\n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n *\n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n *\n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n *\n * Removes all submenus inside the given parent.\n *\n * Parameters:\n *\n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxPopupMenu = typeof mxPopupMenu !== 'undefined' ? mxPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n *\n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n *\n * Example:\n *\n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n *\n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n *\n * graph - Reference to the enclosing graph.\n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n *\n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n *\n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n *\n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n *\n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n *\n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n *\n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n *\n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation\n * updates <enabled>.\n *\n * Parameters:\n *\n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n *\n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\n\tthis.graph = graph;\n\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n *\n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n *\n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n *\n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n *\n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxAutoSaveManager = typeof mxAutoSaveManager !== 'undefined' ? mxAutoSaveManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n *\n * Implements a basic animation in JavaScript.\n *\n * Constructor: mxAnimation\n *\n * Constructs an animation.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n *\n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n *\n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n *\n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n\n__mxOutput.mxAnimation = typeof mxAnimation !== 'undefined' ? mxAnimation : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n *\n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n *\n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *\n *   morph.startAnimation();\n * }\n * (end)\n *\n * Constructor: mxMorphing\n *\n * Constructs an animation.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n *\n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n *\n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n *\n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n *\n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n *\n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\n\tthis.show(move);\n\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\n\treturn result;\n};\n\n__mxOutput.mxMorphing = typeof mxMorphing !== 'undefined' ? mxMorphing : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n *\n * To add a new image bundle to an existing graph, the following code is used:\n *\n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n *\n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n *\n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n *\n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n *\n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n *\n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n *\n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n *\n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Function: putImage\n *\n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n *\n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\n\treturn result;\n};\n\n__mxOutput.mxImageBundle = typeof mxImageBundle !== 'undefined' ? mxImageBundle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n *\n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n *\n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n *\n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n *\n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n *\n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n *\n * Constructor: mxImageExport\n *\n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n *\n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n *\n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: drawState\n *\n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n *\n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n *\n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n *\n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.shape.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n *\n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.text.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n *\n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n__mxOutput.mxImageExport = typeof mxImageExport !== 'undefined' ? mxImageExport : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n *\n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t *\n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\n\tthis.reset();\n};\n\n/**\n * Variable: state\n *\n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n *\n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n *\n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n *\n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n *\n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n *\n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n *\n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n *\n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n *\n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n *\n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n *\n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n *\n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n *\n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n *\n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n *\n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n *\n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n *\n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n *\n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n *\n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n *\n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n *\n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n *\n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n *\n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n *\n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n *\n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n *\n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n *\n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n *\n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n *\n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n *\n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n *\n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n *\n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n *\n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n *\n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n *\n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n *\n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n *\n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontColor\n *\n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontColor\n *\n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n *\n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n *\n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n *\n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n *\n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n *\n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n *\n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n *\n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n *\n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n *\n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n *\n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n *\n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n *\n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n *\n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6)\n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n *\n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n *\n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n\n__mxOutput.mxAbstractCanvas2D = typeof mxAbstractCanvas2D !== 'undefined' ? mxAbstractCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n *\n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>,\n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n *\n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n *\n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t *\n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n *\n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n *\n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n *\n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n *\n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n *\n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n *\n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n *\n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n *\n * Scales the output.\n *\n * Parameters:\n *\n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n *\n * Translates the output.\n *\n * Parameters:\n *\n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n *\n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n *\n * Parameters:\n *\n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n *\n * Sets the current alpha.\n *\n * Parameters:\n *\n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n *\n * Sets the current fill alpha.\n *\n * Parameters:\n *\n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n *\n * Sets the current stroke alpha.\n *\n * Parameters:\n *\n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n *\n * Sets the current fill color.\n *\n * Parameters:\n *\n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n *\n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n *\n * Parameters:\n *\n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n *\n * Sets the current stroke color.\n *\n * Parameters:\n *\n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n *\n * Sets the current stroke width.\n *\n * Parameters:\n *\n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n *\n * Enables or disables dashed lines.\n *\n * Parameters:\n *\n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n *\n * Sets the current dash pattern. Default is '3 3'.\n *\n * Parameters:\n *\n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n *\n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n *\n * Parameters:\n *\n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n *\n * Sets the line join. Default is 'miter'.\n *\n * Parameters:\n *\n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n *\n * Sets the miter limit. Default is 10.\n *\n * Parameters:\n *\n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n *\n * Sets the current font color. Default is '#000000'.\n *\n * Parameters:\n *\n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n *\n * Sets the current font background color.\n *\n * Parameters:\n *\n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n *\n * Sets the current font border color.\n *\n * Parameters:\n *\n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n *\n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n *\n * Parameters:\n *\n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n *\n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n *\n * Parameters:\n *\n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n *\n * Sets the current font style.\n *\n * Parameters:\n *\n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n *\n * Enables or disables shadows.\n *\n * Parameters:\n *\n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n *\n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n *\n * Parameters:\n *\n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n *\n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n *\n * Parameters:\n *\n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\n};\n\n/**\n * Function: setShadowOffset\n *\n * Sets the current shadow offset.\n *\n * Parameters:\n *\n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\n};\n\n/**\n * Function: rect\n *\n * Puts a rectangle into the drawing buffer.\n *\n * Parameters:\n *\n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n *\n * Puts a rounded rectangle into the drawing buffer.\n *\n * Parameters:\n *\n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n *\n * Puts an ellipse into the drawing buffer.\n *\n * Parameters:\n *\n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n *\n * Paints an image.\n *\n * Parameters:\n *\n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n *\n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n *\n * Moves the current path the given point.\n *\n * Parameters:\n *\n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n *\n * Draws a line to the given coordinates.\n *\n * Parameters:\n *\n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n *\n * Adds a quadratic curve to the current path.\n *\n * Parameters:\n *\n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n *\n * Adds a bezier curve to the current path.\n *\n * Parameters:\n *\n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n *\n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n *\n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n *\n * Parameters:\n *\n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\n\t\telem.setAttribute('format', format);\n\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n *\n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n *\n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n *\n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n\n__mxOutput.mxXmlCanvas2D = typeof mxXmlCanvas2D !== 'undefined' ? mxXmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n *\n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n *\n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n *\n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n *\n * svgDoc.appendChild(root);\n *\n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n *\n * A description of the public API is available in <mxXmlCanvas2D>.\n *\n * To disable anti-aliasing in the output, use the following code.\n *\n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n *\n * Or set the respective attribute in the SVG element directly.\n *\n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n *\n * Parameters:\n *\n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t *\n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t *\n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t *\n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\n\t/**\n\t * Variable: styleEnabled\n\t *\n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\n\tvar svg = null;\n\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n})();\n\n/**\n * Variable: path\n *\n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n *\n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n *\n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n *\n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n *\n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n *\n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n *\n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n *\n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n *\n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n *\n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n *\n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: blockImagePointerEvents\n *\n * Specifies if a transparent rectangle should be added on top of images to absorb\n * all pointer events. Default is false. This is only needed in Firefox to disable\n * control-clicks on images.\n */\nmxSvgCanvas2D.prototype.blockImagePointerEvents = false;\n\n/**\n * Variable: lineHeightCorrection\n *\n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n *\n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n *\n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n *\n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n *\n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n *\n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\n\treturn href;\n};\n\n/**\n * Function: reset\n *\n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n *\n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\n\treturn style;\n};\n\n/**\n * Function: createElement\n *\n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateContent\n *\n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tif (this.foAltText != null)\n\t{\n\t\tvar s = this.state;\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(w / 2));\n\t\talt.setAttribute('y', Math.round((h + s.fontSize) / 2));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('text-anchor', 'middle');\n\t\talt.setAttribute('font-size', s.fontSize + 'px');\n\t\t// Quotes are workaround for font name \"m+\"\n\t\talt.setAttribute('font-family', '\\'' + s.fontFamily + '\\'');\n\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', 'underline');\n\t\t}\n\n\t\tmxUtils.write(alt, this.foAltText);\n\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n *\n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n *\n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n *\n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n *\n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n *\n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(String(s.fillColor), String(s.gradientColor),\n\t\t\t\ts.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\n\t\t\tif (!mxClient.IS_CHROME_APP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t\t{\n\t\t\t\t// Workaround for potential base tag and brackets must be escaped\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', String(s.fillColor).toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n *\n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n *\n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', String(s.strokeColor).toLowerCase());\n\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\n\tvar sw = this.getCurrentStrokeWidth();\n\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n *\n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n *\n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n *\n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n *\n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n *\n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\n\t\tvar node = this.createElement('a');\n\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n *\n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n *\n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n *\n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n *\n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n *\n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', Math.round((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', Math.round((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n *\n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\n\tvar tr = this.state.transform || '';\n\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\n\tthis.root.appendChild(node);\n\n\t// Disables control-clicks on images in Firefox to open in new tab\n\t// by putting a rect in the foreground that absorbs all events and\n\t// disabling all pointer-events on the original image tag.\n\tif (this.blockImagePointerEvents)\n\t{\n\t\tnode.setAttribute('style', 'pointer-events:none');\n\n\t\tnode = this.createElement('rect');\n\t\tnode.setAttribute('visibility', 'hidden');\n\t\tnode.setAttribute('pointer-events', 'fill');\n\t\tnode.setAttribute('x', this.format(x * s.scale));\n\t\tnode.setAttribute('y', this.format(y * s.scale));\n\t\tnode.setAttribute('width', this.format(w * s.scale));\n\t\tnode.setAttribute('height', this.format(h * s.scale));\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: convertHtml\n *\n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\n\treturn val;\n};\n\n/**\n * Function: createDiv\n *\n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str, align, valign, style, overflow, whiteSpace)\n{\n\tvar s = this.state;\n\n\t// Inline block for rendering HTML background over SVG in Safari\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\n\t// Quotes are workaround for font name \"m+\"\n\tstyle = 'display:inline-block;font-size:' + s.fontSize + 'px;font-family:\"' + s.fontFamily +\n\t\t'\";color:' + s.fontColor + ';line-height:' + lh + ';' + style;\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle += 'font-weight:bold;';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle += 'font-style:italic;';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle += 'text-decoration:underline;';\n\t}\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle += 'text-align:center;';\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle += 'text-align:right;';\n\t}\n\telse\n\t{\n\t\tstyle += 'text-align:left;';\n\t}\n\n\tvar css = '';\n\n\tif (s.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(s.fontBackgroundColor) + ';';\n\t}\n\n\tif (s.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(s.fontBorderColor) + ';';\n\t}\n\n\tvar val = str;\n\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = this.convertHtml(val);\n\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\t// Workaround for no wrapping in HTML canvas for image\n\t\t\t// export if the inner HTML contains a DIV with width\n\t\t\tif (whiteSpace != null)\n\t\t\t{\n\t\t\t\tcss += 'white-space:' + whiteSpace + ';';\n\t\t\t}\n\n\t\t\t// Inner div always needed to measure wrapped text\n\t\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display:inline-block;text-align:inherit;text-decoration:inherit;' + css + '\">' + val + '</div>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle += css;\n\t\t}\n\t}\n\n\t// Uses DOM API where available. This cannot be used in IE to avoid\n\t// an opening and two (!) closing TBODY tags being added to tables.\n\tif (!mxClient.IS_IE && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\tdiv.setAttribute('style', style);\n\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.appendChild(val);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\t// Serializes for export\n\t\tif (mxUtils.isNode(val) && this.root.ownerDocument != document)\n\t\t{\n\t\t\tval = val.outerHTML;\n\t\t}\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn mxUtils.parseXml('<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"' + style +\n\t\t\t'\">' + val + '</div>').documentElement;\n\t}\n};\n\n/**\n * Invalidates the cached offset size for the given node.\n */\nmxSvgCanvas2D.prototype.invalidateCachedOffsetSize = function(node)\n{\n\tdelete node.firstChild.mxCachedOffsetWidth;\n\tdelete node.firstChild.mxCachedFinalOffsetWidth;\n\tdelete node.firstChild.mxCachedFinalOffsetHeight;\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null &&\n\t\tnode.firstChild.firstChild.firstChild != null)\n\t{\n\t\t// Uses outer group for opacity and transforms to\n\t\t// fix rendering order in Chrome\n\t\tvar group = node.firstChild;\n\t\tvar fo = group.firstChild;\n\t\tvar div = fo.firstChild;\n\n\t\trotation = (rotation != null) ? rotation : 0;\n\n\t\tvar s = this.state;\n\t\tx += s.dx;\n\t\ty += s.dy;\n\n\t\tif (clip)\n\t\t{\n\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\tdiv.style.maxWidth = Math.round(w) + 'px';\n\t\t}\n\t\telse if (overflow == 'fill')\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t\tdiv.style.height = Math.round(h + 1) + 'px';\n\t\t}\n\t\telse if (overflow == 'width')\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\n\t\t\tif (h > 0)\n\t\t\t{\n\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t}\n\t\t}\n\n\t\tif (wrap && w > 0)\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t}\n\n\t\t// Code that depends on the size which is computed after\n\t\t// the element was added to the DOM.\n\t\tvar ow = 0;\n\t\tvar oh = 0;\n\n\t\t// Padding avoids clipping on border and wrapping for differing font metrics on platforms\n\t\tvar padX = 0;\n\t\tvar padY = 2;\n\n\t\tvar sizeDiv = div;\n\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t}\n\n\t\tvar tmp = (group.mxCachedOffsetWidth != null) ? group.mxCachedOffsetWidth : sizeDiv.offsetWidth;\n\t\tow = tmp + padX;\n\n\t\t// Recomputes the height of the element for wrapped width\n\t\tif (wrap && overflow != 'fill')\n\t\t{\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, w);\n\t\t\t}\n\n\t\t\tdiv.style.width = Math.round(ow + 1) + 'px';\n\t\t}\n\n\t\tow = (group.mxCachedFinalOffsetWidth != null) ? group.mxCachedFinalOffsetWidth : sizeDiv.offsetWidth;\n\t\toh = (group.mxCachedFinalOffsetHeight != null) ? group.mxCachedFinalOffsetHeight : sizeDiv.offsetHeight;\n\n\t\tif (this.cacheOffsetSize)\n\t\t{\n\t\t\tgroup.mxCachedOffsetWidth = tmp;\n\t\t\tgroup.mxCachedFinalOffsetWidth = ow;\n\t\t\tgroup.mxCachedFinalOffsetHeight = oh;\n\t\t}\n\n\t\tow += padX;\n\t\toh -= 2;\n\n\t\tif (clip)\n\t\t{\n\t\t\toh = Math.min(oh, h);\n\t\t\tow = Math.min(ow, w);\n\t\t}\n\n\t\tif (overflow == 'width')\n\t\t{\n\t\t\th = oh;\n\t\t}\n\t\telse if (overflow != 'fill')\n\t\t{\n\t\t\tw = ow;\n\t\t\th = oh;\n\t\t}\n\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tdx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx -= w;\n\t\t}\n\n\t\tx += dx;\n\n\t\t// FIXME: LINE_HEIGHT not ideal for all text sizes, fix for export\n\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tdy -= h / 2;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy -= h;\n\t\t}\n\n\t\t// Workaround for rendering offsets\n\t\t// TODO: Check if export needs these fixes, too\n\t\tif (overflow != 'fill' && mxClient.IS_FF && mxClient.IS_WIN)\n\t\t{\n\t\t\tdy -= 2;\n\t\t}\n\n\t\ty += dy;\n\n\t\tvar tr = (s.scale != 1) ? 'scale(' + s.scale + ')' : '';\n\n\t\tif (s.rotation != 0 && this.rotateHtml)\n\t\t{\n\t\t\ttr += 'rotate(' + (s.rotation) + ',' + (w / 2) + ',' + (h / 2) + ')';\n\t\t\tvar pt = this.rotatePoint((x + w / 2) * s.scale, (y + h / 2) * s.scale,\n\t\t\t\ts.rotation, s.rotationCx, s.rotationCy);\n\t\t\tx = pt.x - w * s.scale / 2;\n\t\t\ty = pt.y - h * s.scale / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx *= s.scale;\n\t\t\ty *= s.scale;\n\t\t}\n\n\t\tif (rotation != 0)\n\t\t{\n\t\t\ttr += 'rotate(' + (rotation) + ',' + (-dx) + ',' + (-dy) + ')';\n\t\t}\n\n\t\tgroup.setAttribute('transform', 'translate(' + Math.round(x) + ',' + Math.round(y) + ')' + tr);\n\t\tfo.setAttribute('width', Math.round(Math.max(1, w)));\n\t\tfo.setAttribute('height', Math.round(Math.max(1, h)));\n\t}\n};\n\n/**\n * Function: text\n *\n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\n\t\tvar s = this.state;\n\t\tx += s.dx;\n\t\ty += s.dy;\n\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar style = 'vertical-align:top;';\n\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tstyle += 'overflow:hidden;max-height:' + Math.round(h) + 'px;max-width:' + Math.round(w) + 'px;';\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;height:' + Math.round(h + 1) + 'px;overflow:hidden;';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;';\n\n\t\t\t\tif (h > 0)\n\t\t\t\t{\n\t\t\t\t\tstyle += 'max-height:' + Math.round(h) + 'px;overflow:hidden;';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;white-space:normal;word-wrap:' +\n\t\t\t\t\tmxConstants.WORD_WRAP + ';';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle += 'white-space:nowrap;';\n\t\t\t}\n\n\t\t\t// Uses outer group for opacity and transforms to\n\t\t\t// fix rendering order in Chrome\n\t\t\tvar group = this.createElement('g');\n\n\t\t\tif (s.alpha < 1)\n\t\t\t{\n\t\t\t\tgroup.setAttribute('opacity', s.alpha);\n\t\t\t}\n\n\t\t\tvar fo = this.createElement('foreignObject');\n\t\t\tfo.setAttribute('style', 'overflow:visible;');\n\t\t\tfo.setAttribute('pointer-events', 'all');\n\n\t\t\tvar div = this.createDiv(str, align, valign, style, overflow, (wrap && w > 0) ? 'normal' : null);\n\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tgroup.appendChild(fo);\n\t\t\tthis.root.appendChild(group);\n\n\t\t\t// Code that depends on the size which is computed after\n\t\t\t// the element was added to the DOM.\n\t\t\tvar ow = 0;\n\t\t\tvar oh = 0;\n\n\t\t\t// Padding avoids clipping on border and wrapping for differing font metrics on platforms\n\t\t\tvar padX = 2;\n\t\t\tvar padY = 2;\n\n\t\t\t// NOTE: IE is always export as it does not support foreign objects\n\t\t\tif (mxClient.IS_IE && (document.documentMode == 9 || !mxClient.IS_SVG))\n\t\t\t{\n\t\t\t\t// Handles non-standard namespace for getting size in IE\n\t\t\t\tvar clone = document.createElement('div');\n\n\t\t\t\tclone.style.cssText = div.getAttribute('style');\n\t\t\t\tclone.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\t\tclone.style.position = 'absolute';\n\t\t\t\tclone.style.visibility = 'hidden';\n\n\t\t\t\t// Inner DIV is needed for text measuring\n\t\t\t\tvar div2 = document.createElement('div');\n\t\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\t\tdiv2.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv2.innerHTML = (mxUtils.isNode(str)) ? str.outerHTML : str;\n\t\t\t\tclone.appendChild(div2);\n\n\t\t\t\tdocument.body.appendChild(clone);\n\n\t\t\t\t// Workaround for different box models\n\t\t\t\tif (document.documentMode != 8 && document.documentMode != 9 && s.fontBorderColor != null)\n\t\t\t\t{\n\t\t\t\t\tpadX += 2;\n\t\t\t\t\tpadY += 2;\n\t\t\t\t}\n\n\t\t\t\tif (wrap && w > 0)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div2.offsetWidth;\n\n\t\t\t\t\t// Workaround for adding padding twice in IE8/IE9 standards mode if label is wrapped\n\t\t\t\t\tpadDx = 0;\n\n\t\t\t\t\t// For export, if no wrapping occurs, we add a large padding to make\n\t\t\t\t\t// sure there is no wrapping even if the text metrics are different.\n\t\t\t\t\t// This adds support for text metrics on different operating systems.\n\t\t\t\t\t// Disables wrapping if text is not wrapped for given width\n\t\t\t\t\tif (!clip && wrap && w > 0 && this.root.ownerDocument != document && overflow != 'fill')\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ws = clone.style.whiteSpace;\n\t\t\t\t\t\tdiv2.style.whiteSpace = 'nowrap';\n\n\t\t\t\t\t\tif (tmp < div2.offsetWidth)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tclone.style.whiteSpace = ws;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (clip)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t\t\t}\n\n\t\t\t\t\tclone.style.width = tmp + 'px';\n\n\t\t\t\t\t// Padding avoids clipping on border\n\t\t\t\t\tow = div2.offsetWidth + padX + padDx;\n\t\t\t\t\toh = div2.offsetHeight + padY;\n\n\t\t\t\t\t// Overrides the width of the DIV via XML DOM by using the\n\t\t\t\t\t// clone DOM style, getting the CSS text for that and\n\t\t\t\t\t// then setting that on the DIV via setAttribute\n\t\t\t\t\tclone.style.display = 'inline-block';\n\t\t\t\t\tclone.style.position = '';\n\t\t\t\t\tclone.style.visibility = '';\n\t\t\t\t\tclone.style.width = ow + 'px';\n\n\t\t\t\t\tdiv.setAttribute('style', clone.style.cssText);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Padding avoids clipping on border\n\t\t\t\t\tow = div2.offsetWidth + padX;\n\t\t\t\t\toh = div2.offsetHeight + padY;\n\t\t\t\t}\n\n\t\t\t\tclone.parentNode.removeChild(clone);\n\t\t\t\tfo.appendChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Uses document for text measuring during export\n\t\t\t\tif (this.root.ownerDocument != document)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfo.appendChild(div);\n\t\t\t\t}\n\n\t\t\t\tvar sizeDiv = div;\n\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\n\t\t\t\t\tif (wrap && div.style.wordWrap == 'break-word')\n\t\t\t\t\t{\n\t\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar tmp = sizeDiv.offsetWidth;\n\n\t\t\t\t// Workaround for text measuring in hidden containers\n\t\t\t\tif (tmp == 0 && div.parentNode == fo)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\t\tdocument.body.appendChild(div);\n\n\t\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\t}\n\n\t\t\t\tif (this.cacheOffsetSize)\n\t\t\t\t{\n\t\t\t\t\tgroup.mxCachedOffsetWidth = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Disables wrapping if text is not wrapped for given width\n\t\t\t\tif (!clip && wrap && w > 0 && this.root.ownerDocument != document &&\n\t\t\t\t\toverflow != 'fill' && overflow != 'width')\n\t\t\t\t{\n\t\t\t\t\tvar ws = div.style.whiteSpace;\n\t\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\n\t\t\t\t\tif (tmp < sizeDiv.offsetWidth)\n\t\t\t\t\t{\n\t\t\t\t\t\tdiv.style.whiteSpace = ws;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tow = tmp + padX - 1;\n\n\t\t\t\t// Recomputes the height of the element for wrapped width\n\t\t\t\tif (wrap && overflow != 'fill' && overflow != 'width')\n\t\t\t\t{\n\t\t\t\t\tif (clip)\n\t\t\t\t\t{\n\t\t\t\t\t\tow = Math.min(ow, w);\n\t\t\t\t\t}\n\n\t\t\t\t\tdiv.style.width = ow + 'px';\n\t\t\t\t}\n\n\t\t\t\tow = sizeDiv.offsetWidth;\n\t\t\t\toh = sizeDiv.offsetHeight;\n\n\t\t\t\tif (this.cacheOffsetSize)\n\t\t\t\t{\n\t\t\t\t\tgroup.mxCachedFinalOffsetWidth = ow;\n\t\t\t\t\tgroup.mxCachedFinalOffsetHeight = oh;\n\t\t\t\t}\n\n\t\t\t\toh -= padY;\n\n\t\t\t\tif (div.parentNode != fo)\n\t\t\t\t{\n\t\t\t\t\tfo.appendChild(div);\n\t\t\t\t\tdiv.style.visibility = '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\toh = Math.min(oh, h);\n\t\t\t\tow = Math.min(ow, w);\n\t\t\t}\n\n\t\t\tif (overflow == 'width')\n\t\t\t{\n\t\t\t\th = oh;\n\t\t\t}\n\t\t\telse if (overflow != 'fill')\n\t\t\t{\n\t\t\t\tw = ow;\n\t\t\t\th = oh;\n\t\t\t}\n\n\t\t\tif (s.alpha < 1)\n\t\t\t{\n\t\t\t\tgroup.setAttribute('opacity', s.alpha);\n\t\t\t}\n\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx -= w;\n\t\t\t}\n\n\t\t\tx += dx;\n\n\t\t\t// FIXME: LINE_HEIGHT not ideal for all text sizes, fix for export\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tdy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tdy -= h;\n\t\t\t}\n\n\t\t\t// Workaround for rendering offsets\n\t\t\t// TODO: Check if export needs these fixes, too\n\t\t\t//if (this.root.ownerDocument == document)\n\t\t\tif (overflow != 'fill' && mxClient.IS_FF && mxClient.IS_WIN)\n\t\t\t{\n\t\t\t\tdy -= 2;\n\t\t\t}\n\n\t\t\ty += dy;\n\n\t\t\tvar tr = (s.scale != 1) ? 'scale(' + s.scale + ')' : '';\n\n\t\t\tif (s.rotation != 0 && this.rotateHtml)\n\t\t\t{\n\t\t\t\ttr += 'rotate(' + (s.rotation) + ',' + (w / 2) + ',' + (h / 2) + ')';\n\t\t\t\tvar pt = this.rotatePoint((x + w / 2) * s.scale, (y + h / 2) * s.scale,\n\t\t\t\t\ts.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\tx = pt.x - w * s.scale / 2;\n\t\t\t\ty = pt.y - h * s.scale / 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\ttr += 'rotate(' + (rotation) + ',' + (-dx) + ',' + (-dy) + ')';\n\t\t\t}\n\n\t\t\tgroup.setAttribute('transform', 'translate(' + (Math.round(x) + this.foOffset) + ',' +\n\t\t\t\t(Math.round(y) + this.foOffset) + ')' + tr);\n\t\t\tfo.setAttribute('width', Math.round(Math.max(1, w)));\n\t\t\tfo.setAttribute('height', Math.round(Math.max(1, h)));\n\n\t\t\t// Adds alternate content if foreignObject not supported in viewer\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\n\t\t\t\tif (alt != null)\n\t\t\t\t{\n\t\t\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\t\t\tvar sw = this.createElement('switch');\n\t\t\t\t\tsw.appendChild(fo);\n\t\t\t\t\tsw.appendChild(alt);\n\t\t\t\t\tgroup.appendChild(sw);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n *\n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\n\tclip.appendChild(rect);\n\n\treturn clip;\n};\n\n/**\n * Function: text\n *\n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\n\t\tif (!mxClient.IS_CHROME_APP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 2;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n *\n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', '\\'' + s.fontFamily + '\\'');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tnode.setAttribute('text-decoration', 'underline');\n\t}\n};\n\n/**\n * Function: addTextBackground\n *\n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\t// Quotes are workaround for font name \"m+\"\n\t\t\tdiv.style.fontFamily = '\"' + s.fontFamily + '\"';\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n *\n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n *\n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n *\n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxSvgCanvas2D = typeof mxSvgCanvas2D !== 'undefined' ? mxSvgCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n *\n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n *\n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *\n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n *\n * To disable anti-aliasing in the output, use the following code.\n *\n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n *\n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t *\n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n *\n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n *\n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n *\n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n *\n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n *\n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n *\n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n *\n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n *\n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n *\n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n *\n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n *\n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n *\n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\n\treturn fill;\n};\n\n/**\n * Function: createFill\n *\n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\n\t}\n\n\treturn fill;\n};\n/**\n * Function: createStroke\n *\n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n *\n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: createShadow\n *\n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n *\n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n *\n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n *\n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n *\n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n *\n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\n};\n\n/**\n * Function: createRect\n *\n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\n\treturn n;\n};\n\n/**\n * Function: rect\n *\n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n *\n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n *\n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n *\n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n *\n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(state.fontBackgroundColor) + ';';\n\t}\n\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(state.fontBorderColor) + ';';\n\t}\n\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\n\treturn div;\n};\n\n/**\n * Function: text\n *\n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\n\t\t\t\tvar sizeDiv = div;\n\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\n\t\t\t\th = oh;\n\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n *\n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\n\tnode.appendChild(path);\n\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n *\n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n *\n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n *\n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxVmlCanvas2D = typeof mxVmlCanvas2D !== 'undefined' ? mxVmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n *\n * Constructor: mxGuide\n *\n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n *\n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Variable: rounded\n *\n * Specifies if rounded coordinates should be used. Default is false.\n */\nmxGuide.prototype.rounded = false;\n\n/**\n * Function: setStates\n *\n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n *\n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n *\n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function()\n{\n\treturn this.graph.gridSize / 2;\n};\n\n/**\n * Function: createGuideShape\n *\n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n *\n * Parameters:\n *\n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\n\treturn guide;\n};\n\n/**\n * Function: move\n *\n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar trx = this.graph.getView().translate;\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\n\t\tvar tt = this.getGuideTolerance();\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state)\n\t\t{\n\t\t\tx += this.graph.panDx;\n\t\t\tvar override = false;\n\n\t\t\tif (Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(x - left) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.x;\n\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.x - bounds.width;\n\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\toverride = true;\n\t\t\t}\n\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = Math.round(x - this.graph.panDx);\n\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y, state)\n\t\t{\n\t\t\ty += this.graph.panDy;\n\t\t\tvar override = false;\n\n\t\t\tif (Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(y - top) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.y;\n\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.y - bounds.height;\n\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\toverride = true;\n\t\t\t}\n\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = Math.round(y - this.graph.panDy);\n\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state);\n\t\t\t\t\tsnapX.call(this, state.x, state);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state);\n\t\t\t\t}\n\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state);\n\t\t\t\t\tsnapY.call(this, state.y, state);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells that are off-grid back to the grid on move\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tif (!overrideX)\n\t\t\t{\n\t\t\t\tvar tx = bounds.x - (this.graph.snap(bounds.x /\n\t\t\t\t\tscale - trx.x) + trx.x) * scale;\n\t\t\t\tdx = this.graph.snap(dx / scale) * scale - tx;\n\t\t\t}\n\n\t\t\tif (!overrideY)\n\t\t\t{\n\t\t\t\tvar ty = bounds.y - (this.graph.snap(bounds.y /\n\t\t\t\t\tscale - trx.y) + trx.y) * scale;\n\t\t\t\tdy = this.graph.snap(dy / scale) * scale - ty;\n\t\t\t}\n\t\t}\n\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + dy - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + dy - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy), new mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + dx - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + dx - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY), new mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\n\t\tdelta = this.getDelta(bounds, stateX, dx, stateY, dy)\n\t}\n\n\treturn delta;\n};\n\n/**\n * Function: hide\n *\n * Hides all current guides.\n */\nmxGuide.prototype.getDelta = function(bounds, stateX, dx, stateY, dy)\n{\n\t// Round to pixels for virtual states (eg. page guides)\n\tif (this.rounded || (stateX != null && stateX.cell == null))\n\t{\n\t\tdx = Math.floor(bounds.x + dx) - bounds.x;\n\t}\n\n\tif (this.rounded || (stateY != null && stateY.cell == null))\n\t{\n\t\tdy = Math.floor(bounds.y + dy) - bounds.y;\n\t}\n\n\treturn new mxPoint(dx, dy);\n};\n\n/**\n * Function: hide\n *\n * Hides all current guides.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n *\n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n\n__mxOutput.mxGuide = typeof mxGuide !== 'undefined' ? mxGuide : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n *\n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape;\n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n *\n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n *\n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n *\n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n\n/**\n * Variable: state\n *\n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n *\n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n *\n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n *\n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n *\n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n *\n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n *\n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n *\n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n *\n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n *\n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n *\n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\n\tif (this.visible && this.checkBounds())\n\t{\n\t\tthis.node.style.visibility = 'visible';\n\t\tthis.clear();\n\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.visibility = 'hidden';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n *\n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n *\n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n *\n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\n\tvar m = this.getLabelMargins(bounds);\n\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n *\n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n *\n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\n\t\tthis.paint(canvas);\n\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n *\n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n *\n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tcanvas.blockImagePointerEvents = mxClient.IS_FF;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n *\n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n *\n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n *\n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: paint\n *\n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n *\n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n *\n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n *\n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n *\n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n *\n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n *\n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n *\n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n *\n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n *\n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n *\n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n *\n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n *\n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n *\n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n *\n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n *\n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n *\n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n *\n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n *\n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n *\n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n *\n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n *\n * Sets a transparent background CSS style to catch all events.\n *\n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n *\n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\n\t\tthis.node = null;\n\t}\n\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n\n__mxOutput.mxShape = typeof mxShape !== 'undefined' ? mxShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n *\n * shape:\n *\n * The outer element is *shape*, that has attributes:\n *\n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n *\n * connections:\n *\n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n *\n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n *\n * background and foreground:\n *\n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n *\n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n *\n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n *\n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n *\n * State:\n *\n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n *\n * Styling:\n *\n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n *\n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n *\n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n *\n * *fillalpha* defines the degree of fill transparency used between 1.0 for fully\n * opaque and 0.0 for fully transparent.\n *\n * *strokealpha* defines the degree of stroke transparency used between 1.0 for\n * fully opaque and 0.0 for fully transparent.\n *\n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n *\n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n *\n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n *\n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n *\n * For font styling there are.\n *\n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n *\n * Drawing:\n *\n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n *\n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n *\n * Complex drawing:\n *\n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n *\n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n *\n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n *\n * Text:\n *\n * *text* elements have the following attributes.\n *\n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n *\n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n *\n * Images:\n *\n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n *\n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n *\n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n *\n * Sub-shapes:\n *\n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n *\n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n *\n * Constructor: mxStencil\n *\n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n *\n * Parameters:\n *\n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxStencil, mxShape);\n\n/**\n * Variable: defaultLocalized\n *\n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n *\n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n *\n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n *\n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\t// Draws a transparent rectangle for catching events\n\tif (shape.style != null && mxUtils.getValue(shape.style, mxConstants.STYLE_POINTER_EVENTS, '0') == '1')\n\t{\n\t\tcanvas.setStrokeColor(mxConstants.NONE);\n\t\tcanvas.rect(x, y, w, h);\n\t\tcanvas.stroke();\n\t\tcanvas.setStrokeColor(shape.stroke);\n\t}\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n *\n * Parameters:\n *\n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\n\t\t\tvar parseRegularly = true;\n\n\t\t\tif (node.getAttribute('rounded') == '1')\n\t\t\t{\n\t\t\t\tparseRegularly = false;\n\n\t\t\t\tvar arcSize = Number(node.getAttribute('arcSize'));\n\t\t\t\tvar pointCount = 0;\n\t\t\t\tvar segs = [];\n\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childName = childNode.nodeName;\n\n\t\t\t\t\t\tif (childName == 'move' || childName == 'line')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childName == 'move' || segs.length == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsegs.push([]);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsegs[segs.length - 1].push(new mxPoint(x0 + Number(childNode.getAttribute('x')) * sx,\n\t\t\t\t\t\t\t\ty0 + Number(childNode.getAttribute('y')) * sy));\n\t\t\t\t\t\t\tpointCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//We only support move and line for rounded corners\n\t\t\t\t\t\t\tparseRegularly = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tif (!parseRegularly && pointCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < segs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar close = false, ps = segs[i][0], pe = segs[i][segs[i].length - 1];\n\n\t\t\t\t\t\tif (ps.x == pe.x && ps.y == pe.y)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsegs[i].pop();\n\t\t\t\t\t\t\tclose = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.addPoints(canvas, segs[i], true, arcSize, close);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparseRegularly = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parseRegularly)\n\t\t\t{\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t\t}\n\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trotation -= node.getAttribute('rotation');\n\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fillalpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'strokealpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n\n__mxOutput.mxStencil = typeof mxStencil !== 'undefined' ? mxStencil : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n *\n * Code to add stencils.\n *\n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n *\n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *\n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t *\n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\n\t/**\n\t * Function: addStencil\n\t *\n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\n\t/**\n\t * Function: getStencil\n\t *\n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n\n__mxOutput.mxStencilRegistry = typeof mxStencilRegistry !== 'undefined' ? mxStencilRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t *\n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t *\n\t * Variable: markers\n\t *\n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\n\t/**\n\t * Function: addMarker\n\t *\n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\n\t/**\n\t * Function: createMarker\n\t *\n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n\n__mxOutput.mxMarker = typeof mxMarker !== 'undefined' ? mxMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n *\n * Example:\n *\n * (code)\n * function SampleShape() { }\n *\n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n *\n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n *\n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n *\n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n *\n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n\n__mxOutput.mxActor = typeof mxActor !== 'undefined' ? mxActor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n *\n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n *\n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n\n__mxOutput.mxCloud = typeof mxCloud !== 'undefined' ? mxCloud : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n *\n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n *\n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n *\n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n *\n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n\n__mxOutput.mxRectangleShape = typeof mxRectangleShape !== 'undefined' ? mxRectangleShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n *\n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n *\n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxEllipse = typeof mxEllipse !== 'undefined' ? mxEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n *\n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *\n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *\n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *\n *   c.fillAndStroke();\n * };\n * (end)\n *\n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n *\n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n *\n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n *\n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n *\n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n\n__mxOutput.mxDoubleEllipse = typeof mxDoubleEllipse !== 'undefined' ? mxDoubleEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n *\n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n *\n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxRhombus = typeof mxRhombus !== 'undefined' ? mxRhombus : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n *\n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n *\n * Parameters:\n *\n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n *\n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n *\n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n *\n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n *\n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tvar prev = c.pointerEventsValue;\n\tc.pointerEventsValue = 'stroke';\n\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n\n\tc.pointerEventsValue = prev;\n};\n\n/**\n * Function: paintLine\n *\n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintLine\n *\n * Paints the line shape.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\n\tc.moveTo(pt.x, pt.y);\n\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n\n__mxOutput.mxPolyline = typeof mxPolyline !== 'undefined' ? mxPolyline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n *\n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n *\n * Parameters:\n *\n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n *\n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxArrow = typeof mxArrow !== 'undefined' ? mxArrow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n *\n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n *\n * Parameters:\n *\n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n *\n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Variable: resetStyles\n *\n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\n\tvar w = this.getEdgeWidth();\n\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n *\n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\ttmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintEdgeShape\n *\n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n *\n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n *\n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n *\n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n *\n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n *\n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n *\n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n *\n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n__mxOutput.mxArrowConnector = typeof mxArrowConnector !== 'undefined' ? mxArrowConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n *\n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n *\n * Constructor: mxText\n *\n * Constructs a new text shape.\n *\n * Parameters:\n *\n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n *\n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n *\n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n *\n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n *\n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n *\n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n *\n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n *\n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n *\n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n *\n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n *\n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n *\n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n *\n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n *\n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n *\n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n *\n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\tvar unscaledWidth = (this.state != null) ? this.state.unscaledWidth : null;\n\n\tif (update)\n\t{\n\t\tif (this.node.firstChild != null && (unscaledWidth == null ||\n\t\t\tthis.lastUnscaledWidth != unscaledWidth))\n\t\t{\n\t\t\tc.invalidateCachedOffsetSize(this.node);\n\t\t}\n\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval =  mxUtils.htmlEntities(val, false);\n\t\t}\n\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\t}\n\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\n\t\tvar dir = this.textDirection;\n\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt, this.overflow,\n\t\t\tthis.clipped, this.getTextRotation(), dir);\n\t}\n\n\t// Needs to invalidate the cached offset widths if the geometry changes\n\tthis.lastUnscaledWidth = unscaledWidth;\n};\n\n/**\n * Function: redraw\n *\n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\n\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t{\n\t\t\t\tthis.updateHtmlFilter();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateHtmlTransform();\n\t\t\t}\n\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null &&\n\t\t\t\tcanvas.invalidateCachedOffsetSize != null)\n\t\t\t{\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n *\n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n *\n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n *\n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\tnode = node.firstChild.firstChild;\n\t\t\t\tow = parseInt(node.getAttribute('width')) * this.scale;\n\t\t\t\toh = parseInt(node.getAttribute('height')) * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n *\n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n *\n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n *\n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n *\n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n *\n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tvar style = this.node.style;\n\n\t// Resets CSS styles\n\tstyle.whiteSpace = 'normal';\n\tstyle.overflow = '';\n\tstyle.width = '';\n\tstyle.height = '';\n\n\tthis.updateValue();\n\tthis.updateFont(this.node);\n\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\n\tthis.offsetWidth = null;\n\tthis.offsetHeight = null;\n\n\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t{\n\t\tthis.updateHtmlFilter();\n\t}\n\telse\n\t{\n\t\tthis.updateHtmlTransform();\n\t}\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ')' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: setInnerHtml\n *\n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\n\t\tsizeDiv = td;\n\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known\n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\n\t\toh = sizeDiv.offsetHeight + 2;\n\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\n\trad %= Math.PI;\n\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + mxUtils.htmlEntities(bg) + ';';\n\t\t\t}\n\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(bd) + ';';\n\t\t\t}\n\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\t// Quotes are workaround for font name \"m+\"\n\tstyle.fontFamily = '\"' + this.family + '\"';\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\telse\n\t{\n\t\tstyle.textDecoration = '';\n\t}\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\n\treturn new mxPoint(dx, dy);\n};\n\n__mxOutput.mxText = typeof mxText !== 'undefined' ? mxText : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n *\n * Implementation of the triangle shape.\n *\n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n *\n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxTriangle = typeof mxTriangle !== 'undefined' ? mxTriangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n *\n * Implementation of the hexagon shape.\n *\n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxHexagon = typeof mxHexagon !== 'undefined' ? mxHexagon : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n *\n * Constructor: mxLine\n *\n * Constructs a new line shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: paintVertexShape\n *\n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar mid = y + h / 2;\n\n\tc.begin();\n\tc.moveTo(x, mid);\n\tc.lineTo(x + w, mid);\n\tc.stroke();\n};\n\n__mxOutput.mxLine = typeof mxLine !== 'undefined' ? mxLine : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n *\n * Constructor: mxImageShape\n *\n * Constructs a new image shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n *\n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n *\n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n *\n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n *\n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n *\n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n\n__mxOutput.mxImageShape = typeof mxImageShape !== 'undefined' ? mxImageShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n *\n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t}\n\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n *\n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n *\n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n *\n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n *\n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\n\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n *\n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\n\t\tnode.src = this.image;\n\n\t\tthis.node.appendChild(node);\n\t}\n};\n\n__mxOutput.mxLabel = typeof mxLabel !== 'undefined' ? mxLabel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n *\n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n *\n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n\n__mxOutput.mxCylinder = typeof mxCylinder !== 'undefined' ? mxCylinder : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n *\n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n *\n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n *\n * Constructor: mxConnector\n *\n * Constructs a new connector shape.\n *\n * Parameters:\n *\n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n *\n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n *\n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\n\t\t// Allow for stroke width in the end point used and the\n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\n\t// Adds marker sizes\n\tvar size = 0;\n\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\n\tbbox.grow(size * this.scale);\n};\n\n__mxOutput.mxConnector = typeof mxConnector !== 'undefined' ? mxConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n *\n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n *\n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getGradientBounds\n *\n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getGradientBounds\n *\n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n *\n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getArcSize\n *\n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getArcSize = function(w, h, start)\n{\n\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\treturn start * f * 3;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\n\tc.translate(x, y);\n\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n\n__mxOutput.mxSwimlane = typeof mxSwimlane !== 'undefined' ? mxSwimlane : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n *\n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <move> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n *\n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n *\n * graph - Enclosing\n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n *\n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n *\n * Empty implementation.\n *\n * Parameters:\n *\n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: execute\n *\n * Executes the layout algorithm for the children of the given parent.\n *\n * Parameters:\n *\n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n *\n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n *\n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n *\n * Parameters:\n *\n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.graph.getCellStyle(cell);\n\n\treturn (style != null) ? style[key] : null;\n};\n\n/**\n * Function: traverse\n *\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n *\n * Example:\n *\n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n *\n * Parameters:\n *\n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n *\n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n *\n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to\n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\n\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n *\n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n *\n * Parameters:\n *\n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n *\n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n *\n * Parameters:\n *\n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n *\n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n *\n * Parameters:\n *\n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n *\n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n *\n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n *\n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n *\n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n *\n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n *\n * Parameters:\n *\n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n *\n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n *\n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n *\n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n *\n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n *\n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n *\n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n *\n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n *\n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n *\n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n *\n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxGraphLayout = typeof mxGraphLayout !== 'undefined' ? mxGraphLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n *\n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n *\n * Example:\n *\n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n *\n * Constructor: mxStackLayout\n *\n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n *\n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n *\n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n *\n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n *\n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n *\n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n *\n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\n/**\n * Variable: resizeParent\n *\n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n *\n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n *\n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n *\n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n *\n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Variable: allowGaps\n *\n * If gaps should be allowed in the stack. Default is false.\n */\nmxStackLayout.prototype.allowGaps = false;\n\n/**\n * Variable: gridSize\n *\n * Grid size for alignment of position and size. Default is 0.\n */\nmxStackLayout.prototype.gridSize = 0;\n\n/**\n * Function: isHorizontal\n *\n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n *\n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\n\t\tvalue /= this.graph.view.scale;\n\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n *\n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\treturn pgeo;\n};\n\n/**\n * Function: getLayoutCells\n *\n * Returns the cells to be layouted.\n */\nmxStackLayout.prototype.getLayoutCells = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(parent);\n\tvar cells = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\n\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t{\n\t\t\tcells.push(child);\n\t\t}\n\t}\n\n\tif (this.allowGaps)\n\t{\n\t\tcells.sort(mxUtils.bind(this, function(c1, c2)\n\t\t{\n\t\t\tvar geo1 = this.graph.getCellGeometry(c1);\n\t\t\tvar geo2 = this.graph.getCellGeometry(c2);\n\n\t\t\treturn (geo1.y == geo2.y) ? 0 : ((geo1.y > geo2.y > 0) ? 1 : -1);\n\t\t}));\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: snap\n *\n * Snaps the given value to the grid size.\n */\nmxStackLayout.prototype.snap = function(value)\n{\n\tif (this.gridSize != null && this.gridSize > 0)\n\t{\n\t\tvalue = Math.max(value, this.gridSize);\n\n\t\tif (value / this.gridSize > 1)\n\t\t{\n\t\t\tvar mod = value % this.gridSize;\n\t\t\tvalue += mod > this.gridSize / 2 ? (this.gridSize - mod) : -mod;\n\t\t}\n\t}\n\n\treturn value;\n};\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>.\n *\n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\n\t\tvar fillValue = null;\n\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest\n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar cells = this.getLayoutCells(parent);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar child = cells[i];\n\t\t\t\tvar geo = model.getGeometry(child);\n\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlast = null;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\tvar sw = 0;\n\n\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar temp = lastValue + this.spacing + Math.floor(sw / 2);\n\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = this.snap(((this.allowGaps) ? Math.max(temp, geo.x) :\n\t\t\t\t\t\t\t\ttemp) - this.marginLeft) + this.marginLeft;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = this.snap(((this.allowGaps) ? Math.max(temp, geo.y) :\n\t\t\t\t\t\t\t\ttemp) - this.marginTop) + this.marginTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = (this.allowGaps && geo.x > x0) ? Math.max(this.snap(geo.x -\n\t\t\t\t\t\t\t\tthis.marginLeft) + this.marginLeft, x0) : x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = (this.allowGaps && geo.y > y0) ? Math.max(this.snap(geo.y -\n\t\t\t\t\t\t\t\tthis.marginTop) + this.marginTop, y0) : y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = this.snap(geo.width);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = this.snap(geo.height);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\tlastChild = child;\n\t\t\t\t\tlast = geo;\n\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>.\n *\n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>.\n *\n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\n\tvar pgeo2 = pgeo.clone();\n\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n\n__mxOutput.mxStackLayout = typeof mxStackLayout !== 'undefined' ? mxStackLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n *\n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n *\n * Example:\n *\n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n *\n * Constructor: mxPartitionLayout\n *\n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n *\n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n *\n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n *\n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n *\n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n *\n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxPartitionLayout = typeof mxPartitionLayout !== 'undefined' ? mxPartitionLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n *\n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n *\n * Example:\n *\n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n *\n * Constructor: mxCompactTreeLayout\n *\n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\n\n/**\n * Variable: resizeParent\n *\n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n *\n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n *\n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n *\n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n *\n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n *\n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n *\n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n *\n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n *\n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n *\n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n *\n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n *\n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n *\n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n *\n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n *\n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n *\n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n *\n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n *\n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n *\n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n *\n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n *\n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n *\n * Parameters:\n *\n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n *\n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>.\n *\n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n *\n * Parameters:\n *\n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar bounds = null;\n\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n *\n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n *\n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n *\n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn node;\n};\n\n/**\n * Function: layout\n *\n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\n\treturn bounds;\n};\n\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\n\tp1.lowerHead = p2.lowerHead;\n\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\n\tvar geo = this.getVertexBounds(cell);\n\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n *\n * Adjust parent cells whose child geometries have changed. The default\n * implementation adjusts the group to just fit around the children with\n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for\n\t\t\t\t//\n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n__mxOutput.mxCompactTreeLayout = typeof mxCompactTreeLayout !== 'undefined' ? mxCompactTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n *\n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n *\n * Example:\n *\n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n *\n * Constructor: mxRadialTreeLayout\n *\n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n *\n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n *\n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n *\n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n *\n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n *\n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n *\n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n *\n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n *\n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n *\n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n *\n * Parameters:\n *\n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>.\n *\n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n *\n * Parameters:\n *\n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\n\tthis.calcRowDims([this.node], 0);\n\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n *\n * Recursive function to calculate the dimensions of each row\n *\n * Parameters:\n *\n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n\n__mxOutput.mxRadialTreeLayout = typeof mxRadialTreeLayout !== 'undefined' ? mxRadialTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n *\n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n *\n * Example:\n *\n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n *\n * Constructor: mxCompactTreeLayout\n *\n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n *\n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n *\n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n *\n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n *\n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n *\n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n *\n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: minDistanceLimit\n *\n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n *\n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n *\n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n *\n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n *\n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n *\n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n *\n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n *\n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n *\n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n *\n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n *\n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n *\n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n *\n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n *\n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n *\n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n *\n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n *\n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n *\n * Parameters:\n *\n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n *\n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n *\n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n *\n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n *\n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n\n__mxOutput.mxFastOrganicLayout = typeof mxFastOrganicLayout !== 'undefined' ? mxFastOrganicLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n *\n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n *\n * Example:\n *\n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n *\n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n *\n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n *\n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n *\n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n *\n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n *\n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n *\n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n *\n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n *\n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n\n__mxOutput.mxCircleLayout = typeof mxCircleLayout !== 'undefined' ? mxCircleLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n *\n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n *\n * Example:\n *\n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n *\n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n *\n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n *\n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *\n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *\n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *\n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n *\n * Constructor: mxCompactTreeLayout\n *\n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent)\n{\n\tvar lookup = this.findParallels(parent);\n\n\tthis.graph.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n *\n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar lookup = [];\n\tvar childCount = model.getChildCount(parent);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\n\t\tif (!this.isEdgeIgnored(child))\n\t\t{\n\t\t\tvar id = this.getEdgeId(child);\n\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\n\t\t\t\tlookup[id].push(child);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n *\n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\n\t\treturn (src > trg) ? trg + '-' + src : src + '-' + trg;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: layout\n *\n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n *\n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n\n__mxOutput.mxParallelEdgeLayout = typeof mxParallelEdgeLayout !== 'undefined' ? mxParallelEdgeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n *\n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n *\n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n *\n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\n/**\n * Variable: layouts\n *\n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: layouts\n *\n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n *\n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.moveCell.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].moveCell.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n__mxOutput.mxCompositeLayout = typeof mxCompositeLayout !== 'undefined' ? mxCompositeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n *\n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n *\n * Example:\n *\n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n *\n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n *\n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n *\n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n *\n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n *\n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\n\t\tvar g = model.getGeometry(edge.cell);\n\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeLabelLayout = typeof mxEdgeLabelLayout !== 'undefined' ? mxEdgeLabelLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n *\n * An abstraction of an internal hierarchy node or edge\n *\n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n *\n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n *\n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n *\n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n *\n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n *\n * The width of this cell\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n *\n * The height of this cell\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n *\n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n *\n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n *\n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n *\n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n *\n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n *\n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n *\n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n *\n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n *\n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n *\n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n *\n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n *\n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n\n__mxOutput.mxGraphAbstractHierarchyCell = typeof mxGraphAbstractHierarchyCell !== 'undefined' ? mxGraphAbstractHierarchyCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n *\n * An abstraction of a hierarchical edge for the hierarchy layout\n *\n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n *\n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n *\n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n *\n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n *\n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n *\n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n *\n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n *\n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n *\n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n *\n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n *\n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n *\n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n *\n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n *\n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n\n__mxOutput.mxGraphHierarchyNode = typeof mxGraphHierarchyNode !== 'undefined' ? mxGraphHierarchyNode : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n *\n * An abstraction of a hierarchical edge for the hierarchy layout\n *\n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n *\n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n *\n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n *\n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n *\n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n *\n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n *\n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n *\n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n *\n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n *\n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n *\n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n *\n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n *\n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n *\n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\n\treturn null;\n};\n\n__mxOutput.mxGraphHierarchyEdge = typeof mxGraphHierarchyEdge !== 'undefined' ? mxGraphHierarchyEdge : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the\n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to\n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxGraphHierarchyModel = typeof mxGraphHierarchyModel !== 'undefined' ? mxGraphHierarchyModel : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the\n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to\n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index\n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxSwimlaneModel = typeof mxSwimlaneModel !== 'undefined' ? mxSwimlaneModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n *\n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n *\n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n *\n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n\n__mxOutput.mxHierarchicalLayoutStage = typeof mxHierarchicalLayoutStage !== 'undefined' ? mxHierarchicalLayoutStage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n *\n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n *\n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n *\n * Arguments:\n *\n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n *\n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n *\n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n *\n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n *\n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n *\n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n *\n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n *\n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n *\n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n *\n * Parameters:\n *\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n *\n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n *\n * Parameters:\n *\n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n *\n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n *\n * Parameters:\n *\n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n *\n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n *\n * Parameters:\n *\n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n *\n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n *\n * Parameters:\n *\n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\n\t\tvar nextRankValue;\n\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n *\n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n *\n * Parameters:\n *\n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n *\n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n *\n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n *\n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n *\n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n *\n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxMedianHybridCrossingReduction = typeof mxMedianHybridCrossingReduction !== 'undefined' ? mxMedianHybridCrossingReduction : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n *\n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n *\n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n *\n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n *\n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n\n__mxOutput.mxMinimumCycleRemover = typeof mxMinimumCycleRemover !== 'undefined' ? mxMinimumCycleRemover : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n *\n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n *\n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n *\n * Arguments:\n *\n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n *\n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n *\n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n *\n * The minimum distance between cells on adjacent ranks. Default is 10.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n *\n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n *\n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n *\n * The preferred horizontal distance between edges exiting a vertex\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n *\n * The preferred vertical offset between edges exiting a vertex\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n *\n * The minimum distance for an edge jetty from a vertex\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n *\n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n *\n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n *\n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n *\n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n *\n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n *\n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n *\n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n *\n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n *\n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n *\n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n *\n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n *\n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n *\n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n *\n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n *\n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n *\n * Padding added to resized parents\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n *\n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\n//\tthis.printStatus();\n\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\n\tvar bestXDelta = 100000000.0;\n\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n *\n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n *\n * Performs one median positioning sweep in one direction\n *\n * Parameters:\n *\n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n *\n * Performs median minimisation over one rank.\n *\n * Parameters:\n *\n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n *\n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n *\n * Parameters:\n *\n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n *\n * Calculates the median position of the connected cell on the specified\n * rank\n *\n * Parameters:\n *\n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n *\n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n *\n * Parameters:\n *\n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n *\n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n *\n * Parameters:\n *\n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n *\n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n *\n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n *\n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n *\n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the\n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable\n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n *\n * Determines whether or not a node may be moved to the specified x\n * position on the specified rank\n *\n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n *\n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n *\n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and\n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Separates the x position of edges as they connect to vertices\n *\n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n *\n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and\n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n *\n * Fixes the position of the specified vertex.\n *\n * Parameters:\n *\n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n *\n * Hook to add additional processing\n *\n * Parameters:\n *\n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n\n__mxOutput.mxCoordinateAssignment = typeof mxCoordinateAssignment !== 'undefined' ? mxCoordinateAssignment : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n *\n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n *\n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n *\n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n *\n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\tvar nodeId = mxCellPath.create(modelRoots[i]);\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n\n__mxOutput.mxSwimlaneOrdering = typeof mxSwimlaneOrdering !== 'undefined' ? mxSwimlaneOrdering : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n *\n * A hierarchical layout algorithm.\n *\n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n *\n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n *\n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n *\n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n *\n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n *\n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n *\n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n *\n * The spacing buffer added between cell on adjacent layers. Default is 50.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n *\n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n *\n * The distance between each parallel edge on each ranks for long edges\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n *\n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n *\n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n *\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n *\n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n *\n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose\n * terminal vertices have different parents but are in the same\n * ancestry chain\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n *\n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n *\n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n *\n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n *\n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n *\n * The style to apply between cell layers to edge segments\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n *\n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n *\n * Executes the layout for the children of the specified parent.\n *\n * Parameters:\n *\n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n *\n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n *\n * Parameters:\n *\n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n *\n * Returns the connected edges for the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Helper function to return visible terminal for edge allowing for ports\n *\n * Parameters:\n *\n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n *\n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\n\t\t\tfilledVertexSetEmpty = true;\n\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n *\n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n *\n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n *\n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n *\n * Parameters:\n *\n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n *\n * Parameters:\n *\n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only\n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n *\n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n *\n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n *\n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n *\n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxHierarchicalLayout = typeof mxHierarchicalLayout !== 'undefined' ? mxHierarchicalLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n *\n * A hierarchical layout algorithm.\n *\n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n *\n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n *\n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertices\n *\n * Holds an array of <mxCell> of dummy vertices inserted during the layout\n * to pad out empty swimlanes\n */\nmxSwimlaneLayout.prototype.dummyVertices = null;\n\n/**\n * Variable: dummyVertexWidth\n *\n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n *\n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n *\n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n *\n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n *\n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n *\n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n *\n * The spacing buffer added between cell on adjacent layers. Default is 50.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n *\n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n *\n * The distance between each parallel edge on each ranks for long edges\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n *\n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n *\n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n *\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n *\n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n *\n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose\n * terminal vertices  * have different parents but are in the same\n * ancestry chain\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n *\n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n *\n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n *\n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n *\n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n *\n * The style to apply between cell layers to edge segments\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n *\n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n *\n * Executes the layout for the children of the specified parent.\n *\n * Parameters:\n *\n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tthis.dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tthis.dummyVertices.push(vertex);\n\t\t}\n\t}\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(this.dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n *\n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n *\n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tnewGeo.x += childBounds[i].x - size.width - leftGroupBorder;\n\t\t\tnewGeo.y = newGeo.y + layoutBounds.y - geo.y - this.parentBorder;\n\n\t\t\tnewGeo.width = childBounds[i].width + size.width + this.interRankCellSpacing/2 + leftGroupBorder;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -childBounds[i].x + size.width + leftGroupBorder,\n\t\t\t\t\tgeo.y - layoutBounds.y + this.parentBorder);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n *\n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n *\n * Parameters:\n *\n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n *\n * Returns the connected edges for the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Helper function to return visible terminal for edge allowing for ports\n *\n * Parameters:\n *\n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n *\n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\n\t\t\tfilledVertexSetEmpty = true;\n\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\n\tthis.crossingStage(parent);\n\tinitialX = this.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n *\n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n *\n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n *\n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n *\n * Parameters:\n *\n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n *\n * Parameters:\n *\n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only\n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n *\n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n *\n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n *\n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n *\n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxSwimlaneLayout = typeof mxSwimlaneLayout !== 'undefined' ? mxSwimlaneLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n *\n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n *\n * Layers:\n *\n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n *\n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n *\n * Events:\n *\n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n *\n * Encoding the model:\n *\n * To encode a graph model, use the following code:\n *\n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n *\n * This will create an XML node that contains all the model information.\n *\n * Encoding and decoding changes:\n *\n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n *\n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n *\n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n *\n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n *\n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n *\n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n *\n * The changes can then be dispatched using the model as follows.\n *\n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n *\n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n *\n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n *\n * For finding newly inserted cells, the following code can be used:\n *\n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *\n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *\n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n *\n *\n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n *\n * Event: mxEvent.EXECUTE\n *\n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n *\n * Event: mxEvent.EXECUTED\n *\n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n *\n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n *\n * Event: mxEvent.END_UPDATE\n *\n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n *\n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n *\n * Event: mxEvent.BEFORE_UNDO\n *\n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n *\n * Event: mxEvent.UNDO\n *\n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n *\n * Constructor: mxGraphModel\n *\n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n *\n * Parameters:\n *\n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n *\n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n *\n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n *\n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n *\n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n *\n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n *\n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n *\n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n *\n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n *\n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n *\n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n *\n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n *\n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n *\n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n *\n * Returns all descendants of the given cell and the cell itself in an array.\n *\n * Parameters:\n *\n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n *\n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n *\n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n *\n * Parameters:\n *\n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n *\n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n *\n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\n\treturn root;\n};\n\n/**\n * Function: setRoot\n *\n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n *\n * Example:\n *\n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n *\n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n *\n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n *\n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n *\n * Returns true if the given parent is an ancestor of the given child. Note\n * returns true if child == parent.\n *\n * Parameters:\n *\n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n *\n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n *\n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n *\n * Returns the parent of the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n *\n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n *\n * Parameters:\n *\n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n *\n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n *\n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\n\t\t\tif (collision != cell)\n\t\t\t{\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n *\n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n *\n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n *\n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null &&\n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n *\n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n *\n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n *\n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: remove\n *\n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n *\n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n *\n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n *\n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n *\n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\n\t// Adds or removes the cell from the model\n\tvar par = this.contains(parent);\n\tvar pre = this.contains(previous);\n\n\tif (par && !pre)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (pre && !par)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n *\n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n *\n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\n/**\n * Function: getChildVertices\n *\n * Returns the child vertices of the given parent.\n *\n * Parameters:\n *\n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\n/**\n * Function: getChildEdges\n *\n * Returns the child edges of the given parent.\n *\n * Parameters:\n *\n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n *\n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n *\n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n *\n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n *\n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: setTerminals\n *\n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n *\n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n *\n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n *\n * Parameters:\n *\n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge of cell at the given index.\n *\n * Parameters:\n *\n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\n/**\n * Function: getDirectedEdgeCount\n *\n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n *\n * Parameters:\n *\n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n *\n * Returns all edges of the given cell without loops.\n *\n * Parameters:\n *\n * cell - <mxCell> whose edges should be returned.\n *\n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n *\n * Returns the incoming edges of the given cell without loops.\n *\n * Parameters:\n *\n * cell - <mxCell> whose incoming edges should be returned.\n *\n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n *\n * Returns the outgoing edges of the given cell without loops.\n *\n * Parameters:\n *\n * cell - <mxCell> whose outgoing edges should be returned.\n *\n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n *\n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n *\n * Parameters:\n *\n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true.\n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n *\n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n *\n * Parameters:\n *\n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n *\n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n *\n * Parameters:\n *\n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\n\tvar terminals = [];\n\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n *\n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the given cell is an edge.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n *\n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n *\n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n *\n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n *\n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n *\n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n *\n * To change a specific attribute in an XML node, the following code can be\n * used.\n *\n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *\n *   return previous;\n * };\n * (end)\n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n *\n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n *\n * Parameters:\n *\n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n *\n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n *\n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n *\n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n *\n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n *\n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n *\n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n *\n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n *\n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\n\treturn collapsed;\n};\n\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n *\n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the given <mxCell> is visible.\n *\n * Parameters:\n *\n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n *\n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n *\n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\n\treturn visible;\n};\n\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n *\n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\n\treturn previous;\n};\n\n/**\n * Function: execute\n *\n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n *\n * Parameters:\n *\n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n *\n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n *\n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n *\n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n *\n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n *\n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n *\n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n *\n * Parameters:\n *\n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n *\n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\n\t\t\tterminal = this.getTerminal(cell, false);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n *\n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n *\n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n *\n * Parameters:\n *\n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n *\n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n *\n * cell - <mxCell> to be cloned.\n */\nmxGraphModel.prototype.cloneCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], true)[0];\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n *\n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n *\n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Boolean indicating if the cells should be cloned\n * with all descendants.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\n\treturn clones;\n};\n\n/**\n * Function: cloneCellImpl\n *\n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n *\n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n *\n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\n\tvar target = this.getTerminal(cell, false);\n\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\n\tvar childCount = this.getChildCount(clone);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n *\n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n *\n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n *\n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n *\n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n *\n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n *\n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n *\n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n *\n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n *\n * Constructs a change of a terminal in the\n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n *\n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n *\n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n *\n * Constructs a change of a user object in the\n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n *\n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n *\n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n *\n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n *\n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n *\n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n *\n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n *\n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n *\n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n *\n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n *\n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n *\n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n *\n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n *\n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n *\n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n *\n * Example:\n *\n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n *\n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n *\n * Constructor: mxCellAttributeChange\n *\n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n *\n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\n\t\tthis.previous = tmp;\n\t}\n};\n\n__mxOutput.mxGraphModel = typeof mxGraphModel !== 'undefined' ? mxGraphModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n *\n * Custom attributes:\n *\n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n *\n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n *\n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n *\n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n *\n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *\n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n *\n * Callback: onInit\n *\n * Called from within the constructor.\n *\n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n *\n * Parameters:\n *\n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n *\n * Parameters:\n *\n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\n/**\n * Function: setEdge\n *\n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n *\n * Parameters:\n *\n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n *\n * Parameters:\n *\n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n *\n * Parameters:\n *\n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n *\n * Parameters:\n *\n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n *\n * Parameters:\n *\n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n *\n * Parameters:\n *\n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n *\n * Parameters:\n *\n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n *\n * Parameters:\n *\n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n *\n * Parameters:\n *\n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n *\n * Parameters:\n *\n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n *\n * Parameters:\n *\n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n *\n * Parameters:\n *\n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n *\n * Parameters:\n *\n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n *\n * Parameters:\n *\n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n *\n * Parameters:\n *\n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n *\n * Parameters:\n *\n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n *\n * Returns true if the user object is an XML node that contains the given\n * attribute.\n *\n * Parameters:\n *\n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n *\n * Parameters:\n *\n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\n\treturn val || defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n *\n * Parameters:\n *\n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\n\treturn value;\n};\n\n__mxOutput.mxCell = typeof mxCell !== 'undefined' ? mxCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n *\n * Extends <mxRectangle> to represent the geometry of a cell.\n *\n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the sourcePoint> and <targetPoint>\n * variables, respectively.\n *\n * Example:\n *\n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n *\n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n *\n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n *\n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n *\n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n *\n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n *\n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n *\n * Ports:\n *\n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n *\n * Offsets:\n *\n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n *\n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n *\n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n *\n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n *\n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n *\n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n *\n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n *\n * Parameters:\n *\n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n *\n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n *\n * Parameters:\n *\n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: rotate\n *\n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n *\n * Parameters:\n *\n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n *\n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n *\n * Parameters:\n *\n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n *\n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n *\n * Parameters:\n *\n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n *\n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n\n__mxOutput.mxGeometry = typeof mxGeometry !== 'undefined' ? mxGeometry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t *\n\t * Implements a mechanism for temporary cell Ids.\n\t *\n\t * Variable: PATH_SEPARATOR\n\t *\n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\n\t/**\n\t * Function: create\n\t *\n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t *\n\t * Parameters:\n\t *\n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: getParentPath\n\t *\n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t *\n\t * Parameters:\n\t *\n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t *\n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t *\n\t * Parameters:\n\t *\n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\n\t\treturn parent;\n\t},\n\n\t/**\n\t * Function: compare\n\t *\n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\n\t\treturn comp;\n\t}\n\n};\n\n__mxOutput.mxCellPath = typeof mxCellPath !== 'undefined' ? mxCellPath : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t *\n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t *\n\t * Or programmatically:\n\t *\n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t *\n\t * When adding new perimeter functions, it is recommended to use the\n\t * mxPerimeter-namespace as follows:\n\t *\n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *\n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t *\n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t *\n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t *\n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t *\n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t *\n\t * Or it can be used for all vertices in the graph as follows:\n\t *\n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t *\n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t *\n\t * The parameters are explained in <RectanglePerimeter>.\n\t *\n\t * Function: RectanglePerimeter\n\t *\n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t *\n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t *\n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\n\t\t\t\t}\n\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t *\n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\n\t/**\n\t * Function: TrianglePerimeter\n\t *\n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\n\t\tvar base = false;\n\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\n\t\t}\n\n\t\tvar result = null;\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: HexagonPerimeter\n\t *\n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxPerimeter = typeof mxPerimeter !== 'undefined' ? mxPerimeter : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxPrintPreview\n *\n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n *\n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n *\n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n *\n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n *\n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n *\n * Additional pages:\n *\n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n *\n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n *\n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n *\n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n *\n * preview.open();\n * (end)\n *\n * CSS:\n *\n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n *\n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n *\n * Padding:\n *\n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n *\n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *\n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n *\n * Headers:\n *\n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n *\n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *\n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *\n *   return div;\n * };\n * (end)\n *\n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n *\n * Page Format:\n *\n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n *\n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n *\n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n *\n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n *\n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n *\n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n *\n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n *\n * Parameters:\n *\n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n *\n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n *\n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n *\n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n *\n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n *\n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n *\n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n *\n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n *\n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n *\n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n *\n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n *\n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n *\n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n *\n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n *\n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n *\n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n *\n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n *\n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n *\n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n *\n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n *\n * Adds the given graph to the existing print preview.\n *\n * Parameters:\n *\n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n *\n * Shows the print preview window. The window is created here if it does\n * not exist.\n *\n * Parameters:\n *\n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\n\t\tvar doc = this.wnd.document;\n\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n *\n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n *\n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n *\n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n *\n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n *\n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\n\t\ttbody.appendChild(row);\n\t}\n\n\ttable.appendChild(tbody);\n\n\treturn table;\n};\n\n/**\n * Function: renderPage\n *\n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n *\n * Parameters:\n *\n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\n\treturn div;\n};\n\n/**\n * Function: getRoot\n *\n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\n\treturn root;\n};\n\n/**\n * Function: addGraphFragment\n *\n * Adds a graph fragment to the given div.\n *\n * Parameters:\n *\n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\n\t\t// Uses CSS transform for scaling\n\t\tif (!mxClient.NO_FO)\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / scale, clip.height * s / scale);\n\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\n\t\t\t\t\t// Stops rendering if outside clip for speedup\n\t\t\t\t\tif (bbox != null && !mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\t//return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\n\tvar temp = null;\n\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n *\n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n *\n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n *\n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n *\n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n *\n * Opens the print preview and shows the print dialog.\n *\n * Parameters:\n *\n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n *\n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n\n__mxOutput.mxPrintPreview = typeof mxPrintPreview !== 'undefined' ? mxPrintPreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n *\n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n *\n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n *\n * Example:\n *\n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n *\n * Modifies the built-in default styles.\n *\n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n *\n * (code)\n * ;shadow=1\n * (end)\n *\n * Removing keys:\n *\n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n *\n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n *\n * Constructor: mxStylesheet\n *\n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n *\n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n *\n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n *\n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n *\n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n *\n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n *\n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n *\n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n *\n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n *\n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n *\n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n *\n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n *\n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n *\n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n *\n * Parameters:\n *\n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n *\n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n *\n * Parameters:\n *\n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\n\treturn style;\n};\n\n__mxOutput.mxStylesheet = typeof mxStylesheet !== 'undefined' ? mxStylesheet : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n *\n * Represents the current state of a cell in a given <mxGraphView>.\n *\n * For edges, the edge label position is stored in <absoluteOffset>.\n *\n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n *\n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n *\n * Constructor: mxCellState\n *\n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n *\n * Parameters:\n *\n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = (style != null) ? style : {};\n\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n *\n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n *\n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalidStyle\n *\n * Specifies if the style is invalid. Default is false.\n */\nmxCellState.prototype.invalidStyle = false;\n\n/**\n * Variable: invalid\n *\n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n *\n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex.\n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n *\n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n *\n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n *\n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n *\n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n *\n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n *\n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n *\n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n *\n * Parameters:\n *\n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n *\n * Sets the first or last point in <absolutePoints> depending on isSource.\n *\n * Parameters:\n *\n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n *\n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the visible source or target terminal cell.\n *\n * Parameters:\n *\n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n *\n * Returns the visible source or target terminal state.\n *\n * Parameters:\n *\n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n *\n * Sets the visible source or target terminal state.\n *\n * Parameters:\n *\n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n *\n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n *\n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n *\n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n *\n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n *\n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n\n__mxOutput.mxCellState = typeof mxCellState !== 'undefined' ? mxCellState : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n *\n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *\n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n *\n * Event: mxEvent.UNDO\n *\n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n *\n * Event: mxEvent.CHANGE\n *\n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n *\n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n *\n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n *\n * Parameters:\n *\n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n *\n * Parameters:\n *\n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: addCell\n *\n * Adds the given <mxCell> to the selection and fires a <select> event.\n *\n * Parameters:\n *\n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n *\n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n *\n * Parameters:\n *\n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.changeSelection(null, tmp);\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n *\n * Paramters:\n *\n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n *\n * Paramters:\n *\n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n *\n * Parameters:\n *\n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n\n__mxOutput.mxGraphSelectionModel = typeof mxGraphSelectionModel !== 'undefined' ? mxGraphSelectionModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n *\n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n *\n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *\n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *\n *   return result;\n * };\n * (end)\n *\n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n *\n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n *\n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n *\n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * });\n * (end)\n *\n * Placeholder:\n *\n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n *\n * Resize in Chrome:\n *\n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n *\n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n *\n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *\n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n *\n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n *\n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *\n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n *\n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n *\n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n *\n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n *\n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n *\n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n *\n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n *\n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n *\n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n *\n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n *\n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n *\n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n *\n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Variable: align\n *\n * Holds the current temporary horizontal alignment for the cell style. If this\n * is modified then the current text alignment is changed and the cell style is\n * updated when the value is applied.\n */\nmxCellEditor.prototype.align = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n *\n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: setAlign\n *\n * Sets the temporary horizontal alignment for the current editing session.\n */\nmxCellEditor.prototype.setAlign = function (align)\n{\n\tif (this.textarea != null)\n\t{\n\t\tthis.textarea.style.textAlign = align;\n\t}\n\n\tthis.align = align;\n\tthis.resize();\n};\n\n/**\n * Function: getInitialValue\n *\n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n\n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n *\n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n *\n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n *\n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if text is dragged\n\t// LATER: Gesture mouse events ignored for starting move\n\tmxEvent.addListener(elt, 'dragstart', mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.stopEditing(false);\n\t\tmxEvent.consume(evt);\n\t}));\n\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\tmxEvent.addListener(window, 'resize', resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n *\n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n *\n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n *\n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null && this.align == null) ? state.text.margin : null;\n\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(this.align || mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n *\n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n *\n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tabsoluteRoot = mxUtils.getCurrentStyle(root).position == 'absolute';\n\t\t\t}\n\t\t}\n\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\tthis.align = null;\n\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\n\tvar state = this.graph.getView().getState(cell);\n\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar uline = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE;\n\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = (uline) ? 'underline' : '';\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\t// Quotes are workaround for font name \"m+\"\n\t\tthis.textarea.style.fontFamily = '\"' + family + '\"';\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\n\t\tthis.resize();\n\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n *\n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: isSelectText\n *\n * Returns <selectText>.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\n\t\tif (state != null && (this.textarea.innerHTML != initial || this.align != null))\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\n\t\t\tthis.graph.getModel().beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (value != null)\n\t\t\t\t{\n\t\t\t\t\tthis.applyValue(state, value);\n\t\t\t\t}\n\n\t\t\t\tif (this.align != null)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ALIGN, this.align, [state.cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.graph.getModel().endUpdate();\n\t\t\t}\n\t\t}\n\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t\tthis.align = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n *\n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n *\n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n *\n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n *\n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers\n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n *\n * Parameters:\n *\n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\n\t\tthis.textarea = null;\n\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n\n__mxOutput.mxCellEditor = typeof mxCellEditor !== 'undefined' ? mxCellEditor : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n *\n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n *\n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n *\n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n *\n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n *\n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n *\n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n *\n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n *\n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n *\n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n *\n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n *\n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n *\n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n *\n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n *\n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n *\n * Example:\n *\n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n *\n * Parameters:\n *\n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n *\n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n *\n * Creates and returns the shape for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n *\n * Creates the indicator shape for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n *\n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n *\n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n *\n * Configures the shape for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n *\n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n *\n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR, mxConstants.STYLE_GRADIENTCOLOR];\n\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n *\n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar value = state.shape[field];\n\tvar graph = state.view.graph;\n\tvar referenced = null;\n\n\tif (value == 'inherit')\n\t{\n\t\treferenced = graph.model.getParent(state.cell);\n\t}\n\telse if (value == 'swimlane')\n\t{\n\t\tstate.shape[field] = (key == mxConstants.STYLE_STROKECOLOR) ? '#000000' : '#ffffff';\n\n\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t{\n\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treferenced = state.cell;\n\t\t}\n\n\t\treferenced = graph.getSwimlane(referenced);\n\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t}\n\telse if (value == 'indicated')\n\t{\n\t\tstate.shape[field] = state.shape.indicatorColor;\n\t}\n\n\tif (referenced != null)\n\t{\n\t\tvar rstate = graph.getView().getState(referenced);\n\t\tstate.shape[field] = null;\n\n\t\tif (rstate != null)\n\t\t{\n\t\t\tif (rstate.shape != null && field != 'indicatorColor')\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.shape[field];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.style[key];\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n *\n * Returns the value to be used for the label.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n *\n * Creates the label for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n *\n * Initiailzes the label with a suitable container.\n *\n * Parameters:\n *\n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n *\n * Creates the actual shape for showing the overlay for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n *\n * Initializes the given overlay.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n *\n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n *\n * Creates the control for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n *\n * Hook for creating the click handler for the folding icon.\n *\n * Parameters:\n *\n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n *\n * Initializes the given control and returns the corresponding DOM node.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n *\n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n *\n * Parameters:\n *\n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n *\n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n *\n * Parameters:\n *\n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n *\n * Installs the event listeners for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n *\n * Redraws the label for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\t!state.text.bounds.equals(bounds))\n\t\t{\n\t\t\t// Forces an update of the text bounding box\n\t\t\tif (state.text.bounds.width != 0 && state.unscaledWidth != null &&\n\t\t\t\tMath.round((state.text.bounds.width /\n\t\t\t\tstate.text.scale * nextScale) - bounds.width) != 0)\n\t\t\t{\n\t\t\t\tstate.unscaledWidth = null;\n\t\t\t}\n\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n *\n * Returns true if the style for the text shape has changed.\n *\n * Parameters:\n *\n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\tvar result = false;\n\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n *\n * Called to invoked redraw on the given text shape.\n *\n * Parameters:\n *\n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n *\n * Returns the scaling used for the label of the given state\n *\n * Parameters:\n *\n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n *\n * Returns the bounds to be used to draw the label of the given state.\n *\n * Parameters:\n *\n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\n\t\tvar sc = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\n\t\tif (sc != mxConstants.NONE && sc != '')\n\t\t{\n\t\t\tvar s = parseFloat(mxUtils.getValue(state.style, mxConstants.STYLE_STROKEWIDTH, 1)) * scale;\n\t\t\tvar dx = 1 + Math.floor((s - 1) / 2);\n\t\t\tvar dh = Math.floor(s + 1);\n\n\t\t\tbounds.x += dx;\n\t\t\tbounds.y += dx;\n\t\t\tbounds.width -= dh;\n\t\t\tbounds.height -= dh;\n\t\t}\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n *\n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n *\n * Parameters:\n *\n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tpt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n *\n * Redraws the overlays for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n *\n * Redraws the control for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n *\n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n *\n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n *\n * Parameters:\n *\n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode.firstChild != null && shapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n *\n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n *\n * Parameters:\n *\n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n *\n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n *\n * Redraws the shape for the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n *\n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n *\n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shapes associated with the given cell state.\n *\n * Parameters:\n *\n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n\n__mxOutput.mxCellRenderer = typeof mxCellRenderer !== 'undefined' ? mxCellRenderer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t *\n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t *\n\t * Sets the default edge style to <ElbowConnector>.\n\t *\n\t * Custom edge style:\n\t *\n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t *\n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t *\n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t *\n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t *\n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t *\n\t * The custom edge style above can now be used in a specific edge as follows:\n\t *\n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t *\n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t *\n\t * Or it can be used for all edges in the graph as follows:\n\t *\n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t *\n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t *\n\t * Function: EntityRelation\n\t *\n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t *\n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function (state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\n\t\t\t \tif (sourceGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (target != null)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = target.x + target.width < source.x;\n\t\t\t \t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t \tvar isTargetLeft = true;\n\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\n\t\t\t \tif (targetGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (source != null)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = source.x + source.width < target.x;\n\t\t\t \t}\n\t\t\t}\n\t \t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\n\t\t\tvar seg = segment;\n\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t *\n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function (state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\n\t/**\n\t * Function: ElbowConnector\n\t *\n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function (state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\n\t\t\t\tvertical = left == right;\n\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t *\n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function (state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t *\n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\n\t\t\tvar x = view.getRoutingCenterX(source);\n\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\n\t\t\t}\n\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\n\t\t\t}\n\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t *\n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t */\n\tSegmentConnector: function(state, source, target, hints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = state.absolutePoints;\n\t\tvar tol = Math.max(1, state.view.scale);\n\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= tol)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\n\t\tpt.x = Math.round(pt.x);\n\t\tpt.y = Math.round(pt.y);\n\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (hints != null && hints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar newHints = [];\n\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, hints[i]);\n\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.x = Math.round(tmp.x);\n\t\t\t\t\ttmp.y = Math.round(tmp.y);\n\t\t\t\t\tnewHints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\thints = newHints;\n\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar pe = pts[lastInx];\n\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentPt.x = Math.round(currentPt.x);\n\t\t\t\tcurrentPt.y = Math.round(currentPt.y);\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a\n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan))\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentPt.x = Math.round(currentPt.x);\n\t\t\t\t\tcurrentPt.y = Math.round(currentPt.y);\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x);\n\t\t\tpt.y = Math.round(pt.y);\n\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) < tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) < tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\torthBuffer: 10,\n\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\n\tgetJettySize: function(state, source, target, points, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t *\n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t *\n\t * Parameters:\n\t *\n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t *\n\t */\n\tOrthConnector: function(state, source, target, points, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar scaledSourceBuffer = state.view.scale * mxEdgeStyle.getJettySize(state, source, target, points, true);\n\t\tvar scaledTargetBuffer = state.view.scale * mxEdgeStyle.getJettySize(state, source, target, points, false);\n\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\tscaledTargetBuffer = Math.max(scaledSourceBuffer, scaledTargetBuffer);\n\t\t\tscaledSourceBuffer = scaledTargetBuffer;\n\t\t}\n\n\t\tvar totalBuffer = scaledTargetBuffer + scaledSourceBuffer;\n\t\tvar tooShort = false;\n\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (points != null &&\n\t\t\tpoints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, source, target, points, result);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true,\n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x;\n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t// Avoids floating point number errors\n\t\tsourceX = Math.round(sourceX * 10) / 10;\n\t\tsourceY = Math.round(sourceY * 10) / 10;\n\t\tsourceWidth = Math.round(sourceWidth * 10) / 10;\n\t\tsourceHeight = Math.round(sourceHeight * 10) / 10;\n\n\t\ttargetX = Math.round(targetX * 10) / 10;\n\t\ttargetY = Math.round(targetY * 10) / 10;\n\t\ttargetWidth = Math.round(targetWidth * 10) / 10;\n\t\ttargetHeight = Math.round(targetHeight * 10) / 10;\n\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [scaledSourceBuffer, scaledTargetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// It the list can contain gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= scaledSourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + scaledSourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + scaledSourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= scaledSourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is\n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0]), Math.round(mxEdgeStyle.wayPoints1[i][1])));\n\t\t}\n\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxEdgeStyle = typeof mxEdgeStyle !== 'undefined' ? mxEdgeStyle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t *\n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\n\t/**\n\t * Function: getName\n\t *\n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n\n__mxOutput.mxStyleRegistry = typeof mxStyleRegistry !== 'undefined' ? mxStyleRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n *\n * Event: mxEvent.UNDO\n *\n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n *\n * Event: mxEvent.SCALE_AND_TRANSLATE\n *\n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n *\n * Event: mxEvent.SCALE\n *\n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n *\n * Event: mxEvent.TRANSLATE\n *\n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n *\n * Event: mxEvent.DOWN and mxEvent.UP\n *\n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n *\n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n *\n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n *\n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n *\n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n *\n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n *\n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n *\n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n *\n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n *\n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n *\n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n *\n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n *\n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n *\n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n *\n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, true);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n *\n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n *\n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n *\n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n *\n * Parameters:\n *\n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\n\tthis.removeState(cell);\n\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n *\n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n *\n * Parameters:\n *\n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\n\tvar state = this.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n *\n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n *\n * Parameters:\n *\n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\n\tthis.resetValidationState();\n\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\n\tthis.resetValidationState();\n\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n *\n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n *\n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n *\n * Parameters:\n *\n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n *\n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n *\n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n *\n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n *\n * Example:\n *\n * If the background image should not be scaled, this can be replaced with\n * the following.\n *\n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n *\n * Parameters:\n *\n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n *\n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n *\n * Parameters:\n *\n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n *\n * Validates and repaints the <mxCellState> for the given <mxCell>.\n *\n * Parameters:\n *\n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\n\t\t\t\tif (state.style == null || state.invalidStyle)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t\tstate.invalidStyle = false;\n\t\t\t\t}\n\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\n\t\t\t\tthis.updateCellState(state);\n\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n *\n * Updates the given <mxCellState>.\n *\n * Parameters:\n *\n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell));\n\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = geo.offset || this.EMPTY_POINT;\n\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.width / this.scale + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.height / this.scale + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n *\n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n *\n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n *\n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n *\n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n *\n * Parameters:\n *\n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n *\n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n *\n * Parameters:\n *\n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n *\n * Parameters:\n *\n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n *\n * Parameters:\n *\n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n *\n * Parameters:\n *\n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint);\n\t}\n\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n *\n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n *\n * Parameters:\n *\n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n *\n * Parameters:\n *\n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\n\t    return new mxPoint(this.scale * (pt.x + this.translate.x + orig.x),\n\t    \tthis.scale * (pt.y + this.translate.y + orig.y));\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n *\n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not have connections constraints\n * associated.\n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n *\n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\n\t\tedgeStyle = tmp;\n\t}\n\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n *\n * Parameters:\n *\n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n *\n * Parameters:\n *\n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n *\n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n *\n * Parameters:\n *\n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n *\n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n *\n * Parameters:\n *\n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n *\n * Parameters:\n *\n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\n\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n *\n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n *\n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n *\n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n *\n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n *\n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *\n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *\n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n *\n * Parameters:\n *\n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n *\n * Parameters:\n *\n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n *\n * Parameters:\n *\n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is valid for the current view state\n\tif (best != null && (!model.contains(best) ||\n\t\tmodel.getParent(best) == model.getRoot() ||\n\t\tbest == this.currentRoot))\n\t{\n\t\tbest = null;\n\t}\n\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n *\n * Parameters:\n *\n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\n\t\t\t\tpt = tmp;\n\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\n\t\tvar markerSize = 1; // TODO: include marker size\n\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n *\n * Parameters:\n *\n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(x, y);\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n *\n * Parameters:\n *\n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\n\t\t\t\tp0 = pe;\n\t\t\t}\n\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n *\n * Parameters:\n *\n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n *\n * Parameters:\n *\n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n *\n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n *\n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}));\n\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\n\t\t\treturn state;\n\t\t};\n\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n *\n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n *\n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n *\n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n *\n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n\n__mxOutput.mxGraphView = typeof mxGraphView !== 'undefined' ? mxGraphView : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n *\n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n *\n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n *\n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n *\n * Cell Images:\n *\n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n *\n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n *\n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n *\n * For a named style, the the stylename must be the first element\n * of the cell style:\n *\n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n *\n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n *\n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n *\n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n *\n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n *\n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n *\n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n *\n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n *\n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n *\n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n *\n * Tooltips:\n *\n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or\n * one of the two above functions must be overridden.\n *\n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n *\n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n *\n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n *\n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n *\n * \"this\" refers to the graph in the implementation, so for example to check if\n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than\n * replacing the function on a specific instance), the following code should be\n * used after loading the JavaScript files, but before creating a new mxGraph\n * instance using <mxGraph>:\n *\n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n *\n * Shapes & Styles:\n *\n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n *\n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n *\n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n *\n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n *\n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n *\n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n *\n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n *\n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n *\n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n *\n * Inheriting Styles:\n *\n * For fill-, stroke-, gradient- and indicatorColors special keywords can be\n * used. The inherit keyword for one of these colors will inherit the color\n * for the same key from the parent cell. The swimlane keyword does the same,\n * but inherits from the nearest swimlane in the ancestor hierarchy. Finally,\n * the indicated keyword will use the color of the indicator as the color for\n * the given key.\n *\n * Scrollbars:\n *\n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n *\n * Multiplicities and Validation:\n *\n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n *\n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n *\n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n *\n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n *\n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n *\n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n *\n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n *\n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n *\n * Auto-Layout:\n *\n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n *\n * Unconnected edges:\n *\n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n *\n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n *\n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without\n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n *\n * Output:\n *\n * To produce an XML representation for a diagram, the following code can be\n * used.\n *\n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n *\n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n *\n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n *\n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n *\n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n *\n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n *\n * Input:\n *\n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n *\n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n *\n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n *\n * Functional dependencies:\n *\n * (see images/callgraph.png)\n *\n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n *\n * Event: mxEvent.ROOT\n *\n * Fires if the root in the model has changed. This event has no properties.\n *\n * Event: mxEvent.ALIGN_CELLS\n *\n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n *\n * Event: mxEvent.ORDER_CELLS\n *\n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n *\n * Event: mxEvent.GROUP_CELLS\n *\n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n *\n * Event: mxEvent.UNGROUP_CELLS\n *\n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n *\n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n *\n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n *\n * Event: mxEvent.ADD_CELLS\n *\n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n *\n * Event: mxEvent.CELLS_ADDED\n *\n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n *\n * Event: mxEvent.REMOVE_CELLS\n *\n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n *\n * Event: mxEvent.CELLS_REMOVED\n *\n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n *\n * Event: mxEvent.SPLIT_EDGE\n *\n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n *\n * Event: mxEvent.TOGGLE_CELLS\n *\n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n *\n * Event: mxEvent.FOLD_CELLS\n *\n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n *\n * Event: mxEvent.CELLS_FOLDED\n *\n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n *\n * Event: mxEvent.UPDATE_CELL_SIZE\n *\n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n *\n * Event: mxEvent.RESIZE_CELLS\n *\n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n *\n * Event: mxEvent.CELLS_RESIZED\n *\n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n *\n * Event: mxEvent.MOVE_CELLS\n *\n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n *\n * Event: mxEvent.CELLS_MOVED\n *\n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n *\n * Event: mxEvent.CONNECT_CELL\n *\n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n *\n * Event: mxEvent.CELL_CONNECTED\n *\n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n *\n * Event: mxEvent.REFRESH\n *\n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n *\n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n *\n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n *\n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n *\n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n *\n * Constructor: mxGraph\n *\n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is\n * used as the model. The container must have a valid owner document prior\n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based\n * browsers. The parameter is mapped to <dialect>, which may\n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers,\n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML>\n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n *\n * fast - The parameter is based on the fact that the display performance is\n * highly improved in IE if the VML is not contained within a VML group\n * element. The lack of a group element only slightly affects the display while\n * panning, but improves the performance by almost a factor of 2, while keeping\n * the display sufficiently accurate. This also allows to render certain shapes as HTML\n * if the display accuracy is not affected, which is implemented by\n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is\n * controlled by <mxShape.preferModeHtml>. The default implementation will\n * avoid gradients and rounded rectangles, but more significant shapes, such\n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This\n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for\n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is\n * created that contains the VML. This allows for accurate panning and is\n * mapped to DIALECT_VML.\n *\n * Example:\n *\n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n *\n * Parameters:\n *\n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/graph');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n *\n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n *\n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n *\n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n *\n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n *\n * Holds the <mxStylesheet> that defines the appearance of the cells.\n *\n *\n * Example:\n *\n * Use the following code to read a stylesheet into an existing graph.\n *\n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\n/**\n * Variable: selectionModel\n *\n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n *\n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n *\n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n *\n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n *\n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n *\n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n *\n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n *\n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n *\n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n *\n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n *\n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n *\n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n *\n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n *\n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n *\n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n *\n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n *\n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n *\n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n *\n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n *\n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n *\n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n *\n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n *\n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n *\n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n *\n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n *\n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n *\n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n *\n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n *\n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n *\n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n *\n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n *\n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n *\n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n *\n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n *\n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n *\n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n *\n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n *\n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n *\n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n *\n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n *\n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n *\n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\n/**\n * Variable: cellsDeletable\n *\n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n *\n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\n/**\n * Variable: edgeLabelsMovable\n *\n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\n/**\n * Variable: vertexLabelsMovable\n *\n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n *\n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n *\n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n *\n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n *\n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n *\n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n *\n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n *\n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n *\n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n *\n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n *\n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n *\n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n *\n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n *\n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n *\n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n *\n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n *\n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n *\n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n *\n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\n/**\n * Variable: maximumContainerSize\n *\n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n *\n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n *\n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\n/**\n * Variable: keepEdgesInForeground\n *\n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n *\n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n *\n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n *\n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n *\n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n *\n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n *\n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n *\n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n *\n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n *\n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n *\n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n *\n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n *\n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n *\n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n *\n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n *\n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n *\n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n *\n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\n/**\n * Variable: defaultLoopStyle\n *\n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n *\n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n *\n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n *\n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n *\n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n *\n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n *\n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\n/**\n * Variable: htmlLabels\n *\n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n *\n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n *\n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\n/**\n * Variable: swimlaneIndicatorColorAttribute\n *\n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n *\n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n *\n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n *\n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n *\n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n *\n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n *\n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n *\n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n *\n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n *\n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n *\n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n *\n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n *\n * Initializes the <container> and creates the respective datastructures.\n *\n * Parameters:\n *\n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function()\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n *\n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n *\n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n *\n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n *\n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n *\n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n *\n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n *\n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n *\n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n *\n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n *\n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n\n/**\n * Function: createCellRenderer\n *\n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n *\n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n *\n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n *\n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n *\n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n *\n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n *\n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n *\n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n *\n * Returns the cells to be selected for the given array of changes.\n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\n\t\tif (change.constructor != mxRootChange)\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (change.cell != null && change.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n *\n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n *\n * Parameters:\n *\n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\n\tthis.updateSelection();\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: updateSelection\n *\n * Removes selection cells that are not in the model from the selection.\n */\nmxGraph.prototype.updateSelection = function()\n{\n\tvar cells = this.getSelectionCells();\n\tvar removed = [];\n\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.model.contains(cells[i]) || !this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tremoved.push(cells[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar par = this.model.getParent(cells[i]);\n\n\t\t\twhile (par != null && par != this.view.currentRoot)\n\t\t\t{\n\t\t\t\tif (this.isCellCollapsed(par) || !this.isCellVisible(par))\n\t\t\t\t{\n\t\t\t\t\tremoved.push(cells[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tpar = this.model.getParent(par);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.removeSelectionCells(removed);\n};\n\n/**\n * Function: processChange\n *\n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n *\n * Parameters:\n *\n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n\n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.invalidStyle = true;\n\t\t}\n\t}\n\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n *\n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n *\n * Paramters:\n *\n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n *\n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n *\n * Parameters:\n *\n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n *\n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n *\n * Parameters:\n *\n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n *\n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n *\n * Parameters:\n *\n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n *\n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n *\n * Parameters:\n *\n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n *\n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n *\n * Parameters:\n *\n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n *\n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n *\n * Example:\n *\n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n *\n * Parameters:\n *\n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n *\n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n *\n * Parameters:\n *\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n *\n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n *\n * Parameters:\n *\n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n *\n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the current editing  and fires a <editingStopped> event.\n *\n * Parameters:\n *\n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n *\n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n *\n * Parameters:\n *\n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n *\n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n *\n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n *\n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *\n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end)\n *\n * Parameters:\n *\n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n *\n * Processes an escape keystroke.\n *\n * Parameters:\n *\n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n *\n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n *\n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *\n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n *\n * Parameters:\n *\n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\n\tthis.fireEvent(mxe);\n\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null, mxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\n\t\t\t\t\treturn !active || selected;\n\t\t\t\t}));\n\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar swimlane = null;\n\n\t\t\tif (this.isSwimlaneSelectionEnabled())\n\t\t\t{\n\t\t\t\t// Gets the swimlane at the location (includes\n\t\t\t\t// content area of swimlanes)\n\t\t\t\tswimlane = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\n\t\t\t// Selects the swimlane and consumes the event\n\t\t\tif (swimlane != null)\n\t\t\t{\n\t\t\t\tthis.selectCellForEvent(swimlane, evt);\n\t\t\t}\n\n\t\t\t// Ignores the event if the control key is pressed\n\t\t\telse if (!this.isToggleEvent(evt))\n\t\t\t{\n\t\t\t\tthis.clearSelection();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: dblClick\n *\n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *\n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n *\n * Example listener for this event.\n *\n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end)\n *\n * Parameters:\n *\n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n *\n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n *\n * Parameters:\n *\n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n *\n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n *\n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n *\n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n *\n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n *\n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n *\n * To fit and center the graph, the following code can be used.\n *\n * (code)\n * var margin = 2;\n * var max = 3;\n *\n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n *\n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n *\n * Parameters:\n *\n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n *\n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\n\t\tvar width = Math.max(0, bounds.x + bounds.width + 2 * border * this.view.scale);\n\t\tvar height = Math.max(0, bounds.y + bounds.height + 2 * border * this.view.scale);\n\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t\troot.style.width = '100%';\n\t\t\t\troot.style.height = '100%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n *\n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n *\n * Invokes from <sizeDidChange> to redraw the page breaks.\n *\n * Parameters:\n *\n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount;\n\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCellStyle\n *\n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or an empty object,\n * if no style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n *\n * Parameters:\n *\n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = new Object();\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n *\n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n *\n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n *\n * Parameters:\n *\n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n *\n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n *\n * Parameter:\n *\n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n *\n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n *\n * Parameter:\n *\n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar state = this.view.getState(cells[0]);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cells[0]);\n\n\t\tif (style != null)\n\t\t{\n\t\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\t\tthis.setCellStyles(key, value, cells);\n\t\t}\n\t}\n\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n *\n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n *\n * Parameters:\n *\n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n *\n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n *\n * Parameters:\n *\n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n *\n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n *\n * Parameters:\n *\n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar state = this.view.getState(cells[0]);\n\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cells[0]);\n\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\t\tvalue = !((current & flag) == flag);\n\t\t\t}\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n *\n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n *\n * Parameters:\n *\n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n *\n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n *\n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n *\n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var state = this.view.getState(edge);\n *     var style = (state != null) ? state.style : this.getCellStyle(edge);\n *\n *     if (style != null)\n *     {\n *       var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *           mxConstants.ELBOW_HORIZONTAL);\n *       var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *           mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *       this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *     }\n *   }\n * };\n * (end)\n *\n * Parameters:\n *\n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n *\n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n *\n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n *\n * Parameters:\n *\n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n *\n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n *\n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n *\n * Parameters:\n *\n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 0 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n *\n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n *\n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n *\n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n *\n * The following code can be used to set the style of new group cells.\n *\n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *\n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n *\n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n *\n * Parameters:\n *\n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\n\t\t// Finds the cells with children\n\t\tvar tmp = [];\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getChildCount(cells[i]) > 0)\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\n\t\tcells = tmp;\n\t}\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n *\n * Hook to remove the groups after <ungroupCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n *\n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n *\n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n *\n * Parameters:\n *\n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar left = 0;\n\t\t\t\t\t\tvar top = 0;\n\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar size = this.getStartSize(cells[i]);\n\t\t\t\t\t\t\tleft = size.width;\n\t\t\t\t\t\t\ttop = size.height;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - left - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - top - topBorder);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + left + leftBorder + rightBorder);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + top + topBorder + bottomBorder);\n\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + left - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + top - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n *\n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n *\n * Returns the clone for the given cell. Uses <cloneCells>.\n *\n * Parameters:\n *\n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n *\n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\t\tif (pts != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\n\t\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (src == null && pts[0] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\n\t\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\n\t\t\t\t\t\t\t\t\tif (trg == null && pts[n] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\t\tvar points = g.points;\n\n\t\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n *\n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n *\n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n *\n * For adding image cells, the style parameter can be assigned as\n *\n * (code)\n * stylename;image=imageUrl\n * (end)\n *\n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n *\n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n *\n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\n\treturn vertex;\n};\n\n/**\n * Function: insertEdge\n *\n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n *\n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n *\n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n *\n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n *\n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n *\n * Parameters:\n *\n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n *\n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n *\n * Parameters:\n *\n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n *\n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n *\n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n *\n * Resizes the specified cell to just fit around the its label and/or children\n *\n * Parameters:\n *\n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n *\n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\telse\n\t{\n\t\tcells = cells.slice();\n\n\t\t// Removes edges that are currently not\n\t\t// visible as those cannot be updated\n\t\tvar edges = this.getDeletableCells(this.getAllEdges(cells));\n\t\tvar dict = new mxDictionary();\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.view.getState(edges[i]) == null &&\n\t\t\t\t!dict.get(edges[i]))\n\t\t\t{\n\t\t\t\tdict.put(edges[i], true);\n\t\t\t\tcells.push(edges[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS,\n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n *\n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not being removed\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks if terminal is being removed\n\t\t\t\t\t\tvar terminal = this.model.getTerminal(edge, source);\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar tmp = terminal;\n\n\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tvar state = this.view.getState(edge);\n\n\t\t\t\t\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\tpts[n].x / scale - tr.x - state.origin.x,\n\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y - state.origin.y), source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Fallback to center of terminal if routing\n\t\t\t\t\t\t\t\t// points are not available to add new point\n\t\t\t\t\t\t\t\t// KNOWN: Should recurse to find parent offset\n\t\t\t\t\t\t\t\t// of edge for nested groups but invisible edges\n\t\t\t\t\t\t\t\t// should be removed in removeCells step\n\t\t\t\t\t\t\t\tvar tstate = this.view.getState(terminal);\n\n\t\t\t\t\t\t\t\tif (tstate != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterX() / scale - tr.x,\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterY() / scale - tr.y), source);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t\t\t\tthis.model.setTerminal(edge, null, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdict.put(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n *\n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n *\n * Parameters:\n *\n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tvar parent = this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n *\n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n *\n * Parameters:\n *\n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n *\n * Sets the visible state of the specified cells.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n *\n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n *\n * Parameters:\n *\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n *\n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n *\n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n *\n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n *\n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n *\n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n *\n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n *\n * Parameters:\n *\n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n *\n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n *\n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n *\n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *\n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n *\n *   return result;\n * };\n * (end)\n *\n * Parameters:\n *\n * cell - <mxCell> for which the preferred size should be returned.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell)\n{\n\tvar result = null;\n\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.getState(cell) || this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value);\n\t\t\t\t}\n\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize, style[mxConstants.STYLE_FONTFAMILY]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n *\n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n *\n * Parameters:\n *\n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n *\n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t\t'cells', cells, 'bounds', bounds));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n *\n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n *\n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n *\n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *\n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *\n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *\n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *\n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.cellResized(cells[i], bounds[i], false, recurse);\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t\t'cells', cells, 'bounds', bounds));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: cellResized\n *\n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n *\n * Parameters:\n *\n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null && (geo.x != bounds.x || geo.y != bounds.y ||\n\t\tgeo.width != bounds.width || geo.height != bounds.height))\n\t{\n\t\tgeo = geo.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeChildCells\n *\n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n *\n * Parameters:\n *\n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = newGeo.width / geo.width;\n\tvar dy = newGeo.height / geo.height;\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n *\n * Constrains the children of the given cell using <constrainChild>.\n *\n * Parameters:\n *\n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n *\n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n *\n * Parameters:\n *\n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\tgeo = geo.clone();\n\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n *\n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n *\n * Parameters:\n *\n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n *\n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n *\n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n *\n * Use the following code to move all cells in the graph.\n *\n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n *\n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n *\n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(parent);\n\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(parent);\n\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n *\n * Returns the <mxRectangle> inside which a cell is to be kept.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\n\t\t\t\t\tvar state = this.view.getState(parent);\n\t\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n *\n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n *\n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n *\n * Parameters:\n *\n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n *\n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n *\n * Resets the control points of the given edge.\n *\n * Parameters:\n *\n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n *\n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n *\n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n *\n * Parameters:\n *\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n *\n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n *\n * Parameters:\n *\n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\n\tvar perimeter = false;\n\tvar dx = 0, dy = 0;\n\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\n\t\t//Add entry/exit offset\n\t\tdx = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DX : mxConstants.STYLE_ENTRY_DX]);\n\t\tdy = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DY : mxConstants.STYLE_ENTRY_DY]);\n\n\t\tdx = isFinite(dx)? dx : 0;\n\t\tdy = isFinite(dy)? dy : 0;\n\t}\n\n\treturn new mxConnectionConstraint(point, perimeter, null, dx, dy);\n};\n\n/**\n * Function: setConnectionConstraint\n *\n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n *\n * Parameters:\n *\n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, constraint.dx, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, constraint.dy, [edge]);\n\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n *\n * Parameters:\n *\n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint)\n{\n\tvar point = null;\n\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tvar scale = this.view.scale;\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\n\tif (point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n *\n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n *\n * Parameters:\n *\n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n *\n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n *\n * Parameters:\n *\n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n *\n * Disconnects the given edges from the terminals which are not in the\n * given array.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n *\n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n\n/**\n * Function: getTranslateForRoot\n *\n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n *\n * Example:\n *\n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n *\n * (code)\n * var offset = new mxPoint(0, 0);\n *\n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n *\n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n *\n *   cell = this.model.getParent(cell);\n * }\n *\n * return offset;\n * (end)\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n *\n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n *\n * A typical implementation is the following:\n *\n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *\n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n *\n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n *\n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n *\n * Parameters:\n *\n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n *\n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n *\n * Parameters:\n *\n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n *\n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\n\t\tvar state = this.view.getState(current);\n\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n *\n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n *\n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n *\n * Parameters:\n *\n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n\n/**\n * Function: getGraphBounds\n *\n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n *\n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n *\n * Parameters:\n *\n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\n\tvar result = this.view.getBounds(cells);\n\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n *\n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n *\n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n *\n * This can then be used to move cells to the origin:\n *\n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n *\n * Or to translate the graph view:\n *\n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar pts = geo.points;\n\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: refresh\n *\n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n *\n * Parameters:\n *\n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n *\n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n *\n * Parameters:\n *\n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\n\treturn value;\n};\n\n/**\n * Function: panGraph\n *\n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n *\n * Parameters:\n *\n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.shiftPreview1 = null;\n\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n *\n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n *\n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n *\n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n *\n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n *\n * Centers the graph in the container.\n *\n * Parameters:\n *\n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar cw = this.container.clientWidth;\n\tvar ch = this.container.clientHeight;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x * s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y * s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n *\n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\n\t\t\tthis.view.setScale(scale);\n\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n *\n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n *\n * Note that the input rectangular must be un-scaled and un-translated.\n *\n * Parameters:\n *\n * rect - The un-scaled and un-translated rectangluar region that should be just visible\n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the\n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n *\n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n *\n * To center a given graph if the <container> has no scrollbars, use the following code.\n *\n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n *\n * Parameters:\n *\n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n *\n * Pans the graph so that it shows the given rectangle.\n *\n * Parameters:\n *\n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n *\n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n *\n * Parameters:\n *\n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n *\n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n *\n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n *\n * Parameters:\n *\n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n *\n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n *\n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n *\n * Parameters:\n *\n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n *\n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n *\n * Parameters:\n *\n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n *\n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n *\n * Parameters:\n *\n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\n\tvar tmp = this.view.getEdgeStyle(edge);\n\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n *\n * Returns true if the given cell state is a loop.\n *\n * Parameters:\n *\n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n *\n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n *\n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n *\n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n *\n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n *\n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n *\n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n *\n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n *\n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *\n * Parameters:\n *\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n *\n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n *\n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n *\n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *\n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *\n * Parameters:\n *\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\n\t{\n\t\treturn null;\n\t}\n\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n *\n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n *\n * Parameters:\n *\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n *\n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n *\n * Paramters:\n *\n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\n\t\tisValid = isValid && warn == null;\n\t}\n\n\tvar warning = '';\n\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n *\n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n *\n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n *\n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n *\n * Sets the new <backgroundImage>.\n *\n * Parameters:\n *\n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n *\n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n *\n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n *\n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n *\n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n *\n * See also: <cellLabelChanged>.\n *\n * Parameters:\n *\n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\n\treturn '';\n};\n\n/**\n * Function: getLabel\n *\n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n *\n * To truncate a label to match the size of the cell, the following code\n * can be used.\n *\n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n *\n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n *\n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n *\n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   }\n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n *\n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n *\n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *\n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n *\n * Parameters:\n *\n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n *\n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n *\n * Parameters:\n *\n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n\n/**\n * Function: isHtmlLabels\n *\n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n\n/**\n * Function: setHtmlLabels\n *\n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n *\n * This enables wrapping for HTML labels.\n *\n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n *\n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n *\n * Example:\n *\n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *\n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *\n *   return tmp;\n * }\n *\n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n *\n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n *\n * Parameters:\n *\n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn (style != null) ? style[mxConstants.STYLE_WHITE_SPACE] == 'wrap' : false;\n};\n\n/**\n * Function: isLabelClipped\n *\n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n *\n * Parameters:\n *\n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn (style != null) ? style[mxConstants.STYLE_OVERFLOW] == 'hidden' : false;\n};\n\n/**\n * Function: getTooltip\n *\n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n *\n * Parameters:\n *\n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n *\n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n *\n * Example:\n *\n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n *\n * Replaces all tooltips with the string Hello, World!\n *\n * Parameters:\n *\n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n *\n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n *\n * Parameters:\n *\n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n *\n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n *\n * Parameters:\n *\n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n *\n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n *\n * Parameters:\n *\n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n *\n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n *\n * Parameters:\n *\n * swimlane - <mxCell> whose start size should be returned.\n */\nmxGraph.prototype.getStartSize = function(swimlane)\n{\n\tvar result = new mxRectangle();\n\tvar state = this.view.getState(swimlane);\n\tvar style = (state != null) ? state.style : this.getCellStyle(swimlane);\n\n\tif (style != null)\n\t{\n\t\tvar size = parseInt(mxUtils.getValue(style,\n\t\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\n\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t{\n\t\t\tresult.height = size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.width = size;\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getImage\n *\n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n *\n * Parameters:\n *\n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: getVerticalAlign\n *\n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n *\n * Parameters:\n *\n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n *\n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n *\n * Parameters:\n *\n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n *\n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n *\n * Parameters:\n *\n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n *\n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n *\n * Parameters:\n *\n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n *\n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n *\n * Parameters:\n *\n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n *\n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n *\n * Sets the value of <border>.\n *\n * Parameters:\n *\n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n *\n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n *\n * Parameters:\n *\n * cell - <mxCell> to be checked.\n */\nmxGraph.prototype.isSwimlane = function (cell)\n{\n\tif (cell != null)\n\t{\n\t\tif (this.model.getParent(cell) != this.model.getRoot())\n\t\t{\n\t\t\tvar state = this.view.getState(cell);\n\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\t\tif (style != null && !this.model.isEdge(cell))\n\t\t\t{\n\t\t\t\treturn style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n *\n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n *\n * Sets <resizeContainer>.\n *\n * Parameters:\n *\n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n *\n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n *\n * Parameters:\n *\n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n *\n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n *\n * Sets <escapeEnabled>.\n *\n * Parameters:\n *\n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n *\n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n *\n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n *\n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n *\n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n *\n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n *\n * Parameters:\n *\n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n *\n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n *\n * Parameters:\n *\n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n *\n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n *\n * Parameters:\n *\n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n *\n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n *\n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0.\n *\n * Parameters:\n *\n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n *\n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n *\n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n *\n * Parameters:\n *\n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n *\n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n *\n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n *\n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n *\n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n *\n * To add a new style for making cells (un)selectable, use the following code.\n *\n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var state = this.view.getState(cell);\n *   var style = (state != null) ? state.style : this.getCellStyle(cell);\n *\n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n *\n * You can then use the new style as shown in this example.\n *\n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n *\n * Parameters:\n *\n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n *\n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n *\n * Parameters:\n *\n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n *\n * Sets <cellsDeletable>.\n *\n * Parameters:\n *\n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n *\n * Parameters:\n *\n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n *\n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n *\n * Parameters:\n *\n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n *\n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n *\n * Parameters:\n *\n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n *\n * Specifies if the grid should be enabled.\n *\n * Parameters:\n *\n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n *\n * Specifies if the ports should be enabled.\n *\n * Parameters:\n *\n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n *\n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n *\n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n *\n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n *\n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n *\n * Parameters:\n *\n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n *\n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n *\n * Parameters:\n *\n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n *\n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n *\n * Parameters:\n *\n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n *\n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n *\n * Parameters:\n *\n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n *\n * Specifies if edges should be connectable.\n *\n * Parameters:\n *\n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n *\n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n *\n * Parameters:\n *\n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n *\n * Specifies if loops are allowed.\n *\n * Parameters:\n *\n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n *\n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n *\n * Parameters:\n *\n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n *\n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n *\n * Parameters:\n *\n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n *\n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n *\n * Parameters:\n *\n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n *\n * Parameters:\n *\n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n *\n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n *\n * Parameters:\n *\n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n *\n * Parameters:\n *\n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n *\n * Parameters:\n *\n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n *\n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n *\n * Parameters:\n *\n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n *\n * Parameters:\n *\n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n *\n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n *\n * Parameters:\n *\n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n *\n * Parameters:\n *\n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n *\n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\n/**\n * Function: isValidTarget\n *\n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n *\n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n *\n * Parameters:\n *\n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n *\n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n *\n * Parameters:\n *\n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function()\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n *\n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n *\n * Parameters:\n *\n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n *\n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n *\n * Parameters:\n *\n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n *\n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n *\n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n *\n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n *\n * Parameters:\n *\n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n *\n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n *\n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n *\n * Parameters:\n *\n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n *\n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n *\n * Parameters:\n *\n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n *\n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n *\n * Sets <extendParents>.\n *\n * Parameters:\n *\n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n *\n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n *\n * Sets <extendParentsOnAdd>.\n *\n * Parameters:\n *\n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n *\n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n *\n * Sets <extendParentsOnMove>.\n *\n * Parameters:\n *\n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n *\n * Returns <recursiveResize>.\n *\n * Parameters:\n *\n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n *\n * Sets <recursiveResize>.\n *\n * Parameters:\n *\n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n *\n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n *\n * Parameters:\n *\n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n *\n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n *\n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n *\n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n *\n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n *\n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n *\n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n *\n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\n/**\n * Function: isAllowOverlapParent\n *\n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n *\n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n *\n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n *\n * Parameters:\n *\n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n *\n * Parameters:\n *\n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n *\n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n *\n * This function should only be used if <isDropEnabled> returns true.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n *\n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n *\n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n *\n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n *\n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n *\n * Parameters:\n *\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tparent = parent || this.getDefaultParent();\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isSwimlane(child))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(child);\n\n\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn child;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n *\n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n *\n * Parameters:\n *\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: intersects\n *\n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n *\n * Parameters:\n *\n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n *\n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n *\n * Parameters:\n *\n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n *\n * Returns the visible child vertices of the given parent.\n *\n * Parameters:\n *\n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\n/**\n * Function: getChildEdges\n *\n * Returns the visible child edges of the given parent.\n *\n * Parameters:\n *\n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n *\n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n *\n * Parameters:\n *\n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getConnections\n *\n * Returns all visible edges connected to the given cell without loops.\n *\n * Parameters:\n *\n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n *\n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n *\n * Parameters:\n *\n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n *\n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n *\n * Parameters:\n *\n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\n/**\n * Function: getEdges\n *\n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n *\n * Parameters:\n *\n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only\n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n *\n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n *\n * Parameters:\n *\n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n *\n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n *\n * Parameters:\n *\n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * source - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\n\tvar terminals = [];\n\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n *\n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n *\n * Parameters:\n *\n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n *\n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n *\n * Parameters:\n *\n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\n\treturn p;\n };\n\n/**\n * Function: getCells\n *\n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n *\n * Parameters:\n *\n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result)\n{\n\tresult = (result != null) ? result : [];\n\n\tif (width > 0 || height > 0)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && this.isCellVisible(cell))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n *\n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n *\n * Parameters:\n *\n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n *\n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n *\n * Parameters:\n *\n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\n\treturn roots;\n};\n\n/**\n * Function: traverse\n *\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n *\n * Example:\n *\n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n *\n * Parameters:\n *\n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n *\n * Returns true if the given cell is selected.\n *\n * Parameters:\n *\n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n *\n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n *\n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n *\n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\n/**\n * Function: getSelectionCell\n *\n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n *\n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n *\n * Sets the selection cell.\n *\n * Parameters:\n *\n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n *\n * Sets the selection cell.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n *\n * Adds the given cell to the selection.\n *\n * Parameters:\n *\n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n *\n * Adds the given cells to the selection.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n *\n * Removes the given cell from the selection.\n *\n * Parameters:\n *\n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n *\n * Removes the given cells from the selection.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n *\n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n *\n * Parameters:\n *\n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n *\n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n *\n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n *\n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n *\n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n *\n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n *\n * Parameters:\n *\n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\n\tvar childCount = this.model.getChildCount(parent);\n\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n *\n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n *\n * Parameters:\n *\n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\n\tvar cells = (descendants) ? this.model.filterDescendants(function(cell)\n\t{\n\t\treturn cell != parent;\n\t}, parent) : this.model.getChildren(parent);\n\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n *\n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent)\n{\n\tthis.selectCells(true, false, parent);\n};\n\n/**\n * Function: selectVertices\n *\n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n *\n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n *\n * Parameters:\n *\n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent)\n{\n\tparent = parent || this.getDefaultParent();\n\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t((this.model.getChildCount(cell) == 0 && this.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\n\tvar cells = this.model.filterDescendants(filter, parent);\n\tthis.setSelectionCells(cells);\n};\n\n/**\n * Function: selectCellForEvent\n *\n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n *\n * Parameters:\n *\n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n *\n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n *\n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n *\n * Parameters:\n *\n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n *\n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n *\n * Parameters:\n *\n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n *\n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n *\n * Parameters:\n *\n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector ||\n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n *\n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n *\n * Parameters:\n *\n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n *\n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n *\n * Parameters:\n *\n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n *\n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n *\n * Parameters:\n *\n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n *\n * Removes the specified graph listener.\n *\n * Parameters:\n *\n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n *\n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n *\n * Parameters:\n *\n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n *\n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n *\n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && evtName == mxEvent.MOUSE_DOWN && !mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n *\n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n *\n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n *\n * Parameters:\n *\n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n *\n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n *\n * Parameters:\n *\n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n *\n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n *\n * Parameters:\n *\n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\n\t\treturn;\n\t}\n\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n *\n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n *\n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n *\n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *\n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *\n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *\n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n *\n * Parameters:\n *\n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n\n__mxOutput.mxGraph = typeof mxGraph !== 'undefined' ? mxGraph : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n *\n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n *\n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n *\n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n *\n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n *\n * Parameters:\n *\n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n *\n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n *\n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n *\n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n *\n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n *\n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n *\n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n *\n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n *\n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n *\n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *\n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *\n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *\n *   return bounds;\n * };\n * (end)\n *\n * Parameters:\n *\n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n *\n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n\n__mxOutput.mxCellOverlay = typeof mxCellOverlay !== 'undefined' ? mxCellOverlay : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n *\n * Example:\n *\n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n *\n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n *\n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n *\n * To move the graph to the top, left corner the following code can be used.\n *\n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n *\n * To toggle the suspended mode, the following can be used.\n *\n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n *\n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n *\n * Parameters:\n *\n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n *\n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n *\n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n *\n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n *\n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n *\n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n *\n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n *\n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n *\n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n *\n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n *\n * Minimum scale to be used. Default is 0.001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n *\n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n *\n * (code)\n * nav.suspended = !nav.suspended;\n *\n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n *\n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n *\n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\n\treturn graph;\n};\n\n/**\n * Function: init\n *\n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation\n * updates <enabled>.\n *\n * Parameters:\n *\n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n *\n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n *\n * Parameters:\n *\n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n *\n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n *\n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n *\n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n *\n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getOutlineOffset\n *\n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n *\n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\n\t\t\tvar navView = this.outline.getView();\n\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\n\t\t\tvar off = this.getOutlineOffset(scale);\n\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\n\t\t\tvar b = this.selectionBorder.bounds;\n\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n *\n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n *\n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n *\n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n *\n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *\n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *\n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n\n__mxOutput.mxOutline = typeof mxOutline !== 'undefined' ? mxOutline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n *\n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n *\n * Example:\n *\n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n *\n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n *\n * Constructor: mxMultiplicity\n *\n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n *\n * Parameters:\n *\n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n *\n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n *\n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n *\n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n *\n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n *\n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n *\n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'.\n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n *\n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n *\n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n *\n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n *\n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n *\n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null &&\n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n *\n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source &&\n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n *\n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n *\n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n__mxOutput.mxMultiplicity = typeof mxMultiplicity !== 'undefined' ? mxMultiplicity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n *\n * Implements a layout manager that runs a given layout after any changes to the graph:\n *\n * Example:\n *\n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell)\n * {\n *   return layout;\n * };\n * (end)\n *\n * Event: mxEvent.LAYOUT_CELLS\n *\n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n *\n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n *\n * graph - Reference to the enclosing graph.\n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n *\n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n *\n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: updateHandler\n *\n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.updateHandler = null;\n\n/**\n * Variable: moveHandler\n *\n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation\n * updates <enabled>.\n *\n * Parameters:\n *\n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n *\n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n *\n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n *\n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n *\n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t}\n\n\tthis.graph = graph;\n\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t}\n};\n\n/**\n * Function: getLayout\n *\n * Returns the layout to be executed for the given graph and parent.\n */\nmxLayoutManager.prototype.getLayout = function(parent)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n *\n * Called from the undoHandler.\n *\n * Parameters:\n *\n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tvar cells = this.getCellsForChanges(undoableEdit.changes);\n\tvar model = this.getGraph().getModel();\n\n\t// Adds all descendants\n\tvar tmp = [];\n\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\ttmp = tmp.concat(model.getDescendants(cells[i]));\n\t}\n\n\tcells = tmp;\n\n\t// Adds all parent ancestors\n\tif (this.isBubbling())\n\t{\n\t\ttmp = model.getParents(cells);\n\n\t\twhile (tmp.length > 0)\n\t\t{\n\t\t\tcells = cells.concat(tmp);\n\t\t\ttmp = model.getParents(tmp);\n\t\t}\n\t}\n\n\tthis.executeLayoutForCells(cells);\n};\n\n/**\n * Function: executeLayout\n *\n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\t// Adds reverse to this array to avoid duplicate execution of leafes\n\t// Works like capture/bubble for events, first executes all layout\n\t// from top to bottom and in reverse order and removes duplicates.\n\tvar sorted = mxUtils.sortCells(cells, true);\n\tsorted = sorted.concat(sorted.slice().reverse());\n\tthis.layoutCells(sorted);\n};\n\n/**\n * Function: cellsMoved\n *\n * Called from the moveHandler.\n *\n * Parameters:\n *\n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\tvar model = this.getGraph().getModel();\n\n\t\t// Checks if a layout exists to take care of the moving if the\n\t\t// parent itself is not being moved\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = model.getParent(cells[i]);\n\n\t\t\tif (mxUtils.indexOf(cells, parent) < 0)\n\t\t\t{\n\t\t\t\tvar layout = this.getLayout(parent);\n\n\t\t\t\tif (layout != null)\n\t\t\t\t{\n\t\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getCellsForEdit\n *\n * Returns the cells to be layouted for the given sequence of changes.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar dict = new mxDictionary();\n\tvar result = [];\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cells = this.getCellsForChange(change);\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\tif (cells[j] != null && !dict.get(cells[j]))\n\t\t\t\t{\n\t\t\t\t\tdict.put(cells[j], true);\n\t\t\t\t\tresult.push(cells[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n *\n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tvar model = this.getGraph().getModel();\n\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn [change.child, change.previous, model.getParent(change.child)];\n\t}\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\treturn [change.cell, model.getParent(change.cell)];\n\t}\n\telse if (change instanceof mxVisibleChange || change instanceof mxStyleChange)\n\t{\n\t\treturn [change.cell];\n\t}\n\n\treturn [];\n};\n\n/**\n * Function: layoutCells\n *\n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar last = null;\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tif (this.executeLayout(this.getLayout(cells[i]), cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tlast = cells[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n *\n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(layout, parent)\n{\n\tvar result = false;\n\n\tif (layout != null && parent != null)\n\t{\n\t\tlayout.execute(parent);\n\t\tresult = true;\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: destroy\n *\n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxLayoutManager = typeof mxLayoutManager !== 'undefined' ? mxLayoutManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n *\n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n *\n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n *\n * graph - Reference to the enclosing graph.\n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n *\n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n *\n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n *\n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n *\n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation\n * updates <enabled>.\n *\n * Parameters:\n *\n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n *\n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n *\n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n *\n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n *\n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n *\n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n *\n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n *\n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n *\n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\n\tthis.graph = graph;\n\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n *\n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n *\n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n *\n * Called if any cells have been added.\n *\n * Parameters:\n *\n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n *\n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n *\n * Parameters:\n *\n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n *\n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n *\n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n *\n * Parameters:\n *\n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\n\t\tvar childCount = model.getChildCount(swimlane);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxSwimlaneManager = typeof mxSwimlaneManager !== 'undefined' ? mxSwimlaneManager : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n *\n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\n\t\t\t\toldPaint.apply(this, arguments);\n\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\n\t\treturn null;\n\t};\n\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n *\n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n\n__mxOutput.mxTemporaryCellStates = typeof mxTemporaryCellStates !== 'undefined' ? mxTemporaryCellStates : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n *\n * Implements a live preview for moving cells.\n *\n * Constructor: mxCellStatePreview\n *\n * Constructs a move preview for the given graph.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n *\n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n *\n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\n\t    var childCount = model.getChildCount(state.cell);\n\n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\n\t\tthis.graph.cellRenderer.redraw(state);\n\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\n\t    var childCount = model.getChildCount(state.cell);\n\n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n\n__mxOutput.mxCellStatePreview = typeof mxCellStatePreview !== 'undefined' ? mxCellStatePreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n *\n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n *\n * Constructor: mxConnectionConstraint\n *\n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n *\n * Parameters:\n *\n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name, dx, dy)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n\tthis.dx = dx? dx : 0;\n\tthis.dy = dy? dy : 0;\n};\n\n/**\n * Variable: point\n *\n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n *\n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n *\n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n\n/**\n * Variable: dx\n *\n * Optional float that specifies the horizontal offset of the constraint.\n */\nmxConnectionConstraint.prototype.dx = null;\n\n/**\n * Variable: dy\n *\n * Optional float that specifies the vertical offset of the constraint.\n */\nmxConnectionConstraint.prototype.dy = null;\n\n\n__mxOutput.mxConnectionConstraint = typeof mxConnectionConstraint !== 'undefined' ? mxConnectionConstraint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n *\n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n *\n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n *\n * Constructor: mxGraphHandler\n *\n * Constructs an event handler that creates handles for the\n * selection cells.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.updatePreviewShape();\n\t\tthis.updateHint();\n\t});\n\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.first != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\t\t\t\tthis.updatePreviewShape();\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Resets the handler if cells have vanished\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n *\n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n *\n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n *\n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n *\n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: guide\n *\n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n *\n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n *\n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n *\n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n *\n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n *\n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: removeEmptyParents\n *\n * If empty parents should be removed from the model after all child cells\n * have been moved out. Default is true.\n */\nmxGraphHandler.prototype.removeEmptyParents = false;\n\n/**\n * Variable: connectOnDrop\n *\n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n *\n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n *\n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n *\n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n *\n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n *\n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n *\n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n *\n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Function: isEnabled\n *\n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n *\n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n *\n * Sets <cloneEnabled>.\n *\n * Parameters:\n *\n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n *\n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n *\n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n *\n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n *\n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n *\n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n *\n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: getInitialCellForEvent\n *\n * Hook to return initial cell for the given event.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: isDelayedSelection\n *\n * Hook to return true for delayed selections.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\treturn this.graph.isCellSelected(cell);\n};\n\n/**\n * Function: consumeMouseEvent\n *\n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click event on the link.\n *\n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *\n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n *\n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges ||\n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n *\n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n *\n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n *\n * Parameters:\n *\n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n *\n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n *\n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n *\n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\n\treturn shape;\n};\n\n/**\n * Function: start\n *\n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t}\n};\n\n/**\n * Function: useGuidesForEvent\n *\n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n *\n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n *\n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar s = this.graph.view.scale;\n\n\treturn new mxPoint(this.roundLength((point.x - this.first.x) / s) * s,\n\t\tthis.roundLength((point.y - this.first.y) / s) * s);\n};\n\n/**\n * Function: updateHint\n *\n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n *\n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n *\n * Hook for rounding the unscaled vector. This uses Math.round.\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 2) / 2;\n};\n\n/**\n * Function: mouseMove\n *\n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\n\t\tvar delta = this.getDelta(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || Math.abs(dx) > tol || Math.abs(dy) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t\t\t}\n\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar hideGuide = true;\n\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, new mxPoint(dx, dy), gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t\tdx = delta.x;\n\t\t\t\tdy = delta.y;\n\t\t\t}\n\t\t\telse if (gridEnabled)\n\t\t\t{\n\t\t\t\tvar trx = graph.getView().translate;\n\t\t\t\tvar scale = graph.getView().scale;\n\n\t\t\t\tvar tx = this.bounds.x - (graph.snap(this.bounds.x / scale - trx.x) + trx.x) * scale;\n\t\t\t\tvar ty = this.bounds.y - (graph.snap(this.bounds.y / scale - trx.y) + trx.y) * scale;\n\t\t\t\tvar v = this.snap(new mxPoint(dx, dy));\n\n\t\t\t\tdx = v.x - tx;\n\t\t\t\tdy = v.y - ty;\n\t\t\t}\n\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(dx) > Math.abs(dy))\n\t\t\t\t{\n\t\t\t\t\tdy = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdx = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.currentDx = dx;\n\t\t\tthis.currentDy = dy;\n\t\t\tthis.updatePreviewShape();\n\n\t\t\tvar target = null;\n\t\t\tvar cell = me.getCell();\n\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\n\t\t\tif (state != null && (graph.model.getParent(this.cell) != target || clone))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n *\n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx - this.graph.panDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy - this.graph.panDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: setHighlightColor\n *\n * Sets the color of the rectangle used to highlight drop targets.\n *\n * Parameters:\n *\n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tvar graph = this.graph;\n\n\t\tif (this.cell != null && this.first != null && this.shape != null &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar cell = me.getCell();\n\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: selectDelayed\n *\n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.isCellSelected(this.cell) || !this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tthis.graph.selectCellForEvent(this.cell, me.getEvent());\n\t}\n};\n\n/**\n * Function: reset\n *\n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tthis.destroyShapes();\n\tthis.removeHint();\n\n\tthis.cellWasClicked = false;\n\tthis.delayedSelection = false;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.guides = null;\n\tthis.first = null;\n\tthis.cell = null;\n\tthis.target = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n *\n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: moveCells\n *\n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\n\t// Removes cells from parent\n\tvar parent = this.graph.getModel().getParent(this.cell);\n\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(parent, cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\n\tthis.graph.getModel().beginUpdate();\n\ttry\n\t{\n\t\tvar parents = [];\n\n\t\t// Removes parent if all child cells are removed\n\t\tif (!clone && target != null && this.removeEmptyParents)\n\t\t{\n\t\t\t// Collects all non-selected parents\n\t\t\tvar dict = new mxDictionary();\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\n\t\t\t// LATER: Recurse up the cell hierarchy\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar par = this.graph.model.getParent(cells[i]);\n\n\t\t\t\tif (par != null && !dict.get(par))\n\t\t\t\t{\n\t\t\t\t\tdict.put(par, true);\n\t\t\t\t\tparents.push(par);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Passes all selected cells in order to correctly clone or move into\n\t\t// the target cell. The method checks for each cell if its movable.\n\t\tcells = this.graph.moveCells(cells, dx - this.graph.panDx / this.graph.view.scale,\n\t\t\t\tdy - this.graph.panDy / this.graph.view.scale, clone, target, evt);\n\n\t\t// Removes parent if all child cells are removed\n\t\tvar temp = [];\n\n\t\tfor (var i = 0; i < parents.length; i++)\n\t\t{\n\t\t\tif (this.shouldRemoveParent(parents[i]))\n\t\t\t{\n\t\t\t\ttemp.push(parents[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(temp, false);\n\t}\n\tfinally\n\t{\n\t\tthis.graph.getModel().endUpdate();\n\t}\n\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n};\n\n/**\n * Function: moveCells\n *\n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.shouldRemoveParent = function(parent)\n{\n\tvar state = this.graph.view.getState(parent);\n\n\tconsole.log('state', state, this.graph.model.getChildCount(state.cell));\n\n\tif (state != null && (this.graph.model.isEdge(state.cell) || this.graph.model.isVertex(state.cell)) &&\n\t\tthis.graph.isCellDeletable(state.cell) && this.graph.model.getChildCount(state.cell) == 0)\n\t{\n\t\tvar stroke = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\tvar fill = mxUtils.getValue(state.style, mxConstants.STYLE_FILLCOLOR, mxConstants.NONE);\n\n\t\treturn stroke == mxConstants.NONE && fill == mxConstants.NONE;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: destroyShapes\n *\n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n\n__mxOutput.mxGraphHandler = typeof mxGraphHandler !== 'undefined' ? mxGraphHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n *\n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n *\n * Constructor: mxPanningHandler\n *\n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\n\t\t\t\t\tif (this.minScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.max(this.minScale, value);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.maxScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.min(this.maxScale, value);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.graph.view.scale != value)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.zoomTo(value);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t\t    \tif (this.active)\n\t\t    \t{\n\t\t    \t\tthis.reset();\n\t\t    \t}\n\t\t});\n\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n *\n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n *\n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n *\n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n *\n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n *\n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n *\n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n *\n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n *\n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n *\n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n *\n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n *\n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n *\n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n *\n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n *\n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n *\n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n *\n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n *\n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n *\n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n *\n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n *\n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n *\n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n *\n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n *\n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n *\n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *\n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *\n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n *\n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\n\t\t\tme.consume();\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n *\n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n\n__mxOutput.mxPanningHandler = typeof mxPanningHandler !== 'undefined' ? mxPanningHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n *\n * Event handler that creates popupmenus.\n *\n * Constructor: mxPopupMenuHandler\n *\n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n *\n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n *\n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n *\n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n *\n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n *\n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n *\n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n *\n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n *\n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n *\n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n *\n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n *\n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n\n__mxOutput.mxPopupMenuHandler = typeof mxPopupMenuHandler !== 'undefined' ? mxPopupMenuHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n *\n * A helper class to process mouse locations and highlight cells.\n *\n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n *\n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n *\n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n *\n * Constructor: mxCellMarker\n *\n * Constructs a new cell marker.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n *\n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT;\n\n/**\n * Variable: hotspotEnabled\n *\n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n *\n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n *\n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n *\n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n *\n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null;\n\n/**\n * Variable: markedState\n *\n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation\n * updates <enabled>.\n *\n * Parameters:\n *\n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n *\n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n *\n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n *\n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n *\n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n *\n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n *\n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n *\n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n *\n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n *\n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state.\n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n *\n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n *\n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n *\n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n *\n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n *\n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n *\n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n *\n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n *\n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n *\n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n\n__mxOutput.mxCellMarker = typeof mxCellMarker !== 'undefined' ? mxCellMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n *\n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n *\n * Group: Events\n *\n * Event: mxEvent.ADD\n *\n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n *\n * Event: mxEvent.REMOVE\n *\n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n *\n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n *\n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n *\n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n *\n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n *\n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: reset\n *\n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: refresh\n *\n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\n\t// Creates handles for all selection cells\n\tvar tmp = this.graph.getSelectionCells();\n\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t}\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Destroys all unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n};\n\n/**\n * Function: isHandlerActive\n *\n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n *\n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\n\tif (handler != null)\n\t{\n\t\t// Transfers the current state to the new handler\n\t\tvar index = handler.index;\n\t\tvar x = handler.startX;\n\t\tvar y = handler.startY;\n\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\n\t\t\tif (index != null && x != null && y != null)\n\t\t\t{\n\t\t\t\thandler.start(x, y, index);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n *\n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n *\n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n *\n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n\n__mxOutput.mxSelectionCellsHandler = typeof mxSelectionCellsHandler !== 'undefined' ? mxSelectionCellsHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n *\n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n *\n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n *\n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n *\n * Using images to trigger connections:\n *\n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n *\n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n *\n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n *\n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n *\n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n *\n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n *\n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n *\n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n *\n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n *\n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n *\n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n *\n * Event: mxEvent.START\n *\n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n *\n * Event: mxEvent.CONNECT\n *\n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code>\n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n *\n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n *\n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *\n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *\n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n *\n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n *\n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n *\n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n *\n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n *\n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n *\n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n *\n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n *\n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n *\n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n *\n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n *\n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n *\n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n *\n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n *\n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n *\n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n *\n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n *\n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n *\n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n *\n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n *\n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n *\n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n *\n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n *\n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n *\n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation\n * updates <enabled>.\n *\n * Parameters:\n *\n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n *\n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n *\n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n *\n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n *\n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n *\n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n *\n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n *\n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n *\n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n *\n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n *\n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n *\n * Returns <mxGraph.isValidSource> for the given source terminal.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n *\n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n *\n * Parameters:\n *\n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n *\n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n *\n * Parameters:\n *\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n *\n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n *\n * Parameters:\n *\n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n *\n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n *\n * Parameters:\n *\n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n *\n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n *\n * Parameters:\n *\n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\n\t\treturn icons;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n *\n * Redraws the given array of <mxImageShapes>.\n *\n * Parameters:\n *\n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: redrawIcons\n *\n * Redraws the given array of <mxImageShapes>.\n *\n * Parameters:\n *\n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n *\n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n *\n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n *\n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n *\n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph.\n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n *\n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n *\n * Use the following code to create a preview for an existing edge style:\n *\n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *\n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n *\n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n *\n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\n\t\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t\t{\n\t\t\t\tthis.currentState = null;\n\t\t\t}\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\tif (this.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n *\n * Returns true if the given cell does not allow new connections to be created.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n *\n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n *\n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseMove\n *\n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar pt2 = this.first;\n\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2;\n\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\n\t\t\t// Sets the cursor on the current shape\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n *\n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n *\n * Returns the perimeter point for the given target state.\n *\n * Parameters:\n *\n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n *\n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n *\n * Parameters:\n *\n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n *\n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n *\n * Parameters:\n *\n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n *\n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n *\n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n *\n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.dx != c2.dx || c1.dy != c2.dy ||\n\t\tc1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n *\n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n *\n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n *\n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n *\n * Parameters:\n *\n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n *\n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n *\n * Parameters:\n *\n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\n/**\n * Function: getEdgeWidth\n *\n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n *\n * Parameters:\n *\n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n *\n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n *\n * Parameters:\n *\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\n\t\t\t\tvar parent = model.getParent(source);\n\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n *\n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n *\n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n *\n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n *\n * Parameters:\n *\n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\n};\n\n/**\n * Function: getAlignmentTolerance\n *\n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n *\n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n *\n * Parameters:\n *\n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n\n__mxOutput.mxConnectionHandler = typeof mxConnectionHandler !== 'undefined' ? mxConnectionHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n *\n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n *\n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation\n * updates <enabled>.\n *\n * Parameters:\n *\n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n *\n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\n\t\tthis.focusIcons = null;\n\t}\n\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n *\n * Parameters:\n *\n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n *\n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n *\n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n *\n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n *\n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n *\n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n *\n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n *\n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n *\n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\n\t\t}\n\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\n};\n\n/**\n * Function: setFocus\n *\n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n *\n * Create the shape used to paint the highlight.\n *\n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\treturn hl;\n};\n\n/**\n * Function: intersects\n *\n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n *\n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n\n__mxOutput.mxConstraintHandler = typeof mxConstraintHandler !== 'undefined' ? mxConstraintHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n *\n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n *\n * Example:\n *\n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n *\n * Constructor: mxRubberband\n *\n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n *\n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n *\n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n *\n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n *\n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n *\n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n *\n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n *\n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n *\n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n *\n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n *\n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n *\n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isActive\n *\n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n *\n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n *\n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n *\n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n *\n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n\n__mxOutput.mxRubberband = typeof mxRubberband !== 'undefined' ? mxRubberband : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n *\n * Implements a single custom handle for vertices.\n *\n * Constructor: mxHandle\n *\n * Constructs a new handle for the given state.\n *\n * Parameters:\n *\n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n *\n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n *\n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: image\n *\n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n *\n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n *\n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n *\n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function() { };\n\n/**\n * Function: copyStyle\n *\n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n *\n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.positionChanged();\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n *\n * Called after <setPosition> has been called in <processEvent>. This repaints\n * the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n *\n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n *\n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\n\treturn 0;\n};\n\n/**\n * Function: init\n *\n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n *\n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n *\n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n *\n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n *\n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n *\n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha);\n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n *\n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n *\n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n *\n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n *\n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxHandle = typeof mxHandle !== 'undefined' ? mxHandle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n *\n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n *\n * Constructor: mxVertexHandler\n *\n * Constructs an event handler that allows to resize vertices\n * and groups.\n *\n * Parameters:\n *\n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\n\t\t\tthis.reset();\n\t\t});\n\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n *\n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n *\n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n *\n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n *\n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n *\n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n *\n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n *\n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n *\n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n *\n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n *\n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n *\n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: manageSizers\n *\n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n *\n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n *\n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n *\n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n *\n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n *\n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE, mxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n *\n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells) &&\n\t\tthis.state.width >= 2 && this.state.height >= 2;\n};\n\n/**\n * Function: isConstrainedEvent\n *\n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n *\n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n *\n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n *\n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n *\n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n *\n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n *\n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n *\n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n *\n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n *\n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n *\n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n *\n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n *\n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n *\n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n *\n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\n\tfunction checkShape(shape)\n\t{\n\t\treturn shape != null && (me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n *\n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n *\n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 0;\n\n\tif (!me.isConsumed() && this.graph.isEnabled() && (tol > 0 || me.getState() == this.state))\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n *\n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n *\n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.inTolerance = true;\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t\tthis.index = index;\n\t\tthis.startX = x;\n\t\tthis.startY = y;\n\n\t\t// Saves reference to parent state\n\t\tvar model = this.state.view.graph.model;\n\t\tvar parent = model.getParent(this.state.cell);\n\n\t\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t\t{\n\t\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t\t}\n\n\t\t// Creates a preview that can be on top of any HTML label\n\t\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\n\t\t// Creates the border that represents the new bounds\n\t\tif (!this.livePreview || this.isLivePreviewBorder())\n\t\t{\n\t\t\tthis.preview = this.createSelectionShape(this.bounds);\n\n\t\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t\t{\n\t\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\t\tthis.preview.init(this.graph.container);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t\t}\n\t\t}\n\n\t\t// Prepares the handles for live preview\n\t\tif (this.livePreview)\n\t\t{\n\t\t\tthis.hideSizers();\n\n\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotationShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.labelShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[index].node.style.display = '';\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t\t}\n\n\t\t\t// Gets the array of connected edge handlers for redrawing\n\t\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\t\tthis.edgeHandlers = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\n\t\t\t\tif (handler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n *\n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n *\n * Hides all sizers except.\n *\n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n *\n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n *\n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n *\n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n *\n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n *\n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: mouseMove\n *\n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotateVertex(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.resizeVertex(me);\n\t\t\t}\n\n\t\t\tthis.updateHint(me);\n\t\t}\n\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: rotateVertex\n *\n * Rotates the vertex.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n *\n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.abs(Math.sqrt(dx * dx + dy * dy) - 20) * 3;\n\t\tvar raster = Math.max(1, 5 * Math.min(3, Math.max(0, Math.round(80 / Math.abs(dist)))));\n\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\n\tif (this.livePreview)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: rotateVertex\n *\n * Rotates the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\n\tif (this.livePreview)\n\t{\n\t\tthis.updateLivePreview(me);\n\t}\n\n\tif (this.preview != null)\n\t{\n\t\tthis.drawPreview();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n *\n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\n\t// Needed to force update of text bounds\n\tthis.state.unscaledWidth = null;\n\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tindex, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: rotateCell\n *\n * Rotates the given cell to the given rotation.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n *\n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n *\n * Rotates the given cell and its children by the given angle in degrees.\n *\n * Parameters:\n *\n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cell);\n\t\t\t\tvar style = (state != null) ? state.style : this.graph.getCellStyle(cell);\n\n\t\t\t\tif (style != null)\n\t\t\t\t{\n\t\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n *\n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.unscaledBounds = null;\n};\n\n/**\n * Function: resizeCell\n *\n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tdx = Math.round((this.labelShape.bounds.getCenterX() - this.startX) / scale);\n\t\t\tdy = Math.round((this.labelShape.bounds.getCenterY() - this.startY) / scale);\n\n\t\t\tgeo = geo.clone();\n\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += dx;\n\t\t\t\tgeo.offset.y += dy;\n\t\t\t}\n\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n *\n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n *\n * Returns the union of the given bounds and location for the specified\n * handle index.\n *\n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n *\n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *\n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *\n *   return result;\n * };\n * (end)\n *\n * The minWidth/-Height style can then be used as follows:\n *\n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n *\n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n *\n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *\n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *\n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *\n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t}\n\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t}\n\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Redraws the handles and the preview.\n */\nmxVertexHandler.prototype.redraw = function()\n{\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\n\tthis.redrawHandles();\n\tthis.drawPreview();\n};\n\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: redrawHandles\n *\n * Redraws the handles. To hide certain handles the following code can be used.\n *\n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *\n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\tvar s = this.bounds;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\n\t\t\t\tthis.moveSizerTo(this.sizers[8], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\n\tif (this.edgeHandlers != null)\n\t{\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility = (this.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: getRotationHandlePosition\n *\n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: updateParentHighlight\n *\n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\t// If not destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = pstate;\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\t\t\tif (pstate != null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n *\n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\n\tthis.selectionBorder.bounds = this.bounds;\n\tthis.selectionBorder.redraw();\n\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\n\t\tthis.customHandles = null;\n\t}\n};\n\n__mxOutput.mxVertexHandler = typeof mxVertexHandler !== 'undefined' ? mxVertexHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n *\n * To enable adding/removing control points, the following code can be used:\n *\n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n *\n * Note: This experimental feature is not recommended for production use.\n *\n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n *\n * Parameters:\n *\n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n *\n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n *\n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n *\n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n *\n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n *\n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n *\n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n *\n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n *\n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n *\n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n *\n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n *\n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n *\n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n *\n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n *\n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n *\n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n *\n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n *\n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n *\n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n *\n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n *\n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n *\n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n *\n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n *\n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n *\n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Adds highlight for parent group\n\tif (this.parentHighlightEnabled)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\t\tif (pstate != null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t}\n\t\t}\n\t}\n\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\n\tthis.customHandles = this.createCustomHandles();\n\n\tthis.redraw();\n};\n\n/**\n * Function: createCustomHandles\n *\n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n *\n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isAddPointEvent\n *\n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n *\n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n *\n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createSelectionShape\n *\n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n *\n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n *\n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n *\n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n *\n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.EDGE_SELECTION_DASHED;\n};\n\n/**\n * Function: isConnectableCell\n *\n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n *\n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n *\n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\n\t\tvar model = self.graph.getModel();\n\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n *\n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n *\n * Parameters:\n *\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n *\n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\n\t\t\t\t\tbends.push(bend);\n\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n *\n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n *\n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n *\n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n *\n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n *\n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n *\n * Helper method to initialize the given bend.\n *\n * Parameters:\n *\n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n *\n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\tvar minDistSq = null;\n\tvar result = null;\n\n\tfunction checkShape(shape)\n\t{\n\t\tif (shape != null && shape.node.style.display != 'none' && shape.node.style.visibility != 'hidden' &&\n\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t{\n\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\tvar tmp = dx * dx + dy * dy;\n\n\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t{\n\t\t\t\tminDistSq = tmp;\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t{\n\t\tresult = mxEvent.LABEL_HANDLE;\n\t}\n\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.bends[i]))\n\t\t\t{\n\t\t\t\tresult = i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t{\n\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n *\n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n *\n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n *\n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n *\n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n *\n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n *\n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n *\n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n *\n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n *\n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n *\n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n *\n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\n\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n *\n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\n\t\tif (state != null && this.graph.isCellLocked(state.cell))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t}\n\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n *\n * Updates the given preview state taking into account the state of the constraint handler.\n *\n * Parameters:\n *\n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n *\n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n *\n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.marker.getValidState() == me.getState()) ?\n\t\t\t\tmxConstants.DEFAULT_VALID_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n *\n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() && this.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (terminalState != null && this.graph.isCellLocked(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.updateHint(me, this.currentPoint);\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tvar edge = this.state.cell;\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\n\t\t\t}\n\t\t}\n\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n *\n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n *\n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n *\n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n *\n * Parameters:\n *\n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n *\n * Changes the coordinates for the label of the given edge.\n *\n * Parameters:\n *\n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n *\n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n *\n * Parameters:\n *\n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n *\n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n *\n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n *\n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n *\n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n *\n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n *\n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\n\treturn color;\n};\n\n/**\n * Function: redraw\n *\n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function()\n{\n\tthis.abspoints = this.state.absolutePoints.slice();\n\tthis.redrawHandles();\n\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = g.points;\n\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tif (pts != null)\n\t\t{\n\t\t\tif (this.points == null)\n\t\t\t{\n\t\t\t\tthis.points = [];\n\t\t\t}\n\n\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t{\n\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.drawPreview();\n};\n\n/**\n * Function: redrawHandles\n *\n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n *\n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n *\n * Updates and redraws the inner bends.\n *\n * Parameters:\n *\n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n *\n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n *\n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\tif (this.isLabel)\n\t{\n\t\tvar b = this.labelShape.bounds;\n\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\tthis.labelShape.bounds = bounds;\n\t\tthis.labelShape.redraw();\n\t}\n\telse if (this.shape != null)\n\t{\n\t\tthis.shape.apply(this.state);\n\t\tthis.shape.points = this.abspoints;\n\t\tthis.shape.scale = this.state.view.scale;\n\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\tthis.shape.stroke = this.getSelectionColor();\n\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\tthis.shape.isShadow = false;\n\t\tthis.shape.redraw();\n\t}\n\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: refresh\n *\n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.points = [];\n\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.points = this.abspoints;\n\t}\n\n\tif (this.bends != null)\n\t{\n\t\tthis.destroyBends(this.bends);\n\t\tthis.bends = this.createBends();\n\t}\n\n\tif (this.virtualBends != null)\n\t{\n\t\tthis.destroyBends(this.virtualBends);\n\t\tthis.virtualBends = this.createVirtualBends();\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tthis.destroyBends(this.customHandles);\n\t\tthis.customHandles = this.createCustomHandles();\n\t}\n\n\t// Puts label node on top of bends\n\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t{\n\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t}\n};\n\n/**\n * Function: destroyBends\n *\n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\n\tthis.removeHint();\n};\n\n__mxOutput.mxEdgeHandler = typeof mxEdgeHandler !== 'undefined' ? mxEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n *\n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n *\n * Parameters:\n *\n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n *\n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n *\n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n *\n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n *\n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ?\n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n *\n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n *\n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n *\n * Parameters:\n *\n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n *\n * Updates and redraws the inner bends.\n *\n * Parameters:\n *\n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n\n__mxOutput.mxElbowEdgeHandler = typeof mxElbowEdgeHandler !== 'undefined' ? mxElbowEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n *\n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n *\n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n *\n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n *\n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: createBends\n *\n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n *\n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n *\n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n *\n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeSegmentHandler = typeof mxEdgeSegmentHandler !== 'undefined' ? mxEdgeSegmentHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n *\n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n *\n * Example:\n *\n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n *\n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n *\n * Keycodes:\n *\n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n *\n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *\n *   return null;\n * };\n * (end)\n *\n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n *\n * Parameters:\n *\n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n *\n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n *\n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n *\n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n *\n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n *\n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n *\n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling by updating <enabled>.\n *\n * Parameters:\n *\n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n *\n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n *\n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n *\n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n *\n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n *\n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n *\n * Parameters:\n *\n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n *\n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n *\n * Parameters:\n *\n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isGraphEvent\n *\n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n *\n * Parameters:\n *\n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n *\n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n *\n * Parameters:\n *\n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n *\n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n *\n * Parameters:\n *\n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n *\n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n *\n * Parameters:\n *\n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n *\n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n *\n * Parameters:\n *\n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\n\tthis.target = null;\n};\n\n__mxOutput.mxKeyHandler = typeof mxKeyHandler !== 'undefined' ? mxKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n *\n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n *\n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n *\n * Constructor: mxTooltipHandler\n *\n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\n/**\n * Variable: zIndex\n *\n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n *\n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n *\n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n *\n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n *\n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n *\n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n *\n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n *\n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n *\n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n *\n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n *\n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n *\n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n *\n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n *\n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}\n\t}\n\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n *\n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n *\n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n *\n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n *\n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y)\n{\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\n\t\tthis.div.style.visibility = '';\n\t\tmxUtils.fit(this.div);\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxTooltipHandler = typeof mxTooltipHandler !== 'undefined' ? mxTooltipHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n *\n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n *\n * Example:\n *\n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n *\n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n *\n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *\n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *\n *       this.cell = tmp;\n *\n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *\n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n *\n * Constructor: mxCellTracker\n *\n * Constructs an event handler that highlights cells.\n *\n * Parameters:\n *\n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n *\n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n *\n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n *\n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n *\n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n\n__mxOutput.mxCellTracker = typeof mxCellTracker !== 'undefined' ? mxCellTracker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n *\n * A helper class to highlight cells. Here is an example for a given cell.\n *\n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n *\n * Constructor: mxCellHighlight\n *\n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n *\n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = true;\n\n/**\n * Variable: state\n *\n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n *\n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n *\n * Sets the color of the rectangle used to highlight drop targets.\n *\n * Parameters:\n *\n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n *\n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n *\n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\n\treturn shape;\n};\n\n/**\n * Function: repaint\n *\n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n *\n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.shape.bounds = new mxRectangle(this.state.x - this.spacing, this.state.y - this.spacing,\n\t\t\t\t\tthis.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n *\n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n *\n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n *\n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\treturn hit;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxCellHighlight = typeof mxCellHighlight !== 'undefined' ? mxCellHighlight : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n *\n * Example:\n *\n * Bind the delete key to the delete action in an existing editor.\n *\n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n *\n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n *\n * Keycodes:\n *\n * See <mxKeyHandler>.\n *\n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n *\n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n *\n * Parameters:\n *\n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n\n__mxOutput.mxDefaultKeyHandler = typeof mxDefaultKeyHandler !== 'undefined' ? mxDefaultKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n *\n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n *\n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n *\n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes:\n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n *\n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n *\n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n *\n * To add a new item for a custom function:\n *\n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n *\n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *\n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n *\n * The new condition can then be used in any item as follows:\n *\n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n *\n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n *\n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n *\n * Recursively adds the given items and all of its children into the given menu.\n *\n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n *\n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n *\n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\n\treturn conditions;\n};\n\n__mxOutput.mxDefaultPopupMenu = typeof mxDefaultPopupMenu !== 'undefined' ? mxDefaultPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n *\n * Example:\n *\n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n *\n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n *\n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end)\n *\n * Codec:\n *\n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n *\n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n *\n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Variable: init\n *\n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n *\n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n *\n * Parameters:\n *\n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n *\n * Parameters:\n *\n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n *\n * Parameters:\n *\n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n *\n * Parameters:\n *\n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n *\n * Parameters:\n *\n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n *\n * Parameters:\n *\n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\n\t\treturn null;\n\t});\n\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\n\tthis.installDropHandler(img, dropHandler);\n\n\treturn img;\n};\n\n/**\n * Function: drop\n *\n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n *\n * Parameters:\n *\n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n *\n * Parameters:\n *\n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: connect\n *\n * Handles a drop by connecting the given vertex to the given source cell.\n *\n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\n\t\t\tvertex.setGeometry(g);\n\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n *\n * Makes the given img draggable using the given function for handling a\n * drop event.\n *\n * Parameters:\n *\n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n\n__mxOutput.mxDefaultToolbar = typeof mxDefaultToolbar !== 'undefined' ? mxDefaultToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2019, draw.io AG\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement a application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>.\n *\n * Actions:\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * Read/write Diagrams:\n *\n * To read a diagram from an XML string, for example from a textfield within the\n * page, the following code is used:\n *\n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n *\n * For reading a diagram from a remote location, use the <open> method.\n *\n * To save diagrams in XML on a server, you can set the <urlPost> variable.\n * This variable will be used in <getUrlPost> to construct a URL for the post\n * request that is issued in the <save> method. The post request contains the\n * XML representation of the diagram as returned by <writeGraphModel> in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * Creating images:\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * Special characters:\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n *\n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *\n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * (end)\n *\n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n *\n * Local Files:\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * Cell Properties:\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task>\n * (end)\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * <mxCodec> will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced\n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n *\n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n *\n * Popupmenu and Toolbar:\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n *\n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n *\n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n *\n * Programmatically inserting cells:\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n *\n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n *\n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * Example:\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n *\n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n *\n * Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n *\n * Parameters:\n *\n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\n/**\n * Variable: askZoomResource\n *\n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\n/**\n * Variable: lastSavedResource\n *\n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\n/**\n * Variable: currentFileResource\n *\n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\n/**\n * Variable: propertiesResource\n *\n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\n/**\n * Variable: tasksResource\n *\n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\n/**\n * Variable: helpResource\n *\n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\n/**\n * Variable: outlineResource\n *\n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\n/**\n * Variable: outline\n *\n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is edit.\n *\n * To handle a singleclick, use the following code.\n *\n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n *\n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n *\n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell\n * under the mousepointer, otherwise the cell under the\n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n *\n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n *\n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n *\n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n *\n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: groupBorderSize\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is xml.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n *\n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n *\n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n *\n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n\n/**\n * Variable: cycleAttributeValues\n *\n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n *\n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n *\n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is fillColor.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n *\n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n *\n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n *\n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n *\n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\n/**\n * Variable: helpHeight\n *\n * Specifies the height of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n *\n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\n/**\n * Variable: propertiesHeight\n *\n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into\n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n *\n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n *\n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n *\n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n *\n * Parameters:\n *\n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n *\n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n *\n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n *\n * Binds the specified actionname to the specified function.\n *\n * Parameters:\n *\n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n *\n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n *\n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n *\n * Example:\n *\n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n *\n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n *\n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n *\n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n *\n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\n\t\treturn layout;\n\t};\n\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n *\n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\n/**\n * Function: installUndoHandler\n *\n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\n/**\n * Function: installDrillHandler\n *\n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n *\n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n *\n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n *\n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n *\n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n *\n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n *\n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n *\n * Creates the <status> using the specified container.\n *\n * This implementation adds listeners in the editor to\n * display the last saved time and the current filename\n * in the status bar.\n *\n * Parameters:\n *\n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n *\n * Display the specified message in the status bar.\n *\n * Parameters:\n *\n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n *\n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n *\n * Parameters:\n *\n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n *\n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n *\n * Parameters:\n *\n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n *\n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\n\tvar prefix = this.getRootTitle();\n\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n *\n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n *\n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n *\n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n *\n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n *\n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n *\n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n *\n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n *\n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n *\n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n *\n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n *\n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n *\n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n *\n * Example:\n *\n * To replace the diagram with the diagram in the response, use the\n * following code.\n *\n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n *\n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n *\n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n *\n * Parameters:\n *\n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n *\n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n *\n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n *\n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n *\n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\n\t\t\t}\n\t\t}\n\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n *\n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n *\n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\n\t\t// Adds a field for the cell style\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\n\t\t\t\t// Checks if the graph wants cells to\n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\n\t\tform.addButtons(okFunction, cancelFunction);\n\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n *\n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n *\n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n *\n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *\n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\n\tthis.tasks.setVisible(true);\n};\n\n/**\n * Function: refreshTasks\n *\n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\n/**\n * Function: createTasks\n *\n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\n/**\n * Function: showHelp\n *\n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\n\t\tthis.help = wnd;\n\t}\n\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n *\n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n *\n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n *\n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n *\n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n *\n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n *\n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n *\n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n *\n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\n\t\t\t\tvar tmp = state.x+state.width;\n\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\n\t\t\t\ttmp = state.y+state.height;\n\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n *\n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n\n__mxOutput.mxEditor = typeof mxEditor !== 'undefined' ? mxEditor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the\n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new\n\t * instance of an object or to configure an existing instance,\n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t *\n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function.\n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t}\n\n};\n\n__mxOutput.mxCodecRegistry = typeof mxCodecRegistry !== 'undefined' ? mxCodecRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n *\n * References:\n *\n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n *\n * Example:\n *\n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n *\n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n *\n * Example:\n *\n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n *\n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n *\n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n *\n * graph.addCells(cells);\n * (end)\n *\n * Example:\n *\n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n *\n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n *\n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n *\n * Debugging:\n *\n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n *\n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *\n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n *\n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n *\n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n *\n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n *\n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n *\n * Assoiates the given object with the given ID and returns the given object.\n *\n * Parameters\n *\n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tthis.updateElements();\n\n\treturn this.elements[id];\n};\n\n/**\n * Function: updateElements\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.updateElements = function()\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\n\t\tif (id != null)\n\t\t{\n\t\t\tif (this.elements[id] == null)\n\t\t\t{\n\t\t\t\tthis.elements[id] = node;\n\t\t\t}\n\t\t\telse if (this.elements[id] != node)\n\t\t\t{\n\t\t\t\tthrow new Error(id + ': Duplicate ID');\n\t\t\t}\n\t\t}\n\t}\n\n\tnode = node.firstChild;\n\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded.\n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tthis.updateElements();\n\tvar obj = null;\n\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true.\n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n *\n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\n\tif (parent != null)\n\t{\n\t\tif (parent == cell)\n\t\t{\n\t\t\tthrow new Error(parent.id + ': Self Reference');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent.insert(cell);\n\t\t}\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n\n__mxOutput.mxCodec = typeof mxCodec !== 'undefined' ? mxCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n *\n * Atomic Values:\n *\n * Consider the following example.\n *\n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n *\n * This object is encoded into an XML node using the following.\n *\n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n *\n * The output of the encoding may be viewed using <mxLog> as follows.\n *\n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n *\n * Finally, the result of the encoding looks as follows.\n *\n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n *\n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n *\n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n *\n * Objects:\n *\n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n *\n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n *\n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n *\n * This will be mapped to the following XML structure by mxObjectCodec.\n *\n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n *\n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n *\n * Arrays:\n *\n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n *\n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n *\n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n *\n * This array is represented by the following XML nodes.\n *\n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n *\n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n *\n * References:\n *\n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n *\n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n *\n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n *\n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n *\n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n *\n * Expressions:\n *\n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n *\n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n *\n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n *\n * (code)\n * <Object foo=\"left\"/>\n * (end)\n *\n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n *\n * Expressions are only evaluated if <allowEval> is true.\n *\n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\n\tthis.reverse = new Object();\n\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n *\n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n *\n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n *\n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n *\n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the\n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\n\treturn this.afterEncode(enc, obj, node);\n};\n\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n *\n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n *\n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n *\n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\n};\n\n/**\n * Function: writeComplexAttribute\n *\n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n *\n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n *\n * Returns true if the given object attribute is a boolean value.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n *\n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\n\t\tif (isNaN(value) || !isFinite(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n *\n * Returns true if the given XML attribute is or should be a numeric value.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns\n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end)\n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\n    return this.afterDecode(dec, node, obj);\n};\n\n/**\n * Function: decodeNode\n *\n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n *\n * Decodes all attributes of the given node using <decodeAttribute>.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n *\n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n *\n * Reads the given attribute into the specified object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n *\n * Decodes all children of the given node using <decodeChild>.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n *\n * Reads the specified child into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tthrow new Error(e.message + ' for ' + child.nodeName);\n\t\t}\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n *\n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n\n    return template;\n};\n\n/**\n * Function: addObjectValue\n *\n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the\n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n\n__mxOutput.mxObjectCodec = typeof mxObjectCodec !== 'undefined' ? mxObjectCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t *\n\t * Transient fields can be added using the following code:\n\t *\n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t *\n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t *\n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t *\n\t * mxUtils.extend(CustomCell, mxCell);\n\t *\n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */\n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxCellCodec = typeof mxCellCodec !== 'undefined' ? mxCellCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t *\n\t * Overrides decode child to handle special child nodes.\n\t */\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxModelCodec = typeof mxModelCodec !== 'undefined' ? mxModelCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxRootChangeCodec = typeof mxRootChangeCodec !== 'undefined' ? mxRootChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (!isWrite || obj.model.contains(obj.previous)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes references to parent or previous if not in the model.\n\t */\n  \tcodec.isExcluded = function(obj, attr, value, write)\n  \t{\n  \t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n  \t\t\t(write && value != null && (attr == 'previous' ||\n  \t\t\tattr == 'parent') && !obj.model.contains(value));\n  \t};\n\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child', obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are decoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxChildChangeCodec = typeof mxChildChangeCodec !== 'undefined' ? mxChildChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxTerminalChangeCodec = typeof mxTerminalChangeCodec !== 'undefined' ? mxTerminalChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitely\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n *\n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n\n__mxOutput.mxGenericChangeCodec = typeof mxGenericChangeCodec !== 'undefined' ? mxGenericChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n\n__mxOutput.mxGraphCodec = typeof mxGraphCodec !== 'undefined' ? mxGraphCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node.\n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\n\t\t\t\t\tvar abs = state.absolutePoints;\n\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\n\t\t\t\t\t}\n\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxGraphViewCodec = typeof mxGraphViewCodec !== 'undefined' ? mxGraphViewCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitely via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(style[j]);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\n\t\treturn value;\n\t};\n\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\n\t\tnode = node.firstChild;\n\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\n\t\t\t\t\tvar entry = node.firstChild;\n\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnode = node.nextSibling;\n\t\t}\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n\n__mxOutput.mxStylesheetCodec = typeof mxStylesheetCodec !== 'undefined' ? mxStylesheetCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultKeyHandlerCodec = typeof mxDefaultKeyHandlerCodec !== 'undefined' ? mxDefaultKeyHandlerCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitely via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes.\n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t *\n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t *\n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t *\n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t *\n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t *\n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n\n__mxOutput.mxDefaultToolbarCodec = typeof mxDefaultToolbarCodec !== 'undefined' ? mxDefaultToolbarCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultPopupMenuCodec = typeof mxDefaultPopupMenuCodec !== 'undefined' ? mxDefaultPopupMenuCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t *\n\t * Overrides decode child to handle special child nodes.\n\t */\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxEditorCodec = typeof mxEditorCodec !== 'undefined' ? mxEditorCodec : undefined;\nreturn __mxOutput;\n};\n}));\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","var core = module.exports = { version: '2.6.9' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = {};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","module.exports = require('./_shared')('native-function-to-string', Function.toString);\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n"],"sourceRoot":""}